<?xml version="1.0" encoding="US-ASCII"?>
<!-- edited with XMLSPY v5 rel. 3 U (http://www.xmlspy.com)
     by Daniel M Kohn (private) -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 SYSTEM
    "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC3775 SYSTEM
    "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3775.xml">
<!ENTITY RFC4225 SYSTEM
    "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4225.xml">
<!ENTITY RFC4866 SYSTEM
    "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4866.xml">
<!ENTITY RFC5213 SYSTEM
    "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5213.xml">
<!ENTITY RFC3588 SYSTEM
    "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3588.xml">
<!ENTITY RFC3688 SYSTEM
    "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3688.xml">
<!ENTITY RFC4005 SYSTEM
    "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4005.xml">
<!ENTITY RFC4006 SYSTEM
    "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4006.xml">
<!ENTITY RFC4601 SYSTEM
    "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4601.xml">
<!ENTITY RFC4605 SYSTEM
    "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4605.xml">
<!ENTITY RFC5777 SYSTEM
    "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5777.xml">
<!ENTITY RFC6224 SYSTEM
    "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6224.xml">
<!ENTITY RFC7333 SYSTEM
    "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7333.xml">
<!ENTITY RFC6088 SYSTEM
    "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6088.xml">
<!ENTITY RFC6241 SYSTEM
    "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6241.xml">
<!ENTITY RFC6242 SYSTEM
    "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6242.xml">
<!ENTITY RFC6991 SYSTEM
    "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6991.xml">
<!ENTITY RFC7222 SYSTEM
    "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7222.xml">
<!ENTITY RFC7660 SYSTEM
    "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7660.xml">
<!ENTITY RFC8040 SYSTEM
    "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8040.xml">
<!ENTITY RFC8072 SYSTEM
    "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8072.xml">
<!ENTITY RFC8300 SYSTEM
"http://xml.resource.org/public/rfc/bibxml/reference.RFC.8300.xml">
<!ENTITY I-D.bertz-dime-policygroups SYSTEM
    "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.bertz-dime-policygroups.xml">
<!ENTITY I-D.ietf-dmm-requirements SYSTEM
    "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-dmm-requirements.xml">
<!ENTITY I-D.ietf-dmm-deployment-models SYSTEM
    "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-dmm-deployment-models.xml">
<!ENTITY I-D.ietf-6man-segment-routing-header SYSTEM
    "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-6man-segment-routing-header.xml">
<!ENTITY I-D.ietf-spring-segment-routing-mpls SYSTEM
    "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-spring-segment-routing-mpls.xml">
]>

<rfc category="std" docName="draft-ietf-dmm-fpc-cpdp-10"
     ipr="trust200902">
  <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

  <?rfc toc="yes" ?>

  <?rfc symrefs="yes" ?>

  <?rfc sortrefs="yes"?>

  <?rfc iprnotified="no" ?>

  <?rfc strict="yes" ?>

<?rfc compact="yes" ?>    <!-- conserve vertical whitespace -->
<?rfc subcompact="no" ?>  <!-- but keep a blank line between list items -->

  <front>
    <title abbrev="DMM FPC Protocol">
	Protocol for Forwarding Policy Configuration (FPC) in DMM</title>

     <author fullname="Satoru Matsushima" initials="S." surname="Matsushima">
      <organization abbrev="SoftBank">SoftBank</organization>

      <address>
        <postal>

          <street> 1-9-1,Higashi-Shimbashi,Minato-Ku</street>

          <city>Tokyo  105-7322</city>

          <region></region>

          <code></code>

          <country>Japan</country>
        </postal>

        <phone></phone>

        <email>satoru.matsushima@g.softbank.co.jp</email>
      </address>
    </author>

    <author initials="L." surname="Bertz" fullname="Lyle Bertz">
    <organization abbrev="Sprint"></organization>
    <address>
    <postal>
              <street> 6220 Sprint Parkway</street>

              <city>Overland Park  KS, 66251</city>

              <region></region>

              <code></code>

              <country>USA</country>
            </postal>

            <phone></phone>

            <email>lylebe551144@gmail.com</email>

    </address>
    </author>

    <author fullname="Marco Liebsch" initials="M." surname="Liebsch">
      <organization abbrev="NEC">NEC Laboratories Europe</organization>

      <address>
        <postal>
          <street> NEC Europe Ltd.</street>

          <street> Kurfuersten-Anlage 36</street>

          <city>D-69115 Heidelberg</city>

          <region></region>

          <code></code>

          <country>Germany</country>
        </postal>

        <phone>+49 6221 4342146</phone>

        <email>liebsch@neclab.eu</email>
      </address>
    </author>

   <author fullname="Sri Gundavelli" initials="S" surname="Gundavelli">
      <organization abbrev="">Cisco</organization>

      <address>
        <postal>
          <street> 170 West Tasman Drive</street>

          <city>San Jose</city>

          <region>CA</region>

          <code>95134</code>

          <country>USA</country>
        </postal>

        <email>sgundave@cisco.com</email>
      </address>
    </author>



<author initials="D." surname="Moses" fullname="Danny Moses">
<organization abbrev="Intel Corporation"></organization>
<address>
<postal>
          <street> </street>

          <city></city>

          <region></region>

          <code></code>

          <country></country>
        </postal>

        <phone></phone>

        <email>danny.moses@intel.com</email>

</address>
</author>

    <author fullname="Charles E. Perkins" initials="C.E." surname="Perkins">
       <organization abbrev="Futurewei">Futurewei Inc. </organization>
       <address>
         <postal>
           <street> 2330 Central Expressway</street>
           <city>Santa Clara</city>
           <code>95050</code>
           <region>CA</region>
           <country>USA</country>
         </postal>
         <phone>+1-408-330-4586</phone>
         <email>charliep@computer.org</email>
       </address>
    </author>

    <date year="2018" />

    <workgroup>DMM Working Group</workgroup>

    <abstract>
      <t>
        This document describes a way, called Forwarding Policy Configuration
        (FPC) to manage the separation of data-plane and control-plane. FPC
        defines a flexible mobility management system using FPC agent and FPC
        client functions. An FPC agent provides an abstract interface to the
        data-plane. The FPC client configures data-plane nodes by using the
        functions and abstractions provided by the FPC agent for the data-plane
        nodes. The data-plane abstractions presented in this document are
        extensible, in order to support many different types of mobility
        management systems and data-plane functions.
      </t>
    </abstract>
  </front>

<middle>
    <section title="Introduction">

    <t> This document describes Forwarding Policy Configuration (FPC), a
        system for managing the separation of control-plane and data-plane.
	FPC enables flexible mobility management using FPC client and FPC agent
        functions. An FPC agent exports an abstract interface representing the
	data-plane.  To configure data-plane nodes and functions, the FPC
	client uses the interface to the data-plane offered by the FPC agent.
    </t>

    <t> Control planes of mobility management systems, or related applications
        which require data-plane control, can utilize the FPC client at various
	levels of abstraction.  FPC operations are capable of directly
	configuring a single Data-Plane Node (DPN), as well as multiple DPNs,
	as determined by the data-plane models exported by the FPC agent.</t>

    <t> A FPC agent represents the data-plane operation according to several
	basic information models.
            An FPC agent also provides access to Monitors, which produce
	    reports when triggered by events regarding
	    Mobility Contexts, DPNs or the Agent.</t>

    <t> To manage mobility sessions, the FPC client assembles applicable sets
	of forwarding policies from the data model, and configures them on the
	appropriate FPC Agent.  The Agent then renders those policies
        into specific configurations for each DPN at which mobile nodes are
        attached.  The specific protocols and configurations to configure a
	DPN from a FPC Agent are outside the scope of this document.</t>
<!--  CEP: But there needs to be some real-life examples... -->
<!--  CEP: And probably some cross-references to relevant DMM documents.  -->

    <t> A DPN is a logical entity that performs data-plane operations (packet
	movement and management).  It may represent a physical DPN unit, a
	sub-function of a physical DPN or a collection of physical DPNs (i.e.,
	a "virtual DPN").  A DPN may be virtual -- it may export the FPC
	DPN Agent interface, but be implemented as software that controls
	other data-plane hardware or modules that may or may not be
	FPC-compliant.  In this document, DPNs are specified without
	regard for whether the implementation is virtual or physical.
	DPNs are connected to provide mobility management systems such as
	access networks, anchors and domains. The FPC agent interface
        enables establishment of a topology for the forwarding plane. </t>

    <t> When a DPN is mapped to physical data-plane equipment, the FPC client
	can have complete knowledge of the DPN architecture, and use that
	information to perform DPN selection for specific sessions. On the
	other hand, when a virtual DPN is mapped
	to a collection of physical DPNs, the FPC client cannot select a
	specific physical DPN because it is hidden by the abstraction; only
	the FPC Agent can address the specific associated physical DPNs.
	Network architects have the flexibility to determine which
	DPN-selection capabilities are performed by the FPC Agent (distributed)
	and which by the FPC client (centralized).
	In this way, overlay networks can be configured
	without disclosing detailed knowledge of the underlying hardware
	to the FPC client and applications. </t>

    <t> The abstractions in this document are designed to support
	many different mobility management systems and data-plane functions.
	The architecture and protocol design of FPC is not tied to specific
	types of access technologies and mobility protocols.  </t>

    </section>

    <!-- <section anchor="pcmodel"
         title="Reference Architecture and Information Model"> -->
<!--  CEP: What happened to this section?  -->

    <section anchor="terminology" title="Terminology">
    <t> The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in
	<xref target="RFC2119"></xref>.</t>

    <t> <list hangIndent="24" style="hanging">

        <t hangText="Domain: "> One or more DPNs that form a logical partition
	    of network resources (e.g., a data-plane network under common
	    network administration).  An FPC client (e.g., a mobility
	    management system) may utilize a single or multiple domains.</t>

        <t hangText="DPN: "> A data-plane node (DPN) is capable of performing
	    data-plane features.  For example, DPNs may be switches or routers,
	    regardless of whether they are realized as hardware or purely
	    in software.  </t>

	<t hangText="DPN-Set: ">
	    the set of DPNs in a network configuration</t>
	<t hangText="DPN-Type-Set: ">
	    a set of DPN-Type entities</t>
        <t hangText="FPC Agent:"> An FPC Agent manages DPNs, thereby providing
	    abstracted data-plane networks to FPC Clients. </t>

        <t hangText="FPC Client:"> An FPC Client is integrated with a mobility
	    management system or related application, enabling control over
	    forwarding policy, mobility sessions and DPNs via an FPC Agent.</t>

	<t hangText="Service-Group-Set: ">
	    a set of DPN interfaces that support a specific data-plane
	    purpose (inbound/outbound, roaming, subnetwork with common
	    specific configuration, etc.) </t>

        <t hangText="Mobility Context:">
	    A Mobility Context contains the data-plane information necessary
	    to efficiently send and receive traffic from a mobile node.  This
	    includes policies that are created or modified during the network's
	    operation - in most cases, on a per-flow or per session basis.
            A Mobility-Context represents the mobility sessions (or flows)
	    which are active on a mobile node.  This includes associated
	    runtime attributes, such as tunnel endpoints, tunnel identifiers,
	    delegated prefix(es), routing information, etc.
            Mobility-Contexts are associated to specific DPNs.
	    Some pre-defined Policies may apply during mobility signaling
	    requests.  The Mobility Context supplies information about
	    the policy settings specific to a mobile node and its flows;
	    this information is often quite dynamic. </t>

        <t hangText="Mobility Session:">
	    Traffic to/from a mobile node that is expected to survive
	    reconnection events. </t>

	<t hangText="Monitor: ">
	    A reporting mechanism for a list of events that trigger
	    notification messages from an FPC Agent to an FPC Client. </t>

        <t hangText="Policy:">
            A Policy determines the mechanisms for managing specific traffic
            flows or packets. Policies specify QoS, rewriting rules for packet
	    processing, etc.  A Policy consists of one or more rules.
            Each rule is composed of a Descriptor and Actions. The Descriptor
            in a rule identifies packets (e.g., traffic flows), and the
	    Actions apply treatments to packets that match the Descriptor in
	    the rule.  Policies can apply to Domains, DPNs, Mobile Nodes,
	    Service Groups, or particular Flows on a Mobile Node.
        </t>

        <t hangText="Property:">
	    An attribute-value pair for an instance of an FPC entity </t>

        <t hangText="Template:"> A recipe for instantiating FPC entities.
	    Template definitions are accessible (by name or by a key) in an
	    indexed set.  A template is used to create specific instances
	    (e.g., specific policies) by assigning appropriate values into
	    the template definition.  </t>

        <t hangText="Tenant:"> An operational entity that manages
            mobility management systems or applications which require
            data-plane functions. </t>
<!--  CEP: Still do not understand why this is here.  -->

        <t hangText="Topology: ">
	    The DPNs and the links between them.
	    For example, access nodes may be assigned to a Service Group
	    which peers to a Service Group of anchor nodes. </t>
        </list></t>
    </section>

    <section anchor="refarch" title="FPC Design Objectives and Deployment">

    <t> Using FPC, mobility control-planes and applications can configure DPNs
	    to perform various mobility management roles as described in
	    <xref target="I-D.ietf-dmm-deployment-models"/>.  This fulfills
	    the requirements described in <xref target="RFC7333"/>. </t>

    <t> This document defines FPC Agent and FPC Client, as well as the
            information models that they use.  The attributes defining those
	    models serve as the protocol elements for the interface between
	    the FPC Agent and the FPC Client. </t>

    <t> Mobility control-plane applications integrate features offered by the
	    FPC Client.  The FPC Client connects to FPC Agent functions.
            The Client and the Agent communicate based on information models
            described in <xref target="infomodel"/>.  The models allow the
	    control-plane to configure forwarding policies on the Agent
            for data-plane communications with mobile nodes. </t>

    <t> Once the Topology of DPN(s) and domains are defined on an Agent for a
	    data plane, the DPNs in the topology
	    are available for further configuration. The FPC Agent connects
	    those DPNs to manage their configurations.</t>
<!--  CEP: Is it intended that there is only one FPC Agent per data-plane?  -->
<!--  CEP: I think there should be multiple, and so this needs rewording.  -->

    <t> An FPC Agent configures and manages its
	    DPN(s) according to forwarding policies requested by the FPC
	    Client.
<!--  CEP: Not clear that policies are the *only* configuration needs.  -->
		    Configuration commands used by the FPC agent to configure
	    its DPN node(s) may be specific to the DPN
	    implementation; consequently the method by which the FPC Agent
	    carries out the specific configuration for its DPN(s) is out of
	    scope for this document.  Along with the data models, the
	    FPC Client (on behalf of control-plane and applications) requests
	    that the Agent configures Policies prior to the time when the DPNs
	    start forwarding data for their mobility sessions. </t>
<!--  CEP: I think that we should define the methods and allow specialization
           for the needs of particular vendor's equipment.  -->

    <t> This architecture is illustrated in <xref target="fig_refarch"/>.
            An FPC Agent may be implemented in a network controller that
	    handles multiple DPNs, or (more simply) an
	    FPC Agent may itself be integrated into a DPN.</t>

    <t> This document does not specify a protocol for the FPC interface;
            it is out of scope. However, an implementation must support the
	    FPC transactions described in <xref target="protocol"/>. </t>
<!--  CEP: This makes it problematic for the document to refer to anything
           called an "FPC protocol".  -->
<!--  CEP: It would be better to actually have a protocol.  -->

    <t> 
        <figure anchor="fig_refarch"
          title="Reference Forwarding Policy Configuration (FPC) Architecture">
            <artwork align="center"><![CDATA[
                    +-------------------------+
                    | Mobility Control-Plane  |
                    |          and            |
                    |      Applications       |
                    |+-----------------------+|
                    ||      FPC Client       ||
                    |+----------^------------+|
                    +-----------|-------------+
        FPC interface protocol  |
                +---------------+-----------------+
                |                                 |
  Network       |                                 |
  Controller    |                      DPN        |
    +-----------|-------------+        +----------|---------+
    |+----------v------------+|        |+---------v--------+|
    ||   [Data-plane model]  ||        ||[Data-plane model]||
    ||       FPC Agent       ||        ||    FPC Agent     ||
    |+-----------------------+|        |+------------------+|
    |+------------+----------+|        |                    |
    ||SB Protocol |FPC Client||        |  DPN Configuration |
    ||   Modules  |  Module  ||        +--------------------+
    |+------^-----+----^-----+|
    +-------|----------|------+
            |          |
  Other     |          | FPC interface
  southband |          | protocol
  protocols |          |
            |          +-----------------+
            |                            |
DPN         |                 DPN        |
 +----------|---------+       +----------|---------+
 |+---------v--------+|       |+---------v--------+|
 ||  Configuration   ||       ||[Data-plane model]||
 || Protocol module  ||       ||     FPC Agent    ||
 |+------------------+|       |+------------------+|
 |                    |       |                    |
 | DPN Configuration  |       |  DPN Configuration |
 +--------------------+       +--------------------+
              ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
<!--  CEP: While we cannot prevent out-of-band southbound protocols, it seems
           improper to include them as part of the architecture.  And maybe
           even we should prohibit them
		***as interfaces between FPC function entities***.
           In other words, if they are out-of-band, they should truly be
           out-of-band.          -->

    <t> The FPC architecture supports multi-tenancy; an FPC enabled
            data-plane supports tenants of multiple mobile operator networks
            and/or applications. It means that the FPC Client of each tenant
            connects to the FPC Agent and it MUST partition namespace and data
            for their data-planes. DPNs on the data-plane may fulfill multiple
            data-plane roles which are defined per session, domain and
            tenant.</t>
<!--  CEP: After all this time I still do not understand why tenancy
           is relevant to FPC.  -->

    <t> FPC information models often configuration to fit the specific needs
	for DPN management of a mobile node's traffic. The FPC interfaces in
            <xref target="fig_refarch"/> are the only interfaces required to
	    handle runtime data in a Mobility Context.
<!--  CEP: Notably, in the figure there is more than one FPC interface.  -->
<!--  CEP: Also I have replaced "FPC interface protocol" by "FPC interface".-->
<!--  CEP: A predefined mobility context *might* brought into
           a virtual machine when a mobile node arrives, contradicting
	   the abovementioned requirement for real-time operation.  -->
	    The Topology and some Policy FPC models may be pre-configured; in
	    that case real-time protocol exchanges are not required for them.
<!--  CEP: The next sentence really does not belong.  -->

<!--
            Operators that are tenants in the FPC data-plane could configure
            Topology and Policy on the Agent through other means, such as
	    <xref target="I-D.ietf-netconf-restconf">Restconf</xref> or
	    <xref target="RFC6241">Netconf</xref>.
    -->
							</t>
<!--  CEP: Also, Restconf etc. could be used regardless of tenancy.  -->

    </section>

    <section anchor="infomodel" title="FPC Mobility Information Model">

<?rfc subcompact="yes" ?>  <!-- don't keep a blank line between list items -->
    <t> The FPC information model includes the following components:
        <list>
            <t> DPN Information Model, </t>
            <t> Topology Information Model, </t>
            <t> Policy Information Model, </t>
            <t> Mobility-Context, and </t>
            <t> Monitor, as illustrated in
		<xref target="fig-InfoModel"></xref>. </t>
	</list>
<?rfc subcompact="no" ?>  <!-- keep a blank line between list items -->

    <figure anchor="fig-InfoModel"
		title="FPC Information Model structure">
            <artwork align="center"><![CDATA[
     :
     |
     +-[FPC Mobility Information Model]
     |          |
     |          +-[DPN Information Model]
     |          |
     |          +-[Topology Information Model]
     |          |
     |          +-[Policy Information Model]
     |          |
     |          +-[Mobility-Context]
     |          |
     |          +-[Monitor]
     |
    ]]></artwork>
            <postamble></postamble>
       </figure>
    </t>

    <section anchor="notation" title="Model Notation and Conventions">

    <t> The following conventions are used to describe the
	FPC information models. </t>

    <t> Information model entities (e.g. DPNs, Rules, etc.) are defined in a
	hierarchical notation where all entities at the same hierarchical
	level are located on the same left-justified vertical position
	sequentially. When entities are composed of sub-entities, the
	sub-entities appear shifted to the right, as shown in
	<xref target="fig-notation1"></xref>.

        <figure anchor="fig-notation1"
                  title="Model Notation - An Example">
            <artwork align="center"><![CDATA[
         |             
         +-[entity2]
         |         +-[entity2.1]
         |         +-[entity2.2]
              ]]></artwork>
            <postamble></postamble>
          </figure>
    </t>
 
    <t> Some entities have one or more qualifiers placed on the right hand
	side of the element definition in angle-brackets. Common types
	include:
        <list style="hanging">
        <t hangText="List:"> a collection of entities (some could be
			duplicated)</t>
        <t hangText="Set:"> a nonempty collection of entities
		without duplications </t>
        <t hangText="Name:"> a human-readable string </t>
        <t hangText="Key:"> a unique value. We distinguish 3 types of keys:
        <list>
            <t hangText="U-Key:"> a key unique across all tenants.
		U-Key spaces typically involve the use of registries or
		language specific mechanisms that guarantee universal
		uniqueness of values. </t>
            <t hangText="G-Key:"> a key unique within a tenant </t>
            <t hangText="L-Key:"> a key unique within a
		local namespace.  For example, there may exist interfaces with
		the same name, e.g. "if0", in two different DPNs
		but there can only be one "if0" within each
		DPN (i.e. its local Interface-Key L-Key space). </t>
<!--  CEP: L-Key makes better sense without referring to a tenant.  -->
<!--  CEP: Need to see why distinction between U-Key and G-Key is needed.  -->
            </list></t>
        </list></t>

    <t> Each entity or attribute may be optional (O) or mandatory (M).
	Entities that are not marked as optional are mandatory.</t>

       <t><figure anchor="fig-notation2">
            <artwork align="center"><![CDATA[
    The following example shows 3 entities:
        -- Entity1 is a globally unique key, and optionally can have
                   an associated Name
        -- Entity2 is a list
        -- Entity3 is a set and is optional
                   +
                   | 
                   +-[entity1] <G-Key> (M), <Name> (O)
                   +-[entity2] <List>
                   +-[entity3] <Set> (O)
                   |
                   +
            ]]></artwork>
             <postamble></postamble>
          </figure>
        </t>

    <t> When expanding entity1 into a modeling language such as YANG it
	would result in two values: entity1-GKey and entity1-Name.</t>

    <t> To encourage re-use, FPC defines indexed sets of various entity
	templates.  Other model elements that need access to an indexed model
	entity contain an attribute
	which is always denoted as "entity-Key".  When a Key attribute is
	encountered, the referencing model element may supply
	attribute values for use when the referenced entity model is
	instantiated.  For example: <xref target="fig-indexed-sets"></xref>
	shows 2 entities:
	<list>
	    <t> EntityA definition references an entityB model element. </t>
	    <t> EntityB model elements are indexed by entityB-Key. </t>
	</list>
	Each EntityB model element has an entityB-Key which allows it to be
	uniquely identified, and a list of Attributes (or, alternatively,
	a Type) which specifies its form.  This allows a referencing entity
	to create an instance by supplying entityB-Values to be inserted,
	in a Settings container.
	<figure anchor="fig-indexed-sets" title="Indexed sets of entities">
        <artwork align="center"><![CDATA[
         .
         .
         | 
         +-[entityA]
         |      +-[entityB-Key]
         |      +-[entityB-Values]
         .
         .
         | 
         +-[entityB] <L-Key> (M) <Set>
         |      +-[entityB-Type]
         .
         .  ]]></artwork>
             <postamble></postamble>
          </figure>
	Indexed sets are specified for each of the following kinds of entities:
<?rfc subcompact="yes" ?>  <!-- don't keep a blank line between list items -->
        <list>
	    <t> Domain (See <xref target="domain" />) </t>
	    <t> DPN (See <xref target="dpn" />) </t>
	    <t> Policy (See <xref target="policy-InfoModel" />) </t>
	    <t> Descriptor (See <xref target="fig-policy-InfoModel" />) </t>
	    <t> Action (See <xref target="fig-policy-InfoModel" />) </t>
	    <t> Service Group (See <xref target="srv-group" />, and </t>
	    <t> Mobility-Context (See <xref target="mobility-InfoModel" />)</t>
	</list>
<?rfc subcompact="no" ?>  <!-- keep a blank line between list items -->
	As an example, for a Domain entity, there is a corresponding
	attribute denoted as "Domain-Key" whose value can be used to
	determine a reference to the Domain. </t>
    </section>     <!-- end section title="Model Notation and Conventions"  -->

    <section anchor="templates" title="Templates and Attributes">
    <t>
        In order to simplify development and maintenance of the needed
	policies and other objects used by FPC, the Information Models
	which are presented often have attributes that are not
	initialized with their final values.  When an
	FPC entity is instantiated according to a template definition,
	specific values need to be configured for each such attribute.
	For instance, suppose an entity Template has an Attribute named
	"IPv4-Address", and also suppose that an FPC Client instantiates the
	entity and requests that it be installed on a DPN.  An IPv4 address
	will be needed for the value of that Attribute before the entity can
	be used.

	<figure anchor="fig-templates" title="Template entities">
        <artwork align="center"><![CDATA[
         +-[Template] <U-Key, Name> (M) <Set>
         |      +-[Attributes] <Set> (M) 
         |      +-[Extensible ~ FALSE]
         |      +-[Entity-State ~ Initial]
           ]]></artwork>
             <postamble></postamble>
        </figure>
 	<list style="hanging">
        <t hangText="Attributes:">
		A set of Attribute names MAY be included when
		defining a Template for instantiating FPC entities.
		Any instantiation from a Template MUST have at least one
		Attribute in order to be a useful entity.  </t>
        <t hangText="Extensible:"> Determines whether or not entities
		instantiated from the Template can be extended with new
		non-mandatory Attributes not originally defined for the
		Template.  Default value is FALSE.  If a Template does
		not explicitly specify this attribute, the default
		value is considered to be in effect. </t>
        <t hangText="Entity-Status:"> Either Initial, PartiallyConfigured,
		Configured, or Active.  Default value is Initial.
		See <xref target="att_appl"/> for more information
		about how the Entity-Status changes during the configuration
		steps of the Entity.  </t>
	</list> 
    </t>

    <t> The Attributes in an Entity Template may be either mandatory or
	non-mandatory.  Attribute values may also be associated with the
	attributes in the Entity Template.  If supplied, the value may be
	either assigned with a default value that can be reconfigured later,
	or the value can be assigned with a static value that cannot be
	reconfigured later (see <xref target="Att-Expr" />).
    </t>

    <t>
	It is possible for a Template to provide values for all of its
	Attributes, so that no additional values are needed before the entity
	can made Active.  Any instantiation from a Template MUST have at least
	one Attribute in order to be a useful entity.
    </t>

    </section>        <!-- end section title="Templates and Attributes"  -->


    <section anchor="Att-Expr" title="Attribute-Expressions">
    <t>
	The syntax of the Attribute definition
	is formatted to make it clear, for every Attribute in the Entity
	Template, which of the six possibilities is specified, as follows:

	<list  style="hanging">
        <t hangText="'[Att-Name: ]'">
		Mandatory Attribute is defined, but template does not
		provide any configured value. </t>
        <t hangText="'[Att-Name: Att-Value]'">
		Mandatory Attribute is defined, and has a statically
		configured value. </t>
        <t hangText="'[Att-Name: ~ Att-Value]'">
		Mandatory Attribute is defined, and has a default value. </t>
        <t hangText="'[Att-Name]'">
		Non-mandatory Attribute may be included but template does not
		provide any configured value. </t>
        <t hangText="'[Att-Name := Att-Value]'">
		Non-mandatory Attribute may be included and has a statically
		configured value. </t>
        <t hangText="'[Att-Name ~ Att-Value]'">
		Non-mandatory Attribute may be included and has
		a default value. </t>
        </list>
	So, for example, a default value for a non-mandatory IPv4-Address
	attribute would be denoted by [IPv4-Address ~ 127.0.0.1]. </t>

    <t> 
	After an FPC Client identifies which additional Attributes have been
	configured to be included in an instantiated entity, those
	configured Attributes MUST NOT be deleted by the FPC Agent.
	Similarly, any statically configured value for an entity Attribute
	MUST NOT be changed by the FPC Agent.
	</t>

    <t> Whenever there is danger of confusion, the fully qualified Attribute
	name MUST be used when supplying needed Attribute Values for a
	structured Attribute.
	</t>

    </section>        <!-- end section title="Templates and Attributes"  -->

    <section anchor="typing" title="Attribute Value Types">

    <t> For situations in which the type of an attribute value is required,
	the following syntax is recommended.  To declare than an attribute has
	data type "foo", typecast the attribute name by using the parenthesized
	data type (foo).  So, for instance, [(float) Max-Latency-in-ms:]
	would indicate that the mandatory Attribute "Max-Latency-in-ms"
	requires to be configured with a floating point value before the
	instantiated entity could be used.
	Similarly, [(float) Max-Latency-in-ms: = 9.5]
	would statically configure a floating point value of 9.5 to the
	mandatory Attribute "Max-Latency-in-ms".
	</t>
    </section>        <!-- end section title="Attribute Value Types"  -->


    <section anchor="naming" title="Namespace and Format">
    <!--  CEP: This section seems impenetrable to me.  -->
    <!--  CEP: At minimum it should exhibit the kinds of namespaces.  -->
    <!--  CEP: We could delete the section without undue hardship.  -->
    <t>
        The identifiers and names in FPC models which reside in the same
        namespace must be unique.  That uniqueness must be maintained by all
	Clients, Agents and DPNs that support the tenant.  The tenant
	namespace uniqueness MUST be applied to all elements of the tenant
	model, i.e.  Topology, Policy and Mobility models. </t>
   
   <t>  When a Policy needs to be applied to Contexts in all tenants on an
        Agent, the Agent SHOULD define that policy to be visible from all the
        tenants.  In this case, the Agent assigns an unique identifier in the
        agent namespace and effectively creates a U-Key although only a G-Key
        is required. </t>
   
   <t>  The notation for identifiers can utilize any format with agreement
        between data-plane agent and client operators.  The formats include
        but are not limited to Globally Unique IDentifiers (GUIDs),
        Universally Unique IDentifiers (UUIDs), Fully Qualified Domain Names
        (FQDNs), Fully Qualified Path Names (FQPNs) and Uniform Resource
        Identifiers (URIs).  The FPC model does not limit the format, which
	could dictate the choice of FPC protocol.  Nevertheless, the
	identifiers which are used in a Mobility model should be considered
	to efficiently handle runtime parameters. </t>
   
    </section>        <!-- end section title="Namespace and Format"  -->

    <section anchor="att_appl" title="Configuring Attribute Values">

    <t> Attributes of Information Model components such as policy templates
	are configured with values as part of FPC configuration operations.
	There may be several such configuration operations before the 
	template instantiation is fully configured.
	</t>

    <t>
	When the FPC Client instantiates a Policy from a Template, the
	Policy-Status is "Initial".  When the FPC Client sends
	the policy to an FPC Agent for installation on a DPN, the Client often
	will configure appropriate attribute values for the installation,
	and accordingly changes the Policy-Status to "PartiallyConfigured"
	or "Configured".
	The FPC Agent will also configure Domain-specific policies and
	DPN-specific policies (if any) on the DPN.  When configured to provide
	particular services for mobile nodes, the FPC Agent will apply
	whatever service-specific policies are needed on the DPN.  When
	a mobile node attaches to the network data-plane within the
	topology under the jurisdiction of an FPC Agent, the Agent
	may apply policies and settings as appropriate for that mobile node.
	Finally, when the mobile node launches new flows, or quenches
	existing flows, the DPN Agent, on behalf of the FPC Client, applies
	or deactivates whatever policies and attribute values are appropriate
	for managing the flows of the mobile node.
	When a "Configured" policy is de-activated, Policy-Status is changed to
	be "Active".
	When an "Active" policy is activated, Policy-Status is changed to
	be "Configured".
    </t>

    <t> Attribute values in DPN-resident Policies may be configured
	by the FPC Agent as follows:
	<list style="hanging">
        <t hangText="Domain-Settings:">
		Values for Policy attributes that are required for every
		DPN in the domain. </t>
        <t hangText="DPN-Settings:">
		Values for Policy attributes that are required for every
		policy configured on this DPN. </t>
        <t hangText="Service-Settings:">
		Values for Policy attributes that are required to carry out
		the intended Service of the Service Group. </t>
        <t hangText="MN-Settings:">
		Values for Policy attributes that are required for all
		traffic to/from a particular mobile node. </t>
        <t hangText="Flow-Settings:">
		Values for Policy attributes that are required for traffic
		belonging to a particular set of flows on the mobile node. </t>
	</list>
	Any of these configuration steps may also supply updated values for
	existing default attribute values that may have been previously
	configured on the DPN-resident policy.
    </t>
    </section>        <!-- end section title="Attribute Application"  -->

    <section anchor="InfoModel"
		title="Information Model Components">

    <section anchor="srv-group" title="Service-Group">

    <t> A Service-Group is collection of DPN interfaces serving some data-plane
        purpose. Each Group contains a list of DPNs (referenced by DPN-Key) and
	selected interfaces (referenced by Interface-Key). The Interfaces are
	listed explicitly (rather than referred implicitly by its specific
        DPN) so that every Interface of a DPN is not required to be part
        of the Group.</t>

    <t> <figure anchor="fig-srv-group" title="Service Group">
            <artwork align="center"><![CDATA[
 |
 +-[Service-Group] <G-Key>, <Name> (O) <Set>
 |           +-[Extensible: = FALSE]
 |           +-[DPN-Key]
 |           +-[Role] <U-Key>
 |           +-[Referenced-Interface] <Set>
 |           |           +-[Interface-Key] <L-Key>
 |           |           +-[Peer-Service-Group-Key] <Set> (O)
       ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>

    <t> Each Service-Group contains the following information:
    <list style="hanging">
    <t hangText="Service-Group (Key):"> A unique ID of the Service-Group</t>
    <t hangText="Service-Group (Name):"> a human-readable display string</t>
    <t hangText="Role: ">
        the role (MAG, LMA, PGW, AMF etc.) of the device hosting the
        interfaces of the DPN Group.</t>
    <t hangText="Referenced-Interface: [Set]"> The Interfaces and
	peer Service-Groups associated with them.  Each entry contains
        <list style="hanging">
        <t hangText="Interface-Key: ">
            a key that is used together with the 
            Role, to create a key that is referred to be the interface
            definition of DPNs</t>
        <t hangText="Peer-Service-Group-Key: ">
            Enables location of the peer Service Group for this
	    Interface.</t>
        </list></t>
    </list></t>
    </section> <!-- End section "Service Group" -->
 
    <section anchor="entity-cfg" title="Entity Configuration Blocks">

    <t> As described in
	<xref target="att_appl" />, a Policy Template may be configured
	in several stages by configuring default or missing values for
	Attributes that do not already have statically configured values.
	A Policy-Configuration is the combination of a Policy-Key (to identify
	the Policy Template defining the Attributes) and the currently
	configured Attribute Values to be applied to the Policy Template.

	More generally, an Entity-Configuration can be defined for any
	configurable Indexed Set to be the combination of the Entity-Key
	along with a set of Attribute-Expressions that supply configuration
	information for the entity's Attributes.  <xref target="fig-ent-cfg" />
	shows a schematic representation for such Entity Configuration Blocks.
	<figure anchor="fig-ent-cfg" title="Entity Configuration Block">
            <artwork align="center"><![CDATA[
     [Entity Configuration Block]
     |       +-[Entity-Key] (M)
     |       +-[Attribute-Expression] <Set> (M)
       ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>

    <t> This document makes use of the following kinds of Entity
	Configuration Blocks:
    <list>
    <t> Domain-Policy-Configuration </t>
    <t> DPN-Policy-Configuration </t>
    <t> Descriptor-Configuration </t>
    <t> Action-Configuration </t>
    <t> MN-Policy-Configuration </t>
    <t> Flow-Policy-Configuration </t>
    </list></t>
    </section> <!-- End section "Entity Configuration Blocks" -->
 
    <section anchor="dpn-type" title="DPN-Type">

    <t> DPN-Type is the collection of all possible types of DPN interfaces
	defined for DPNs in the network.  The interfaces are grouped according
	to their Role (e.g. LMA, MAG, PGW, AMF, etc.)  Within a group,
	DPN interfaces may have additional properties that are more specific,
	as determined by a list of features and (optionally) settings
        relevant to DPN selection. This information is used when searching
        for resources in a network to carry out required operations on
	data-plane traffic.</t>
    
    <t> <figure anchor="fig-dpn-type" title="DPN Type">
            <artwork align="center"><![CDATA[
      |
      +-[DPN-Type] <Set>
      |     +-[Extensible: = FALSE]
      |     +-[Role] <U-Key>, <Name> (O)
      |     +-[Service-Group-Key] <Set>
      |     +-[Interface] <Set>
      |     |       +-[Interface-Key] <L-Key>, <Name> (O)
      |     |       +-[DPN-Key]
      |     |       +-[Protocol] <Set> 
      |     |       +-[Features] <Set> (O) 
      |     |       +-[Settings] <Set> (O)

      ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>

    <t> Each DPN-Type entry contains the following information:
    <list style="hanging">
    <t hangText="Service-Group-Key: "> Keys enabling reference to the
	Service-Groups that are to be supported by this DPN-Type. </t>
    <t hangText="Interface: ">
	A set of interfaces possible for the group defined by the Role.
        Each interface carries the following information:
        <list>
        <t> Interface-Key: a key that is used to locate the interface
	    definition.</t>
        <t hangText="Role: ">
            the roles (MAG, LMA, PGW, AMF, etc.) of the interface. </t>
        <t hangText="DPN-Key: "> The DPN key of the associated interface.</t>
        <t> Protocol: set of protocols supported by this interface
	    (e.g., PMIP, S5-GTP, S5-PMIP etc.). </t>
        <t> Features (optional): a set of static features which further
	    determine the suitability of the interface to the desired
	    operation for which selection is underway. </t>
        <t> Settings (optional): configurable settings that 
	    further determine the suitability of an interface for the specific
	    request.  For example: SequenceNumber=ON/OFF. </t>
        </list></t>
     </list></t>

     <t> The Role uniquely identifies the kind of interfaces that may be
	 available for DPNs of the specific type.</t>
    </section> <!-- End section DPN Type-->


    </section>        <!-- end section "Information Model Components" -->

    <section anchor="topology" title="Topology Information Model">
    <t>
	The Topology structure specifies DPNs and the communication paths
	between them. A network management system can use the Topology to
	select the most appropriate DPN resources for handling specific
	session flows. </t>

    <t> The Topology structure is illustrated in
	<xref target="fig-topology"></xref>
	(for definitions see <xref target="terminology"></xref>):

	<figure anchor="fig-topology"
	    title="Topology Structure">

            <artwork align="center"><![CDATA[
        |
        +-[Topology Information Model]
        |          +-[Extensible: = FALSE]
        |          +-[DPN] <Set>
        |          +-[Domain] <Set>
    ]]></artwork>
            <postamble></postamble>
       </figure>
    </t>
    </section>		<!-- end section Topology Information Model -->

    <section anchor="domain" title="Domain Information Model">
        <t> A Domain represents a group of heterogeneous Topology resources
	    typically sharing a common administrative authority.
	    Other models, outside of the scope of this specification, provide
	    the details for the Domain. </t>
<!--  CEP: Debatable about multiple Topologies per
          Domain, unless we drag multi-tenancy into the discussion.  -->

        <t> <figure anchor="fig-domain" title="Domain Information Model">
            <artwork align="center"><![CDATA[
 |
 +-[Domain] <G-Key>, <Name> (O) <Set>
 |       +-[Domain-Policy-Configuration] (O) <Set>
 |
       ]]></artwork>
          </figure>
        </t>
        <t> Each Domain entry contains the following information:
        <list style="hanging">
        <t hangText="Domain (Key):"> Identifies and enables reference to
	    the Domain </t>
        <t hangText="Domain (Name):"> A human-readable display string naming
	    the Domain </t>
        </list></t>

    </section>		<!-- End section Domain Information Model-->

    <section anchor="dpn" title="DPN Information Model">
    <t>
	A DPN-Set contains some or all of the DPNs in the tenant's network.
	Some of the DPNs in the Set may be identical in functionality
	and only differ by their Key. </t>

<!--  CEP: In this structure, DPN-Type does not seem to be needed.  Its
      	   subattributes are promoted to be DPN attributes.  -->
    <t> <figure anchor="fig-dpn-structure" title="DPN Information Model">
            <artwork align="center"><![CDATA[
      |
      +-[DPN] <G-Key>, <Name> (O) <Set>
      |     +-[Extensible: = FALSE]
      |     +-[Interface] <L-Key> <Set>
      |     |      +-[Role] <U-Key>
      |     |      +-[Settings] (O)
      |     +-[Domain-Key]
      |     +-[Service-Group-Key] <Set> (O)
      |     +-[DPN-Policy-Configuration] <List> (M)
      |     +-[DPN-Resource-Mapping-Reference] (O)
    ]]></artwork>
<!--  CEP: TBD: should Protocol be re-inserted, or is Interface enough?
      		Pro: people know what a protocol is.
		Con: The Interface might define the protocol.  -->
            <postamble></postamble>
       </figure>
    </t>

    <t> Each DPN entry contains the following information:
    <list style="hanging">
    <t hangText="DPN-Key:"> A unique Identifier of the DPN </t>
    <t hangText="DPN-Name:"> A human-readable display string </t>

    <t hangText="Domain-Key:"> A Key providing access to the Domain
	information about the Domain in which the DPN resides. </t>
    <t hangText="Interface-Set:"> The Interface-Set references all
	interfaces (through which data packets are received and
	transmitted) available on the DPN.   Each Interface makes use of
	attribute values that are specific to that interface, for
	example, the MTU size.  These do not affect the DPN selection
	of active or enabled interfaces. Interfaces contain the following
        informaiton:
        <list>
            <t hangText="Role: ">
                the role (MAG, LMA, PGW, AMF, etc.) of the DPN. </t>
            <t> Settings (optional): configurable settings that
                further determine the suitability of an interface for the specific
                request.  For example: SequenceNumber=ON/OFF. </t>
        </list></t>
    <t hangText="Service-Group-Set:"> The Service-Group-Set references
	all of the Service-Groups which have been configured using
	Interfaces hosted on this DPN.  The purpose of a Service-Group
	is not to describe each interface of each DPN, but rather to
	indicate interface types for use during the DPN
	selection process, when a DPN with specific interface capabilities
	is required.  </t>
    <t hangText="DPN-Policy-Configuration:"> A list of Policies that have been
	configured on this DPN.  Some may have values for all attributes,
	and some may require further configuration.
	Each Policy-Configuration has a key to enable reference to its
	Policy-Template.  Each Policy-Configuration also has been configured
	to supply missing and non-default values to the desired Attributes
	defined within the Policy-Template. </t>
    <t hangText="DPN-Resident-Policy.Policy-Configuration:"> A Policy Key
	providing access to Template from which the DPN-Resident-Policy was
	instantiated, as well as an Attribute for this instantiation from the
	Policy-Template and also specifies whether the Attribute-Expression
	for default values and statically configured values, according to the
	    syntax specified in <xref target="templates"/>. </t>
    <t hangText="DPN-Resource-Mapping-Reference (O):"> A reference to the
	underlying implementation, e.g. physical node, software module,
	etc.  that supports this DPN.  This value MUST be non-empty
	prior to Dynamic-Policies being installed upon the DPN.
	Further specification of this attribute is out of scope for
	this document. </t>
    </list></t>
    </section>	<!-- End section DPN Information Model -->

    <section anchor="policy-InfoModel" title="Policy Information Model">
    <t>
        The Policy Information Model defines and identifies Rules for
        enforcement at DPNs.  A Policy is basically a set of Rules that are
	to be applied to each incoming or outgoing packet at a DPN interface.
	Rules comprise Descriptors and a set of Actions.  The Descriptors, when
	evaluated, determine whether or not a set of Actions will be performed
	on the packet.  The Policy structure is independent of a policy
        context, whether it's an administratively configurable policy which
        applies to all data flows, or a defined aggregate of flows, or to a
	mobility context-related policy, which is associated with a mobility
	session and may apply only to data traffic of an associated mobile
	node when that node is being registered. </t>
<!--  CEP: Does this actually mean "during the registration process"?  -->
<!--  CEP: The last sentence is far too long.  -->

    <t>
        In addition to the Policy structure, the Information Model (per
        <xref target="mobility-InfoModel"/>) defines Mobility-Context.
        Each Mobility-Context may be configured with appropriate Attribute
	values, for example depending on the identity of a mobile node. </t> 

    <t>
        Traffic descriptions are defined in Descriptors, and treatments
	are defined separately in Actions.  A Rule-Set binds Descriptors
	and associated Actions by reference, using Descriptor-Key and
	Action-Key.  A Rule-Set is bound to a policy in the Policy-Set
	(using Policy-Key), and the Policy references the Rule definitions
	(using Rule-Key). </t>

 <t> <figure anchor="fig-policy-InfoModel" title="Policy Information Model">
            <artwork align="center"><![CDATA[
      |
      +-[Policy Information Model]
      |      +-[Extensible:]
      |      +-[Policy-Template] <G-Key> (M) <Set>
      |      |       +-[Policy-Status]
      |      |       +-[Rule-Template-Key] <List> (M)
      |      |       |       +-[Precedence] (M)
      |      +-[Rule-Template] <L-Key> (M) <Set>
      |      |       +-[Descriptor-Match-Type] (M)
      |      |       +-[Descriptor-Configuration] <Set> (M)
      |      |       |       +-[Direction] (O)
      |      |       +-[Action-Configuration] <Set> (M)
      |      |       |       +-[Action-Order] (M)
      |      +-[Descriptor-Template] <L-Key> (M) <Set>
      |      |       +-[Descriptor-Type] (O)
      |      |       +-[Attribute-Expression] <Set> (M)
      |      +-[Action-Template] <L-Key> (M) <Set>
      |              +-[Action-Type] (O)
      |      |       +-[Attribute-Expression] <Set> (M)
      ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>

    <t> The Policy structure defines Policy-Set, Rule-Set, Descriptor-Set,
	and Action-Set, as follows:

    <list style="hanging">
    <t hangText="Policy-Template: [Set]">
        A set of Policy structures, indexed by Policy-Key, each of which
	is determined by a list of Rules referenced by their Rule-Key.
	Each Policy structure contains the following:
        <list>
        <t hangText="Policy-Key: "> Identifies and enables reference
	    to this Policy definition. </t>
        <t hangText="Policy-Status: "> Either Initial, PartiallyConfigured,
		Configured, or Active.  Default value is Initial. </t>
        <t hangText="Rule-Template-Key: "> Enables reference to a Rule
	    template definition. </t>
        <t hangText="Rule-Precedence: ">
            For each Rule identified by a Rule-Template-Key in the Policy,
	    specifies the order in which that Rule must be applied.  The lower
	    the numerical value of Precedence, the higher the rule precedence
	    Rules with equal precedence MAY be executed in parallel if
	    supported by the Resource Management Function.  If this value is
	    absent, the rules SHOULD be applied in the order in which they
	    appear in the Policy. </t>
        </list></t>

    <t hangText="Rule-Template-Set: ">
        A set of Rule template definitions indexed by Rule-Key.  Each Rule
	is defined by a list of Descriptors (located by Descriptor-Key)
	and a list of Actions (located by Action-Key) as follows:
        <list>
        <t hangText="Rule-Template-Key: "> Identifies and enables reference
	    to this Rule definition.</t>
        <t hangText="Descriptor-Match-Type"> Indicates whether the
	    evaluation of the Rule proceeds by using conditional-AND,
	    or conditional-OR, on the list of Descriptors.</t>
        <t hangText="Descriptor-Configuration: "> References a Descriptor
	    template definition, along with an expression which names the
	    Attributes for this instantiation from the Descriptor-Template and
	    also specifies whether each Attribute of the Descriptor has a
	    default value or a statically configured value, according to the
	    syntax specified in <xref target="templates"/>. </t>
        <t hangText="Direction: ">
            Indicates if a rule applies to uplink traffic, to downlink
            traffic, or to both uplink and downlink traffic.  Applying
            a rule to both uplink and downlink traffic, in case of symmetric
            rules, eliminates the requirement for a separate entry for each
	    direction.
            When not present, the direction is implied by the Descriptor's
            values.</t>
        <t hangText="Action-Configuration: "> References an Action
	    template definition, along with an expression which names the
	    Attributes for this instantiation from the Action-Template and
	    also specifies whether each Attribute of the Action has a
	    default value or a statically configured value, according to the
	    syntax specified in <xref target="templates"/>. </t>
        <t hangText="Action-Order: ">
            Defines the order in which actions are executed when
            the associated traffic descriptor selects the packet.</t>
        </list></t>

    <t hangText="Descriptor-Template-Set: ">
        A set of traffic Descriptors, each of which can be evaluated
	on the incoming or outgoing packet, returning a TRUE or
	FALSE value, defined as follows:
        <list>
        <t hangText="Descriptor-Template-Key: "> Identifies and enables
	    reference to this descriptor template definition. </t>
	<t hangText="Attribute-Expression:"> An expression which defines an
	    Attribute in the Descriptor-Template and also specifies whether
	    the Template also defines a default value or a statically
	    configured value for the Attribute of the Descriptor has,
	    according to the
	    syntax specified in <xref target="templates"/>. </t>
        <t hangText="Descriptor-Type: ">
            Identifies the type of descriptor, e.g. an IPv6 traffic selector
            per <xref target="RFC6088"></xref>.</t>
        </list></t>

    <t hangText="Action-Template-Set: "> A set of actions defined as follows:
    <list>
        <t hangText="Action-Template-Key: "> Identifies and enables
	    reference to this action template definition. </t>
	<t hangText="Attribute-Expression:"> An expression which defines an
	    Attribute in the Action-Template and also specifies whether
	    the Template also defines a default value or a statically
	    configured value for the Attribute of the Action has,
	    according to the
	    syntax specified in <xref target="templates"/>. </t>
        <t hangText="Action-Type: ">
            Identifies the type of an action for unambiguous
	    interpretation of an Action-Value entry.</t>
        </list></t>
    </list></t>
    </section>        <!-- end section "Policy Information Model" -->

    <section anchor="mobility-InfoModel"
			title="Mobility-Context Information Model">

    <t> The Mobility-Context structure holds entries associated with a
        mobile node and its mobility sessions (flows). It is created on a
	DPN during the mobile node's registration to manage the mobile node's
	flows.  Flow information is added or deleted from the Mobility-Context
	as needed to support new flows or to deallocate resources for flows
	that are deactivated.  Descriptors are used to characterize the nature
	and resource requirement for each flow. </t>

    <t> Termination of a Mobility-Context implies termination of all flows
	represented in the Mobility-Context, e.g. after deregistration of a
	mobile node.  If any Child-Contexts are defined, they are also
	terminated.
	<figure anchor="fig-context" title="Mobility-Context Information Model">
            <artwork align="center"><![CDATA[
  
 +-[Mobility-Context] <G-Key> <Set>
 |            +-[Extensible ~ FALSE]
 |            +-[Delegating-IP-Prefix:] <Set>
 |            +-[Parent-Context]
 |            +-[Child-Context] <Set>
 |            +-[Mobile-Node]
 |            |       +-[IP-Address] <Set>
 |            |       +-[MN-Policy-Configuration] <Set>
 |            +-[Domain-Key]
 |            |       +-[Domain-Policy-Configuration] <Set>
 |            +-[DPN-Key] <Set>
 |            |       +-[Role]
 |            |       +-[DPN-Policy-Configuration] <Set>
 |            |       +-[ServiceDataFlow]
 |            |       |       +-[Service-Group-Key]
 |            |       |       +-[Interface-Key] <Set>
 |            |       |       +-[Flow-Policy-Configuration] <Set>
 |            |       |       |       +-[Direction]

    ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>

  <t> The Mobility-Context Substructure holds the following entries:
    <list style="hanging">
    <t hangText="Mobility-Context-Key: "> Identifies a Mobility-Context </t>
    <t hangText="Extensible:"> Determines whether or not entities
	instantiated from this Template can be extended with new
	non-mandatory Attributes not defined here.  Default value is FALSE.</t>
    <t hangText="Parent-Context: "> If present, a Mobility Context from which
	the Attributes and Attribute Values of this Mobility Context are
	inherited. </t>
    <t hangText="Child-Context: "> A set of Mobility Contexts which inherit
	the Attributes and Attribute Values of this Mobility Context. </t>
    <t hangText="Mobile-Node: "> Attributes specific to the Mobile Node. </t>
    <t hangText="Domain-Key: "> Enables access to a Domain instance. </t>
    <t hangText="Domain-Policy-Configuration: "> For each Domain-Policy in the
	set, a key and relevant information for the Policy Attributes. </t>
    <t hangText="DPN-Key: "> Enables access to a DPN instance. </t>
    <t hangText="Role: "> Role this DPN fulfills in the Mobility-Context.</t>
    <t hangText="DPN-Policy-Configuration: "> For each DPN-Policy in the set, a
	key and relevant information for the Policy Attributes. </t>
    <t hangText="ServiceDataFlow: "> Characterizes a traffic flow that has been
	configured (and provided resources) on the DPN to support data-plane
	traffic to and from the mobile device.
	<list>
	<t hangText="Service-Group-Key: "> Enables access to a
	    Service-Group instance. </t>
	<t hangText="Interface-Key: ">
            Assigns the selected interface of the DPN.</t>
	<t hangText="Flow-Policy-Configuration: "> For each Flow-Policy in the
	    set, a key and relevant information for the Policy Attributes.
	    <list>
	    <t hangText="Direction: ">
        	Indicates if a rule applies to uplink or downlink traffic, or
		to both, uplink- and downlink traffic. Applying a rule to both,
		uplink- and downlink traffic, in case of symmetric rules, allows
		omitting a separate entry for each direction.  When not present
		the value is assumed to apply to both directions. </t>
	    </list></t>
	</list></t>

    </list></t>

    </section> <!-- End Mobility Context Information Model -->

    <section anchor="monitor_overview" title="Monitor Information Model">
    <t> Monitors provide a mechanism to produce reports when events
            occur. A Monitor will have a target that specifies what is to
            be watched. </t>
    <t> When a Monitor is specified, the configuration MUST be applicable
            to the attribute/entity monitored. For example, a Monitor using a
            Threshold configuration cannot be applied to a Context, because
            Contexts do not have thresholds. But  such a monitor could be
            applied to a numeric threshold property of a Context. </t>
    <t> 
        <figure anchor="fig-monitor"
                  title="Monitor Substructure">
            <artwork align="center"><![CDATA[
       |
       +-[Monitor] <List>
       |         +-[Extensible:]
       |         +-[Monitor-Key:] <U-Key>
       |         +-[Target:]
       |         +-[Binding-Information]
       |         +-[Deferrable]
       |         +-[Configuration]
              ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>

    <t> <list style="hanging">
        <t hangText="Monitor-Key:">
            Name of the Monitor. The Id format MUST conform to
            <xref target="naming"> </xref>.</t>
        <t hangText="Target:">
            Description of what is to be monitored. This can be a
            Dynamic Policy, an installed DPN Policy, or values of a
            Dynamic-Policy attribute. When the type is an attribute of
            Mobility-Context, the target name is a concatenation of the
            Context-Id and the relative path (separated by '/') to the
            attribute(s) to be monitored. Target must provide unambiguously
            identify the monitored attribute and the location (DPN).</t>
        <t hangText="Binding-Information:">
            Complements (ambigous) Target information to define the Monitor
            in an unambigous way.</t>
        <t hangText="Deferrable: ">
            Indicates that a monitoring report can be delayed up to a defined
            maximum delay for possible bundling with other reports. </t>
        <t hangText="Configuration:">
            Determined by the Monitor subtype. The recipient of a notification
            as monitor report is specified in the Configuration. Four
            reporting types are defined:
            <list style="symbols">
            <t> Periodic reporting specifies an interval by which a
                notification is sent.</t>
            <t> Event reporting specifies a list of event types that, if
                they occur and are related to the monitored attribute,
                will result in sending a notification.</t>
            <t> Scheduled reporting specifies the time (in seconds since
                Jan 1, 1970) when a notification for the monitor should be
                sent. Once this Monitor's notification is completed the
                Monitor is automatically de-registered.</t>
            <t> Threshold reporting specifies one or both of a low and high
                threshold. When these values are crossed a corresponding
                notification is sent.</t>
            </list> </t>
        </list></t>
    </section>        <!-- end section title="Monitor Information Model"  -->

</section>        <!-- end section title="Information Model"  -->

<section anchor="protocol" title="Protocol">
    <section anchor="semantics"
		title="Protocol Messages and Semantics">
    <t> Four Client to Agent messages are supported.</t>
    <texttable anchor="messages" title="Client to Agent Messages">
    <ttcol align="left"> Message</ttcol>
    <ttcol align="left"> Description</ttcol>

    <c>Configure</c>
    <c>A Configure message includes multiple edits to one or more information model
        entities. Edits are executed according to their Edit-Id in ascending order.
        The global status of the operation and the status of individual edits are
        returned. Partial failures, i.e. individual edit failures, are allowed.</c>

    <c>Register-Monitors</c>
    <c>Register monitors at an Agent. The message includes the Monitor information
        as specified in <xref target="monitor_overview"/>.</c>

    <c>Deregister-Monitors</c>
    <c>Deregister monitors from an Agent. An optional boolean, Send-Data, indicates
        if a successful deregistration triggers a Notify with final data from the
        Agent for the corresponding Monitor.</c>

    <c>Probe</c>
    <c>Probe the status of registered monitors. This triggers a Notify with current
        data from the Agent for the corresponding Monitors. </c>
    </texttable>

    <t> Each message contains a header with the following information:
        <list hangIndent="4" style="hanging">
            <t hangText="Client Identifier:">An Identifier used by the Agent to
                associate specific configuration characteristics, e.g. options
                used by the Client when communicating with the Agent, the association
                of the Client and tenant in the information model as well as tracking
                operations and notifications.</t>
            <t hangText="Delay:">An optional time (in ms) to delay the execution
                of the operation on the DPN once it is received by the Agent.</t>
            <t hangText="Operation Identifier:">A unique identifier created by the Client
                to correlate responses and notifications</t>
        </list>
    </t>

    <t> An Agent will respond with an ERROR, indicating one or more Errors have occured,
        or an OK.</t>
    
    <t> For Configure messages, an OK
        status for an edit MAY include subsquent edits in the response that were
        required to properly execute the edit.  It MAY also indicate that the
        final status and any final edits required to fulfill the request will be sent
        via a Configure result notification from the Agent to the Client, see
        <xref target="asyncnotification"/>.</t>
    
    <t> If errors occur, they MUST be returned as a list in responses and each
        Error contains the following information:
        <list hangIndent="4" style="hanging">
            <t hangText="Error-type:"> The specific error type. Values are TRANSPORT (0), RPC (1),
                PROTOCOL(2) or APPLICATION (3).</t>
            <t hangText="Error-Tag:">
                An error tag.</t>
            <t hangText="Error-App-Tag:">
                Application specific error tag.</t>
            <t hangText="Error-Message:">
                A message describing the error.</t>
            <t hangText="Error-Info:">
                Any data required for the response.</t>
        </list>
    </t>
    <t>
        <figure anchor="fig-global-errors"
            title="Error Information Model">
            <artwork align="center"><![CDATA[
                |
                +-[Errors] <List>
                |         +-[(Enumeration) Error-Type ]
                |         +-[(String) Error-Tag ]
                |         +-[(String) Error-App-Tag ] (O)
                |         +-[(String) Error-Message ] (O)
                |         +-[Error-Info] (O)
            ]]></artwork>
            <postamble></postamble>
        </figure>
    </t>
    
    <t> Two Agent to Client notifications are supported.</t>
      <texttable anchor="notifications"
            title="Agent to Client Messages (notifications)">
      <ttcol align="left"> Message</ttcol>
      <ttcol align="left"> Description</ttcol>

      <c>Configure-Result-Notification</c>
      <c>An asynchronous notification from Agent to Client based upon a
         previous Configure request.</c>

      <c>Notify</c>
      <c>An asynchronous notification from Agent to Client based upon a
         registered Monitor's configuration, a Monitor deregistration or
         Probe.</c>
      </texttable>
    
        <section anchor="conf-processing" title="Configure Message">
            <t>The Configure message follows edit formats proposed by <xref target="RFC8072"/> with
            more fields in each edit, an extra operation (clone) and a different response format.</t>
                
            <section anchor="editoperations" title="Edit Operation Types">
                <texttable anchor="editoperationtypes"
                    title="Configure Edit Operations">
                    <ttcol align="left"> Operation</ttcol>
                    <ttcol align="left"> Description</ttcol>
                    
                    <c>create</c>
                    <c>Creates a new data resource or Entity.  If the resource exists
                    an error is returned.</c>
                    
                    <c>delete</c>
                    <c>Deletes a resource.  If it does not exist an error is returned.</c>
                    
                    <c>insert</c>
                    <c>Inserts data in a list or user ordered list.</c>
                    
                    <c>merge</c>
                    <c>Merges the edit value with the target data resource; the resource
                        is created if it does not exist.</c>
                    
                    <c>move</c>
                    <c>Moves the target data resource.</c>
                    
                    <c>replace</c>
                    <c>Replace the target data resource with the edit value.</c>
                    
                    <c>remove</c>
                    <c>Removes a data resource if it already exists.</c>
                    
                    <c>clone</c>
                    <c>Clones a data resource and places the copy at the new location.
                    If the resource does not exist an error is returned.</c>
                </texttable>
            </section>        <!-- end section "Edit Operations" -->
                 
                 
            <section anchor="editoperationspec" title="Edit Operation">
                 <t> Each Configure includes one or more edits.  These edits include
                     the following information:
                     <list hangIndent="4" style="hanging">
                         <t hangText="Edit-Id:">
                             uniquely specifies the identifier of the edit within the operation.</t>
                         <t hangText="Edit-Type:">
                             specifies the type of operation (see <xref target="editoperations"/>).</t>
                         <t hangText="Command-Set:">
                            The Command-Set is a technology-specific bitset that allows for a
                            single entity to be sent in an edit with multiple requested, technology specific
                            sub-transactions to be completed. It can also provide clarity for a
                            request.  For example, a Mobility-Context could have the Home
                            Network Prefix absent but it is unclear if the Client would like
                            the address to be assigned by the Agent or if this is an error.
                            Rather than creating a specific command for assigning the IP a bit
                            position in a Command-Set can be used to indicate Agent based IP assignment requests.</t>
                        <t hangText="Reference-Scope:">
                            If supported, specifies the Reference Scope
                            (see <xref target="refscope"/>)</t>
                        <t hangText="Target:">
                            Specifies the Target node (Data node path or FPC Identity) for
                            the edit operation. This MAY be a resource, e.g. Mobility-Context,
                            Descriptor-Template, etc., or a data node within a resource as
                            specified by its path.</t>
                        <t hangText="Point:">
                            The absolute URL path for the data node that is being
                            used as the insertion point, clone point or move point for the
                            target of this 'edit' entry.</t>
                        <t hangText="Where:">
                            Identifies where a data resource will be inserted, cloned to
                            or moved.  Only allowed these for lists and lists of data nodes that are
                            'ordered-by user'. The values are 'before', 'after', 'first', 'last' (default
                            value).
                        </t>
                        <t hangText="Value">
                            The value used for this edit operation.
                        </t>
                    </list>
                </t>
<t>
    <figure anchor="fig-configure"
        title="Configure Request">
        <artwork align="center"><![CDATA[
|
+-[Configure]
|         +-[Client-Id:]
|         +-[(Unsigned 32) Execution-Delay]
|         +-[Operation-Id:]
|         +-[Edits:] <List>
|         |    +-[Edit-Id:] <L-Key>
|         |    +-[(Enumeration) Edit-Type:]
|         |    +-[(BitSet) Command-Set]
|         |    +-[(Enumeration) Reference-Scope]
|         |    +-[Target:]
|         |    +-[Point]
|         |    +-[(Enumeration) Where]
|         |    +-[Value]
        ]]></artwork>
        <postamble></postamble>
     </figure>
</t>

    <t> Edits sent to the Agent provided in an operation SHOULD be sent in
        the following order to avoid errors:
        <list style="numbers">
            <t> Action Templates</t>
            <t> Descriptor Templates</t>
            <t> Rule Templates</t>
            <t> Policy Templates</t>
            <t> DPN Templates</t>
            <t> Mobility Contexts</t>
        </list></t>
            </section>        <!-- end section "Edit Operations" -->
        
        <section anchor="refscope" title="Reference Scope">
        <t> The Reference Scope is an optional feature that provides the
	    scope of references used in a configuration command. These scopes
        are defined as:
            <list style="symbols">
            <t> none - All entities have no references to other entities.</t>
            <t> edit - All references are contained in the edit body,
	        i.e. only intra-operation references exist.</t>
            <t> operation - All references exist in the operation
                (inter-edit/intra-operation).</t>
            <t> storage - One or more references exist outside of the operation.
                A lookup to cache / storage is required.</t>
            <t> unknown - the location of the references are unknown. This is
                treated as a 'storage' type.</t>
            </list></t>
        <t> An Agent that only accepts 'edit' or 'operation' reference scope
	    messages is referred to as 'stateless' as it has no direct memory
	    of references outside messages themselves. This permits low memory
	    footprint Agents/DPNs.  Even when an Agent supports all message types
	    an 'edit' or 'operation' scoped message can be processed quickly by the
	    Agent/DPN as it does not require storage access. </t>
        <t>
            <xref target="fig_cache_ex"/> shows an example
            containment hierarchy provided for all caches.</t>
        <t>
            <figure anchor="fig_cache_ex"
                title="Exemple Hierarchical Cache">
                <artwork align="center"><![CDATA[
             +---------------+
             | Global Cache  |
             |  (storage)    |
             +------+--------+
                    |
                    +----------------+
                    |                |
    +------+-----------+      +------+-----------+
    | Operation Cache  |      | Operation Cache  |
    |   (operation)    | .... |   (operation)    |
    +------+-----------+      +--------+---------+
           |                           |
       +---+-----------+               |
       |               |               |
+------+------+ +------+------+ +------+------+
| Edit Cache  | | Edit Cache  | | Edit Cache  |
|   (edit)    | |   (edit)    | |   (edit)    |
+-------------+ +-------------+ +-------------+
                    
                    (no cache)
                ]]></artwork>
                <postamble></postamble>
            </figure>
        </t>

        </section>        <!-- end section "Reference Scope" -->
        
        <section anchor="response" title="Operation Response">
            <section anchor="immediateresp" title="Immediate Response">
            <t> The Response MUST include the following:
            <list>
                <t>Operation Identifier of the corresponding request.</t>
                <t>Global Status for the operation (see <xref target="messages"/>).</t>
                <t>A list of Edit results (described below).</t>
            </list>
            </t>
            <t>An edit response, Edit-Status, is comprised of the following:
            <list>
                <t>Edit-Id: Edit Indentifier.</t>
                <t>Edit-Status: OK.</t>
                <t>When the Edit-Status is OK the following values MAY be present
                    <list>
                        <t>Notify-Follows - A boolean indicator that the edit has
                            been accepted by the Agent but further processing is required.
                            A Configure-Result-Notification will be sent once the processing has
                            succeeded or failed.</t>
                        <t>Subsequent-Edits:  This is a list of Edits that were required to fulfill
                            the request. It follows the edit request semantics (see <xref target="editoperationspec"/>).</t>
                    </list>
                </t>
                <t>Errors: When the Edit-Status is ERROR the following values are present.
                    See <xref target="messages"/> for details.</t>
            </list>
            </t>
            <t>The response will minimally contain an Edit-Status implying 'OK' or a
                list of errors.</t>
            
<t>
    <figure anchor="configure-result"
        title="Configure Operation Response">
        <artwork align="center"><![CDATA[
|
+-[Operation-Id:]
+-[Result-Status:]
+-[Errors] <List>
|         +-[(Enumeration) Error-Type:]
|         +-[(String) Error-Tag:]
|         +-[(String) Error-App-Tag]
|         +-[(String) Error-Message]
|         +-[Error-Info]
+-[Edit-Status]
|         +-[Edit-Id:]
|         +-[Edit-Status: ~ OK]
|         +-[Notify-Follows]
|         +-[Subsequent-Edits] <List>
|         |    +-[Edit-Id:] <L-Key>
|         |    +-[(Enumeration) Edit-Type:]
|         |    +-[Target:]
|         |    +-[Point]
|         |    +-[(Enumeration) Where]
|         |    +-[Value]
|         +-[Errors] <List>
|         |         +-[(Enumeration) Error-Type:]
|         |         +-[(String) Error-Tag:]
|         |         +-[(String) Error-App-Tag]
|         |         +-[(String) Error-Message]
|         |         +-[Error-Info]
|
        ]]></artwork>
        <postamble></postamble>
    </figure>
</t>
            </section>        <!-- end section "Immediate Response" -->
            <section anchor="asyncnotification"
		title="Asynchronous Notification">
            <t> A Configure-Result-Notification occurs after the Agent has completed
                processing related to a Configure request. It is an asynchronous
                communication from the Agent to the Client.</t>
            <t>It is identical to the immediate response with the exception that
                the Notify-Follows, if present, MUST be false.  As this value
                is unnecessary it SHOULD be ommitted.
            </t>
            </section>        <!-- end section "Asynchronous Notification" -->
          </section>        <!-- end section "Operation Response" -->
        </section>

        <section anchor="monitor_descr" title="Monitor Messages">
            <t> An Agent may reject a registration if it or the DPN has
                insufficient resources.</t>
            <t> An Agent or DPN MAY temporarily suspend monitoring if insufficient
                resources exist.  In such a case the Agent MUST notify the
                Client.</t>
            
            <t> When a monitor has a reporting configuration of SCHEDULED it
                is automatically de-registered after the last Notify occurs. </t>
            
            <t> If a SCHEDULED or PERIODIC configuration is provided during
                registration with the time related value (time or period
                respectively) of 0 a Notify is sent and the monitor is immediately
                de-registered. This method should, when a Monitor has not been
                installed, result in an immediate Notify sufficient for the
                Client's needs and lets the Agent realize the Client has no
                further need for the monitor to be registered. </t>
            
            <t> Probe messages are used by a Client to retrieve information
                about a previously installed monitor. The Probe message SHOULD
                identify one or more monitors by means of including the associated
                monitor identifier. An Agent receiving a Probe message sends the
                requested information in a single or multiple Notify messages.</t>
            
            <t> If the Monitor configuration associated with a Notify can be
                deferred, then the Notify MAY be bundled with other messages back
                to the Agent even if this results in a delay of the Notify. </t>
            
            <t> The Monitor messages use the following data:
                <list hangIndent="4" style="hanging">
                    <t hangText="Monitor-Key:">Monitor Key.</t>
                    <t hangText="Monitor:">A Monitor configuration (see <xref target="monitor_overview"/>).</t>
                    <t hangText="Send-Data:">An indicator that specifies that the final value MUST be sent
                        as a notification from the Agent.</t>
                </list>
            </t>
<t>
<figure anchor="fig-monitor-messages"
    title="Monitor Messages">
    <artwork align="center"><![CDATA[
   |
   +-[Register-Monitors]
   |         +-[Client-Id:]
   |         +-[(Unsigned 32) Execution-Delay]
   |         +-[Operation-Id:]
   |         +-[Monitors] <List>
   |         |         +-[Extensible:]
   |         |         +-[Monitor-Key:] <U-Key>
   |         |         +-[Target:]
   |         |         +-[Binding-Information]
   |         |         +-[Deferrable]
   |         |         +-[Configuration:]
   
   |
   +-[Deregister-Monitors]
   |         +-[Client-Id:]
   |         +-[(Unsigned 32) Execution-Delay]
   |         +-[Operation-Id:]
   |         +-[Monitors:] <List>
   |         |         +-[Monitor-Key:] <U-Key>
   |         |         +-[(Boolean) Send-Data ~ False]
   
   |
   +-[Deregister-Monitors]
   |         +-[Client-Id:]
   |         +-[(Unsigned 32) Execution-Delay]
   |         +-[Operation-Id:]
   |         +-[Monitor-Key:] <List>
   
    ]]></artwork>
    <postamble></postamble>
</figure>
</t>

        <section anchor="asyncmonitornotification"
			title="Asynchronous Notification">
        <t>
            A Monitor Report can be sent as part of de-registration, a trigger based
            upon a Monitor Configuration or a Probe.   A Report is comprised
            of the Monitor Key the report applies to, the Trigger for the report, a
            timestamp of when the report's' associated event occurs and
            data that is specific to the monitored value's type.</t>
        <t>Triggers include but are not limited to
            <list style="symbols">
                <t> Subscribed Event occurred</t>
                <t> Low Threshold Crossed</t>
                <t> High Threshold Crossed</t>
                <t> Periodic Report</t>
                <t> Scheduled Report</t>
                <t> Probe</t>
                <t> Deregistration Final Value</t>
                <t> Monitoring Suspended</t>
                <t> Monitoring Resumed</t>
                <t> DPN Availabile</t>
                <t> DPN Unavailable</t>
            </list>
        </t>
        <t>Multiple Reports are sent in a Notify message.  Each Notify is
            comprised of unique Notification Identifier from the Agent and
            timestamp indicating when the notification was created.</t>
        <t>
            <figure anchor="fig-notify-message"
                title="Monitor Messages">
                <artwork align="center"><![CDATA[
|
+-[ Notify ]
|         +-[(Unsigned 32) Notification-Identifier:]
|         +-[Timestamp:]
|         +-[Report:] <List>
|         |    +-[Trigger:]
|         |    +-[Monitor-Key:]
|         |    +-[Value]
                ]]></artwork>
                <postamble></postamble>
            </figure>
        </t>
        </section>
      </section>
    </section>

    <section anchor="protoperation" title="Protocol Operation">
        <t> Please note that JSON is used to represent the information in Figures
            in this section but any over the wire representation
            that accurately reflects the information model MAY be used.</t>
        <section anchor="simple" title="Simple RPC Operation">
        <t> An FPC Client and Agent MUST identify themselves using the Client
            Identifier and Agent Identifier respectively to ensure that for all
            transactions a recipient of an FPC message can unambiguously identify
            the sender of the FPC message.</t>

        <t> A Client MAY direct the Agent to enforce a rule in a particular
            DPN by including a DPN Key value in a  Mobility Context. Otherwise
            the Agent selects a suitable DPN to enforce one or more portions of
            a Mobility Context and notifies the Client about the selected DPN(s)
            using the DPN Identifier(s).</t>

        <t> All messages sent from a Client to an Agent MUST be acknowledged
            by the Agent. The response must include all edit status as well as
            subsequent edits, which indicates the result of processing the
            message, as part of the Configure response. In case the processing
            of the message results in a failure, the Agent sets the global status
            Error-Type and Error-Tag accordingly and MAY clear the entity, e.g.
            Context or Configurable-Policy, which caused the failure, in the
            response.</t>

        <t> If based upon Agent configuration or the processing of the request
            possibly taking a significant amount of time the Agent MAY respond
            with a Notify-Follows indication with optional Subsequent-Edit(s)
            containing the partially completed entity modifications. When a
            Notify-Follows indication is indicated, the Agent will, upon
            completion or failure of the operation, respond with an asynchronous
            Configuration-Result-Notification to the Client.</t>

        <t> A Client MAY add a property to a Mobilty-Context without providing all
            required details of the attribute's value. In such case the Agent 
            SHOULD determine the missing details and provide the completed 
            property description, via Subsequent-Edit(s) back to the Client.
            If the processing will take too long or based upon Agent configuration,
            the Agent MAY respond with an OK for the Edit that indicates a
            Notify-Follows and also includes Subsequent-Edit(s) containing the
            partially completed entity edits.</t>

        <t> In case the Agent cannot determine the missing value of an 
            attribute's value per the Client's request, it leaves the 
            attribute's value cleared ]and sets the Edit Result to Error
            and provides an Error-Type and Error-Tag. As example, the
            Control-Plane needs to setup a tunnel configuration in the 
            Data-Plane but has to rely on the Agent to determine the tunnel 
            endpoint which is associated with the DPN that supports the 
            Mobility-Context. The Client adds the tunnel property attribute to the
            FPC message and clears the value of the attribute (e.g. IP address 
            of the local tunnel endpoint). The Agent determines the tunnel 
            endpoint and includes the completed tunnel property in its 
            response to the Client in a Subsequent-Edit entry.</t>

        <t> <xref target="fig_msc_example"></xref> illustrates an exemplary 
            session life-cycle based on Proxy Mobile IPv6 registration via 
            MAG Control-Plane function 1 (MAG-C1) and handover to MAG 
            Control-Plane function 2 (MAG-C2).  Edge DPN1 represents the 
            Proxy CoA after attachment, whereas Edge DPN2 serves as Proxy 
            CoA after handover. As exemplary architecture, the FPC Agent and 
            the network control function are assumed to be co-located with 
            the Anchor-DPN, e.g. a Router.</t>
        
        <t> The Target of the second request uses the Mobility-Context by
            name.  Alternatively, the Target could have included the
            DPN-Key and Policy-Key to further reduce the amount of information
            exchnanged.  Setting the Target's value to the most specific node
            SHOULD be followed whenever practicle.</t>
        
        <t>
        <figure anchor="fig_msc_example"
          title="Example Message Sequence (focus on FPC reference point)">
        <artwork align="center"><![CDATA[
                                              +-------Router--------+
                        +-----------+         |+-------+ +---------+|
+------+ +------+     +-----+ FPC   |          | FPC   | |  Anchor |
|MAG-C1| |MAG-C2|     |LMA-C| Client|          | Agent | |   DPN   |
+------+ +------+     +-----+-------+          +-------+ +---------+
[MN attach]  |            |                          |           |
   |-------------PBU----->|                          |           |
   |         |            |---(1)--Configure-------->|           |
   |         |          "configure" : {              |           |
   |         |           "client-identifier" : 0,    |           |
   |         |           "operation-id" : 0,         |           |
   |         |           "edits" : [                 |           |
   |         |            "edit-id" : 0,             |           |
   |         |            "edit-type" : "create",    |           |
   |         |            "target" : "mobility-context",         |
   |         |            "value" : {                            |
   |         |              "mobility-context-key" : "ctxt1",    |
   |         |              "delegating-ip-prefix" : [ <HNP> ],  |
   |         |              "dpn-set" : "[ {                     |
   |         |               "dpn-key" : "DPN1",                 |
   |         |               "dpn-policy-expression" : [
   |         |                 {"policy-key" : "dl-tunnel-with-qos",
   |         |                  "qos-template" : <QOS Settings...>,
   |         |                  "tunnel" : <DL tunnel info...> },
   |         |                 {"policy-key" : "ul-tunnel",
   |         |                  "tunnel" : <UL tunnel info...> } ]
   |         |           } ] } ] }                   |           |
   |         |            |                          |--tun1 up->|
   |         |            |                          |           |
   |         |            |                          |--tc qos-->|
   |         |            |                          |           |
   |         |            |<---(2)- Response --------|-route add>|
   |         |            | {                        |           |
   |         |            |  "agent-id" : "agent1"," |           |
   |         |            |  "operation-id" : 0,     |           |
   |         |            |  "result-status" : "ok", |           |
   |         |            |  "edit-status" : [       |           |
   |         |            |    "edit-id" : 0,        |           |
   |         |            |    "edit-status" : "ok"  |           |
   |         |            | ] }                      |           |
   |         |            |                          |           |
   |<------------PBA------|                          |           |
   |         |            |                          |           |
   | +----+  |            |                          |           |
   | |Edge|  |            |                          |           |
   | |DPN1|  |            |                          |           |
   | +----+  |            |                          |           |
   |   |                                                         |
   |   |-=======================================================-|
   |                      |                          |           |
   |   [MN handover]      |                          |           |
   |         |---PBU ---->|                          |           |
   |         |            |--(3)- CONFIG(MODIFY)---->|           |
   |         |          "configure" : {              |-tun1 mod->|
   |         |           "client-identifier" : 0,    |           |
   |         |           "operation-id" : 1,         |           |
   |         |           "edits" : [                 |           |
   |         |            "edit-id" : 0,             |           |
   |         |            "edit-type" : "merge",     |           |
   |         |            "target" : "mobility-context/ctxt1",   |
   |         |            "value" : {                |           |
   |         |              "dpn-set" : "[ {                     |
   |         |               "dpn-key" : "DPN1",                 |
   |         |               "dpn-policy-expression" : [
   |         |                 {"policy-key" : "dl-tunnel-with-qos",
   |         |                  "tunnel" : <NEW tunnel info...> } ]
   |         |           } ] } ] }                   |           |
   |         |<--PBA------|                          |           |
   |         |            |                          |-tun1 mod->|
   |         |            |<---(4)- OK --------------|           |
   |         |            | {                        |           |
   |         |            |  "agent-id" : "agent1"," |           |
   |         |            |  "operation-id" : 1,     |           |
   |         |            |  "result-status" : "ok", |           |
   |         |            |  "edit-status" : [       |           |
   |         |            |    "edit-id" : 0,        |           |
   |         |            |    "edit-status" : "ok"  |           |
   |         |            | ] }                      |           |
   |         |  +----+    |                          |           |
   |         |  |Edge|    |                          |           |
   |         |  |DPN2|    |                          |           |
   |         |  +----+    |                          |           |
   |         |    |       |                          |           |
   |         |    |-============================================-|
   |         |            |                          |           |

      ]]></artwork>
        <postamble>NOTE - For readability, "DPN-Key Set is 'dpn-set' in this
            figure.</postamble>
      </figure>
        </t>

        <t> After reception of the Proxy Binding Update (PBU) at the LMA
            Control-Plane function (LMA-C), the LMA-C selects a suitable DPN,
            which serves as Data-Plane anchor to the mobile node's (MN)
            traffic. The LMA-C adds a new logical Context to the DPN to treat
            the MN's traffic (1) and includes a Context Identifier
            (ctxt1) in the Configure command. The LMA-C identifies the
            selected Anchor DPN by including the associated DPN identifier.</t>

        <t> The LMA-C adds policy template properties during the creation of
            the new Mobility-Context.  One policy, "dl-tunnel-with-qos", is an
            example template that permits tunnel forwarding of traffic destined
            to the MN's HNP, i.e. downlink traffic, with optional QoS
            parameters.  Another policy, "ul-tunnel", provides a simple uplink
            anchor termination template where the uplink tunnel information is
            provided.</t>
        
        <t> The downlink tunnel information specifies the destination endpoint
            (Edge DPN1).</t>
            
            
        <t> At reception of the Mobility-Context, the FPC Agent utilizes
            local configuration commands to create the tunnel (tun1) as well
            as the traffic control (tc) to enable QoS differentiation. After
            configuration has been completed, the Agent applies a new route
            to forward all traffic destined to the MN's HNP specified as a
            property in the Mobility-Context and applied the
            configured tunnel interface (tun1).</t>

        <t> During handover, the LMA-C receives an updating PBU from the
            handover target MAG-C2. The PBU refers to a new Data-Plane node
            (Edge DPN2) to represent the new tunnel endpoint in the downlink
            as required.  The LMA-C sends a Configure message (3) to
            the Agent to modify the existing tunnel property of the existing
            Mobility-Context and to update the downlink tunnel endpoint from
            Edge DPN1 to Edge DPN2. Upon reception of the Configure message,
            the Agent applies updated tunnel property to the local configuration
            and responds to the Client (4).</t>

        <t>
        <figure anchor="fig_msc_delete_example"
            title="Exemplary Message Sequence (focus on FPC reference point)">
        <artwork align="center"><![CDATA[
                                              +-------Router--------+
                        +-----------+         |+-------+ +---------+|
+------+ +------+     +-----+ FPC   |          | FPC   | |  Anchor |
|MAG-C1| |MAG-C2|     |LMA-C| Client|          | Agent | |   DPN   |
+------+ +------+     +-----+-------+          +-------+ +---------+
[MN attach]  |            |                          |           |
   |-------------PBU----->|                          |           |
   |         |            |---(1)--Configure-------->|           |
   |         |          "configure" : {              |           |
   |         |           "client-identifier" : 0,    |           |
   |         |           "operation-id" : 3,         |           |
   |         |           "edits" : [                 |           |
   |         |            "edit-id" : 0,             |           |
   |         |            "edit-type" : "merge",     |           |
   |         |            "target" : "mobility-context/ctxt1     |
   |         |                /dpn-set/DPN1/dl-tunnel-with-qos"  |
   |         |            "value" : {                |           |
   |         |                  "tunnel" : null      |           |
   |         |             } ] }                     |           |
   |<------------PBA------|                          |--tun1   ->|
   |         |            |                          |    down   |
   |         |            |                          |           |
   |         |            |<---(2)- Response --------|           |
   |         |            | {                        |           |
   |         |            |  "agent-id" : "agent1"," |           |
   |         |            |  "operation-id" : 3,     |           |
   |         |            |  "result-status" : "ok", |           |
   |         |            |  "edit-status" : [       |           |
   |         |            |    "edit-id" : 0,        |           |
   |         |            |    "edit-status" : "ok"  |           |
   |         |            | ] }                      |           |
   |         |            |                          |           |
   |         |  [ MinDelayBeforeBCEDelete expires ]  |           |
   |         |            |                          |           |
   |         |            |---(3)--Configure-------->|-- tun1 -->|
   |         |          "configure" : {              |  delete   |
   |         |           "client-identifier" : 0,    |           |
   |         |           "operation-id" : 4,         |           |
   |         |           "edits" : [                 |           |
   |         |            "edit-id" : 0,             |           |
   |         |            "edit-type" : "delete",    |           |
   |         |            "target" : "mobility-context/ctxt1"    |
   |         |            ] }                        |           |
   |         |            |                          |           |
   |         |            |<---(4)- Response --------|           |
   |         |            | {                        |           |
   |         |            |  "agent-id" : "agent1"," |           |
   |         |            |  "operation-id" : 4,     |           |
   |         |            |  "result-status" : "ok", |           |
   |         |            |  "edit-status" : [       |           |
   |         |            |    "edit-id" : 0,        |           |
   |         |            |    "edit-status" : "ok"  |           |
   |         |            | ] }                      |           |
   |         |            |                          |-- route ->|
   |         |            |                          |   remove  |
   |         |            |                          |           |
      ]]></artwork>
        <postamble></postamble>
      </figure>
        </t>

        <t> When a teardown of the session occurs, MAG-C1 will send a PBU with
            a lifetime value of zero.  The LMA-C sends a Configure message (1) to
            the Agent to modify the existing tunnel property of the existing
            Mobility-Context to delete the tunnel information. Upon reception of the
            Configure message, the Agent removes the tunnel configuration and
            responds to the Client (2).  Per <xref target="RFC5213"/>, the PBA
            is sent back immediately after the PBA is received.</t>

        <t> If no valid PBA is received after the expiration of the
            MinDelayBeforeBCEDelete timer (see <xref target="RFC5213"/>), the
            LMA-C will send a Configure (3) message with a deletion request for
            the Context.  Upon reception of the message, the Agent deletes the
            tunnel and route on the DPN and responds to the Client (4).</t>

        <t> When a multi-DPN Agent is used the DPN list permits several DPNs
            to be provisioned in a single message for the single Mobility-Conext.</t>
        <t>
          <figure anchor="fig_multidpn_example"
            title="Exemplary Message Sequence for Multi-DPN Agent">
              <artwork align="center"><![CDATA[





                        +-----------+           +-------+ +---------+
+------+ +------+     +-----+ FPC   |           | FPC   | |  Anchor |
|MAG-C1| |MAG-C2|     |LMA-C| Client|           | Agent | |   DPN1  |
+------+ +------+     +-----+-------+           +-------+ +---------+
[MN attach]  |            |                          |           |
   |-------------PBU----->|                          |           |
   |         |            |---(1)--Configure-------->|           |
   |         |          "configure" : {              |--tun1 up->|
   |         |           "client-identifier" : 0,    |           |
   |         |           "operation-id" : 0,         |           |
   |         |           "edits" : [                 |--tc qos-->|
   |         |            "edit-id" : 0,             |           |
   |         |            "edit-type" : "create",    |           |
   |         |            "target" : "mobility-context",         |
   |         |            "value" : {                            |
   |         |              "mobility-context-key" : "ctxt1",    |
   |         |              "delegating-ip-prefix" : [ <HNP> ],  |
   |         |              "dpn-set" : "[ {                     |
   |         |               "dpn-key" : "DPN1",                 |
   |         |               "dpn-policy-expression" : [
   |         |                 {"policy-key" : "dl-tunnel-with-qos",
   |         |                  "qos-template" : <QOS Settings...>,
   |         |                  "tunnel" : <DL tunnel info...> },
   |         |                 {"policy-key" : "ul-tunnel",
   |         |                  "tunnel" : <UL tunnel info...> } ]
   |         |                }, {
   |         |               "dpn-key" : "DPN1",                 |
   |         |               "dpn-policy-expression" : [
   |         |                 {"policy-key" : "dl-tunnel-with-qos",
   |         |                  "qos-template" : <QOS Settings...>,
   |         |                  "tunnel" : <DL tunnel info...> },
   |         |                 {"policy-key" : "ul-tunnel",
   |         |                  "tunnel" : <UL tunnel info...> } ]
   |         |                } ] } ] }              |           |
   |         |            |                          |           |
   |         |            |<---(2)- Response --------|           |
   |         |            | {                        |-route add>|
   |         |            |  "agent-id" : "agent1"," |           |
   |         |            |  "operation-id" : 3,     |           |
   |         |            |  "result-status" : "ok", |           |
   |         |            |  "notify-follows" : "true",          |
   |         |            |  "edit-status" : [       |           |
   |         |            |    "edit-id" : 0,        |           |
   |         |            |    "edit-status" : "ok"  |           |
   |         |            | ] }                      |           |
   |         |            |                          |           |
   |<------------PBA------|                          |           |
   |         |            |                          |           |
   | +----+               |                          |           |
   | |Edge|               |                          |           |
   | |DPN2|               |                          |           |
   | +----+               |                          |           |
   |   |<---------------------- tun1 up -------------|           |
   |   |<---------------------- tc qos --------------|           |
   |   |<---------------------- route add -----------|           |
   |   |                  |                          |           |
   |         |            |<(3) Configure-Result-    |           |
   |         |            |       Notification       |           |
   |         |            | {                        |-route add>|
   |         |            |  "agent-id" : "agent1"," |           |
   |         |            |  "operation-id" : 3,     |           |
   |         |            |  "result-status" : "ok", |           |
   |         |            |  "notify-follows" : "true",          |
   |         |            |  "edit-status" : [       |           |
   |         |            |    "edit-id" : 0,        |           |
   |         |            |    "edit-status" : "ok"  |           |
   |         |            | ] }                      |           |
   |         |            |                          |           |
   |   |                  |                          |           |
      ]]></artwork>
              <postamble></postamble>
            </figure>
        </t>
        <t> <xref target="fig_multidpn_example"/> shows how the first 2
            messages in <xref target="fig_msc_example"/> are supported when a
            multi-DPN Agent communicates with both Anchor DPN1 and Edge DPN2.
            In such a case, the FPC Client sends the downlink and uplink for
            both DPNs in the DPN Reference List of the same Mobility-Context. Message 1
            shows the DPN Set with all entries.  Each entry identifies the DPN.</t>

        <t> The Agent responds with an OK and Notify-Follows indication while
            it simultaneoulsy provisions both DPNs. Upon successful completion,
            the Agent responds to the Client with a Configuration-Result-Notification
            indicating the operation status.
        </t>
        </section>

        <section anchor="policy_ex" title="Policy And Mobility on the Agent">

        <t> A Client may build Policy and Topology using Configure messages.</t>

        <t> The Client may add, modify or delete many DPN Policies as DPN Policy
            Expressions and Mobility-Contexts in a single FPC message. This includes linking
            Mobility-Contexts to DPN Policies as well as creating the Policy, Rules
            Actions and Descriptors.  As example, a Rule which
            performs re-writing of an arriving packet's destination IP address
            from IP_A to IP_B matching an associated Descriptor, can be
            enforced in the Data-Plane via an Agent to implicitly consider
            matching arriving packet's source IP address against IP_B and
            re-write the source IP address to IP_A.
        </t>

<!-- LB: Add the policy => DPN => Context Process flow -->

        <t> <xref target="fig_port"/> illustrates the generic policy
            configuration model as used between a FPC Client and a FPC Agent.
        </t>

        <t>
           <figure anchor="fig_port" title="Structure of Configurable Policies">
              <artwork align="center"><![CDATA[

  Descriptor_1 -+          +- Action_1
                |          |
  Descriptor_2 -+--<Rule>--+- Action_2
                  +------+
                  /Order#/-------------+
                  +------+             |
                                       |
  Descriptor_3 -+          +- Action_3 +-<Policy>
                |          |           |  ^
  Descriptor_4 -+--<Rule>--+- Action_4 |  |
                  +------+             |  |
                  /Order#/-------------+  |
                  +------+                |
                                         <DPN-Policy-Configuration>

  +---------------------+     +----------------------+
  | Bind 1..M traffic   |     |  Bind 1..N traffic   |
  |  Descriptors to     | --> |  treatment actions   |
  |  to a Policy and    |     |   to a Policy and    |
  | Configurable-Policy |     |  Configurable-Policy |
  +---------------------+     +----------------------+

 |                                                 |
 +-------------- Data-Plane Rule ------------------+
        ]]></artwork>
        <postamble></postamble>
	</figure>
        </t>

	<t>
	    As depicted in <xref target="fig_port"/>, the
	    DPN-Policy-Configuration
            represents the anchor of Rules through the Policy / Rule hierarchy.
            A Client and Agent use the identifier of the associated Policy to
            directly access the Rule and perform modifications of traffic
            Descriptors or Action references.  Arriving
            packets are matched against traffic according to Rule precedence
            and Descriptors.  If a Rule is applicable the packet is treated
            according to the ordered Action values.
	</t>
	<t>
        A Client associates a Precedence value for the Rule's
	    Descriptors, to allow unambiguous traffic matching
	    on the Data-Plane.
        </t>
    
<!-- LB: Is this necessary? (below) -->
        <t> <xref target="fig_context"/> illustrates the generic context
            configuration model as used between a FPC Client and a FPC Agent.
        </t>

        <t>
            <figure anchor="fig_context" title="Structure of Contexts">
              <artwork align="center"><![CDATA[

  TrafficSelector_1
           |
  profile-parameters
           |
  mobility-profile-- dl ------+
                     ^        |
                     |      qos-profile
               <Context-ID1>       |
                     ^        per-mn-agg-max-dl_2
                     |
               <Context-ID2>

  +-------------------+     +---------------------+
  | Bind 1..M traffic |     |  Bind 1..N traffic  |
  |    selectors to   | --> |  treatment / qos    |
  |     a Context     |     |  actions to a       |
  |                   |     |       Context       |
  +-------------------+     +---------------------+

 |                                                 |
 +-------------- Data-Plane Rule ------------------+
        ]]></artwork>
	    <postamble></postamble>
            </figure>
        </t>
	<t> As depicted in <xref target="fig_context"/>, the Context represents
            a mobility session hierarchy.  A Client and Agent directly assigns
            values such as downlink traffic descriptors, QoS information, etc.
            A Client and Agent use the context identifiers to access the
            descriptors, qos information, etc. to perform modifications.
            From the viewpoint of packet processing, arriving packets are
            matched against traffic Descriptors and processed according to the
            qos or other mobility profile related Actions specified in the
            Context's properties. If present, the final action is to use a
            Context's tunnel information to encapsulate and forward the packet.
        </t>

        <t> A second Context also references context1 in the figure.  Based
            upon the technology a property in a parent context (parent
            mobility-context-id reference) MAY be inherited by its
            descendants.  This permits concise over the wire representation.
            When a Client deletes a parent Context all children are also
            deleted.</t>
        </section>
        
  <!-- LB: Is this necessary? (below) -->
          <section anchor="multieditsexample" title="Configure with multiple edits">
            <t> Bundles provide transaction boundaries around work in a single
                message.  Operations in a bundle MUST be successfully executed
                in the order specified.  This allows references created in one
                operation to be used in a subsequent operation in the bundle.
            </t>
            <t> The example bundle shows in Operation 1 (OP 1) the creation of
                a Context 1 which is then referenced in Operation 2 (OP 2) by
                CONTEXT_ID 2.  If OP 1 fails then OP 2 will not be executed.
                The advantage of the CONF_BUNDLE is preservation of dependency
                orders in a single message as opposed to sending multiple
                CONFIG messages and awaiting results from the Agent.</t>
            <t> When a CONF_BUNDLE fails, any entities provisioned in the
                CURRENT operation are removed, however, any successful
                operations completed prior to the current operation are
                preserved in order to reduce system load.</t>
            <t>
              <figure anchor="fig_multi_edits_example"
              title="Exemplary Multi-Edit Message (focus on FPC reference point)">
                <artwork align="center"><![CDATA[
                        +-------Router--------+
+-----------+           |+-------+ +---------+|
|   FPC     |            | FPC   | |  Anchor |
|  Client   |            | Agent | |   DPN   |
+-----------+            +-------+ +---------+
     |                          |           |
     |--CONF_BUNDLE(CREATE)---->|           |
     | [ OP 1,                  |           |
     |   [ MOBILTY_CONTEXT_ID 1,  |--tun1 up->|
     | DPNREFLIST:[[DPN1, BOTH  |           |
     |  DPN_SETTINGS_COMPL:[    |           |
     |   DOWNLINK(QOS/TUN),     |           |
     |   UPLINK(QOS/TUN)] ]]    |--tc qos-->|
     |   CTXT_SETTINGS_COMPL:[  |           |
     |     IP_PREFIX(HNP) ] ] ],|           |
     | [ OP 2,                  |           |
     |   [ MOBILTY_CONTEXT_ID,  |--tun1 up->|
     | DPNREFLIST:[[DPN1, BOTH  |           |
     |  DPN_SETTINGS_COMPL:[    |           |
     |   DOWNLINK(QOS/TUN),     |           |
     |   UPLINK(QOS/TUN)] ]]    |--tc qos-->|
     | PARENT_CONTEXT_ID_REF=1  |           |
     |  ] ]                     |           |
     |                          |           |
      ]]></artwork>
              <postamble></postamble>
            </figure>
          </t>
          </section>

          <section anchor="registry"
                             title="Basename Registry Feature (Optional)">
          <t> The Optional BaseName Registry support feature is provided to
              permit Clients and tenants with common scopes, referred to in
              this specification as BaseNames, to track the state of
              provisioned policy information on an Agent. The registry records
              the BaseName and Checkpoint set by a Client. If a new Client
              attaches to the Agent it can query the Registry to determine
              the amount of work that must be executed to configure the Agent
              to a BaseName / checkpoint revision. A State value is also
              provided in the registry to help Clients coordinate work on
              common BaseNames.</t>
          </section>
        </section>
    
</section>

<section anchor="derived_attrs" title="Templates">
        <t>Configurations templates are shown below.</t>
        
 <section title="Monitor Configuration Templates">
        <t>A periodic configuration specifies a time interval (ms) for reporting.</t>
        <t>A scheduled configuration specifies a time for reporting.</t>
        <t>A threshold configuration MUST have at least one hi or low threshold and
            MAY have both.</t>
        <t>A Target-Events-Configuration is a list of Events that,
            when generated by the Target, results in a Monitor notification.</t>
        <t>
            <figure anchor="fig-monitor-configs"
                title="Monitor Configuration Templates">
                <artwork align="center"><![CDATA[
|
+-[Monitor] <List>
...
|         +-[Configuration]
|         |     +-[Periodic-Configuration]
|         |     |       +-[(Unsigned32) Period:]
...
|         +-[Configuration]
|         |     +-[Schedule-Configuration]
|         |     |       +-[(Unsigned32) Schedule:]
...
|         +-[Configuration]
|         |     +-[Threshold-Configuration]
|         |     |       +-[(Unsigned32) Low]
|         |     |       +-[(Unsigned32) Hi]
...
|         +-[Configuration]
|         |     +-[Target-Events-Configuration]
|         |     |       +-[(Unsigned32) Event-Key:] <List>
                ]]></artwork>
            </figure>
        </t>
   </section>
   <section title="Descriptor Templates">
       <t>A IP-Prefix-Template MUST have at least the To or From IP Prefix / Length
            populated.  The IP Prefix specifies and Address and Length.</t>
       <t>The PMIP Traffic Selector template is mapped according to <xref target="RFC6088"/></t>
       <t>The RFC 5777 Classifier is a structured version of common filter rules and follows
           the format specified in <xref target="RFC5777"/>.  The Flow-Label, Flow-Label range
           and ECN-IP-Codepoint specified in <xref target="RFC7660"/> are added to the Descriptor as well.</t>
       <t>
           <figure anchor="descriptor-templates"
               title="Descriptor Templates">
               <artwork align="center"><![CDATA[
|
+-[ip-prefix-template]
|       +-[(IP Prefix / Length) To-IP-Prefix]
|       +-[(IP Prefix / Length) From-IP-Prefix]
...
+-[pmip-traffic-selector]
|       +-[(Enumerated - IPv4 or IPv6) ts-format]
|       +-[ipsec-spi-range]
|       |   +-[ (ipsec-spi) start-spi: ]
|       |   +-[ (ipsec-spi) end-spi ]
|       +-[source-port-range]
|       |   +-[ (port-number) start-port: ]
|       |   +-[ (port-number) end-port ]
|       +-[destination-port-range]
|       |   +-[ (port-number) start-port: ]
|       |   +-[ (port-number) end-port ]
|       +-[source-address-range-v4]
|       |   +-[ (ipv4-address) start-address: ]
|       |   +-[ (ipv4-address) end-address ]
|       +-[destination-address-range-v4]
|       |   +-[ (ipv4-address) start-address: ]
|       |   +-[ (ipv4-address) end-address ]
|       +-[ds-range]
|       |   +-[ (dscp) start-ds: ]
|       |   +-[ (dscp) end-ds ]
|       +-[protocol-range]
|       |   +-[ (uint8) start-protocol: ]
|       |   +-[ (uint8) end-protocol ]
|       +-[source-address-range-v6]
|       |   +-[(ipv6-address) start-address: ]
|       |   +-[(ipv6-address) end-address ]
|       +-[destination-address-range-v6]
|       |   +-[(ipv6-address) start-address: ]
|       |   +-[(ipv6-address) end-address ]
|       +-[flow-label-range]
|       |   +-[(ipv6-flow-label) start-flow-label ]
|       |   +-[(ipv6-flow-label) end-flow-label ]
|       +-[traffic-class-range]
|       |   +-[ (dscp) start-traffic-class ]
|       |   +-[ (dscp) end-traffic-class ]
|       +-[next-header-range]
|       |   +-[ (uint8) start-next-header ]
|       |   +-[ (uint8) end-next-header ]
...
+-[rfc5777-classifier]
|       +-[Extensible: True]
|       +-[(uint8) protocol]
|       +-[(Enumerated - In/Out/Both) Direction]
|       +-[From-Spec] <List>
|       |    +-[(ip-address) IP-Address] <List>
|       |    +-[IP-Address-Range] <List>
|       |    |    +-[(ip-address) IP-Address-Start]
|       |    |    +-[(ip-address) IP-Address-End]
|       |    +-[IP-Address-Mask] <List>
|       |    |    +-[(ip-address) IP-Address:]
|       |    |    +-[(Unsigned 32) IP-Bit-Mask-Width:]
|       |    +-[(mac-address) MAC-Address] <List>
|       |    +-[MAC-Address-Mask] <List>
|       |    |    +-[(mac-address) MAC-Address:]
|       |    |    +-[(mac-address) MAC-Address-Mask-Pattern:]
|       |    +-[(eui64-address) EUI64-Address] <List>
|       |    +-[EUI64-Address-Mask] <List>
|       |    |    +-[(eui64-address) EUI64-Address:]
|       |    |    +-[(eui64-address) EUI64-Address-Mask-Pattern:]
|       |    +-[(Integer 32) Port] <List>
|       |    +-[Port-Range] <List>
|       |    |    +-[(Integer 32) Port-Start]
|       |    |    +-[(Integer 32) Port-End]
|       |    +-[(Boolean) Negated]
|       |    +-[(Boolean) Use-Assigned-Address]
|       +-[To-Spec] <List> (O)
|       |    +-[(ip-address) IP-Address] <List>
|       |    +-[IP-Address-Range] <List>
|       |    |    +-[(ip-address) IP-Address-Start]
|       |    |    +-[(ip-address) IP-Address-End]
|       |    +-[IP-Address-Mask] <List>
|       |    |    +-[(ip-address) IP-Address:]
|       |    |    +-[(Unsigned 32) IP-Bit-Mask-Width:]
|       |    +-[(mac-address) MAC-Address] <List>
|       |    +-[MAC-Address-Mask] <List>
|       |    |    +-[(mac-address) MAC-Address:]
|       |    |    +-[(mac-address) MAC-Address-Mask-Pattern:]
|       |    +-[(eui64-address) EUI64-Address] <List>
|       |    +-[EUI64-Address-Mask] <List>
|       |    |    +-[(eui64-address) EUI64-Address:]
|       |    |    +-[(eui64-address) EUI64-Address-Mask-Pattern:]
|       |    +-[(Integer 32) Port] <List>
|       |    +-[Port-Range] <List>
|       |    |    +-[(Integer 32) Port-Start]
|       |    |    +-[(Integer 32) Port-End]
|       |    +-[(Boolean) Negated]
|       |    +-[(Boolean) Use-Assigned-Address]
|       +-[(dscp) Diffserv-Code-Point] <List>
|       +-[(Boolean) Fragmentation-Flag ~ False]
|       +-[IP-Option] <List>
|       +-[TCP-Option] <List>
|       +-[TCP-Flags]
|       +-[ICMP-Type] <List>
|       +-[ETH-Option] <List>
|       +-[ecn-ip-codepoint] <List>
|       +-[(flowlabel) flow-label] <List>
|       +-[flow-label-range] <List>
|       |    +-[(flowlabel) flow-label-start]
|       |    +-[(flowlabel) flow-label-end]
               ]]></artwork>
           </figure>
       </t>
       
   </section>
   <section title="Tunnel Templates">
       <t>The Network Service Header is specified in <xref target="RFC8300"/>.</t>
       <t>The MPLS SR Stack is specified in <xref target="I-D.ietf-spring-segment-routing-mpls"/>.</t>
       <t>The IPv6 SR Stack is specified in <xref target="I-D.ietf-6man-segment-routing-header"/>.</t>
       <t>A tunnel MUST have the local-address or remote-address (or both) populated.</t>
       <t>For GRE, the gre-key MUST be present.</t>
       <t>For GTP (GPRS Tunneling Protocol), the following attributes MAY be present
           <list>
               <t>local tunnel endpoint identifier (teid) - MUST be present local-address is nonempty</t>
               <t>remote tunnel endpoint identifier (teid) - MUST be present remote-address is nonempty</t>
               <t>sequence-numbers-on - Indicates that sequence numbers will be used</t>
           </list>
       </t>
       <t>Tunnels can be used as Next Hop and Descriptor values.</t>
       <t>
           <figure anchor="tunneltemplates"
               title="Tunnel Templates">
               <artwork align="center"><![CDATA[
|
+-[next-hop-template]
|     +-[Extensible: True]
|     +-[(ip-address) address]
|     +-[(mac-address) mac-address]
|     +-[(service-path-id) service-path]
|     +-[(mpls-label) mpls-path]
|     +-[(network service header) nsh]
|     +-[(Unsigned Integer) interface]
|     +-[(Unsigned 128) segment-identifier]
|     +-[(MPLS Stack) mpls-label-stack]
|     +-[(MPLS SR Stack) mpls-sr-stack]
|     +-[(IPv6 SR Stack) srv6-stack]
|     +-[tunnel-template]
...
|
+-[tunnel-template]
|     +-[Extensible: True]
|     +-[(address) local-address]
|     +-[(address) remote-address]
|     +-[mtu]
|     +-[(Enumeration - ipv4(0), ipv6(1), dual(2) payload_type:]
|     +-[(Enumeration - ip-in-ip(0),
              udp(1), gre(2), gtpv1(3), gtpv2(4)) type:]
|     +-[interface]
|     +-[next-hop]
|     +-[gre-key:] (type == gre)
|     +-[gtp-info] (type == gtpv1 or type == gtpv2 )
|     |    +-[(Unsigned 32) local-teid]
|     |    +-[(Unsigned 32) remote-teid]
|     |    +-[(Boolean) sequence-numbers-on] (type == gtpv1)
               ]]></artwork>
           </figure>
       </t>
   </section>
   <section title="Action Templates">
       <t>The following figure shows common next-hop (set next-hop) and tunnel
           templates for Actions.</t>
       <t>Drop action has no values.</t>
       <t>Rewrite uses a Descriptor to set the values of the packet.  Exactly one
           Descriptor MUST be present. Only the Destination and Source port fields,
           if present, are used from the Descriptor.</t>
       <t>Copy-Forward creates a copy of the packet and then forwards it
           in accordance to the nexthop value.</t>
       <t>
           <figure anchor="action_templates"
               title="Action Templates">
               <artwork align="center"><![CDATA[
|
+-[drop-template]
...
|
+-[rewrite-template]
|     +-[Extensible: True]
|     +-[ip-prefix-template]
|     +-[pmip-traffic-selector]
|     +-[rfc5777-classifier]
...
|
+-[copy-forward-template]
|     +-[Extensible: True]
|     +-[next-hop:]
               ]]></artwork>
           </figure>
       </t>
  </section>
 
   <section title="Quality of Service Action Templates">
       <t>PMIP QoS is specified in <xref target="RFC7222"/>.</t>
       <t>
           <figure anchor="qos_templates"
               title="QoS Templates">
               <artwork align="center"><![CDATA[
|
+-[qos-template]
|     +-[Extensible: True]
|     +-[(dscp) trafficclass]
|     +-[pmip-qos]
|     |     +-[(Unsigned 32) per-mn-agg-max-dl]
|     |     +-[(Unsigned 32) per-mn-agg-max-ul]
|     |     +-[per-session-agg-max-dl]
|     |     |    +-[(Unsigned 32) max-rate:]
|     |     |    +-[(Boolean) service-flag:]
|     |     |    +-[(Boolean) exclude-flag:]
|     |     +-[per-session-agg-max-ul]
|     |     |    +-[(Unsigned 32) max-rate:]
|     |     |    +-[(Boolean) service-flag:]
|     |     |    +-[(Boolean) exclude-flag:]
|     |     +-[allocation-retention-priority]
|     |     |    +-[(Unsigned 8) prioirty-level:]
|     |     |    +-[(Enumeration) premption-capability:]
|     |     |    +-[(Enumeration) premption-vulnerability:]
|     |     +-[(Unsigned 32) agg-max-dl]
|     |     +-[(Unsigned 32) agg-max-ul]
|     |     +-[(Unsigned 32) gbr-dl]
|     |     +-[(Unsigned 32) gbr-ul]
               ]]></artwork>
           </figure>
       </t>
    </section>

    <section title="PMIP Command-Set">
    <t> The following Command Set values are supported for IETF PMIP.
      <list style="symbols">
        <t> assign-ip - Assign the IP Address for the mobile session.</t>
        <t> assign-dpn - Assign the Dataplane Node.</t>
        <t> session - Assign values for the Session Level.</t>
        <t> uplink - Command applies to uplink.</t>
        <t> downlink - Command applies to downlink.</t>
      </list>
    </t>
    </section>
   
    <section anchor="thregpp" title="3GPP Specific Templates and Extensions">
    <t> 3GPP support is optional and detailed in this section. The following
        acronyms are used:
        <list hangIndent="4" style="hanging">
        <t hangText="APN-AMBR:"> Access Point Name Aggregate
                                 Maximum Bit Rate</t>
        <t hangText="UE-AMBR:"> User Equipment Aggregate
            Maximum Bit Rate</t>
        <t hangText="QCI:"> QoS Class Identifier</t>
                
        <t hangText="EBI:"> EPS Bearer Identity </t>
        <t hangText="LBI:"> Linked Bearer Identity </t>
        <t hangText="IMSI:"> International Mobile Subscriber Identity</t>

        <t hangText="TFT:"> Traffic Flow Template (TFT)</t>
       </list></t>
    
       <t>Generally, 3GPP QoS values should use the qos-template.
           Note, User Equipment Aggregate Maximum Bit Rate (UE-AMBR) maps to the
           per-mn-agg-max-dl and per-mn-agg-max-ul.</t>

<t>
    <figure anchor="tgpp-template-exstensions"
        title="3GPP Mobility Template">
        <artwork align="center"><![CDATA[
            |
            +-[ MN-Policy-Template ]
            |     +-[(Unsigned 64) imsi:]
            ...
            +-[tunnel-template]
            |     +-[Extensible: True]
            |     +-[(unsigned 4) ebi:]
            |     +-[(unsigned 4) lbi]
            ...
            +-[qos-template]
            |     +-[Extensible: True]
            |     +-[(unsigned 4) qos-class-identifier]
            |     +-[(Unsigned 32) ue-agg-max-bitrate]
            |     +-[(Unsigned 32) apn-agg-max-bitrate]
            ...
        ]]></artwork>
        <postamble></postamble>
    </figure>
</t>

<t>
    <figure anchor="tgpp-tft"
        title="3GPP Traffc Flow Template (Descriptor)">
        <artwork align="center"><![CDATA[
|
+-[ packet-filter ]
|     +-[Extensible: True]
|     +-[(Unsigned 8) identifier:]
|     +-[Contents:] <List>
|     |     +-[(ip-address) ipv4-ipv6-local]
|     |     +-[(ipv6-prefix) ipv6-prefix-local]
|     |     +-[(ip-address) ipv4-ipv6-remote]
|     |     +-[(ipv6-prefix) ipv6-prefix-remote]
|     |     +-[(Unsigned 8) protocol-next-header]
|     |     +-[(Unsigned 16) local-port]
|     |     +-[local-port-range]
|     |     |      +-[(Unsigned 16) local-port-lo]
|     |     |      +-[(Unsigned 16) local-port-hi]
|     |     +-[(Unsigned 16) remote-port]
|     |     +-[remote-port-range]
|     |     |      +-[(Unsigned 16) remote-port-lo]
|     |     |      +-[(Unsigned 16) remote-port-hi]
|     |     +-[(Unsigned 32) sec-parameter-index]
|     |     +-[(dscp) traffic-class]
|     |     +-[traffic-class-range]
|     |     |      +-[(dscp) traffic-class-lo]
|     |     |      +-[(dscp) traffic-class-hi]
|     |     +-[(dscp) flow-label]
...

        ]]></artwork>
        <postamble></postamble>
    </figure>
</t>
    <t> The following Command Set values are supported for 3GPP.
        <list style="symbols">
          <t> assign-ip - Assign the IP Address for the mobile session.</t>
          <t> assign-fteid-ip - Assign the Fully Qualified TEID (F-TEID)
              LOCAL IP address.</t>
          <t> assign-fteid-teid - Assign the Fully Qualified TEID (F-TEID)
              LOCAL TEID.</t>
          <t> session - Assign values for the Session Level.  When this
              involves 'assign-fteid-ip' and 'assign-fteid-teid' this implies
              the values are part of the default bearer.</t>
          <t> uplink - Command applies to uplink.</t>
          <t> downlink - Command applies to downlink.</t>
          <t> assign-dpn - Assign the Dataplane Node.</t>
        </list>
    </t>
   </section>
</section>

<section title="Implementation Status">
    <t> Three FPC Agent implementations have been made to date.  The first was
        based upon Version 03 of the draft and followed Model 1.  The second
        follows Version 04 of the document. Both implementations were
        OpenDaylight plug-ins developed in Java by Sprint.   Version 03 was
        known as fpcagent and version 04's implementation is simply referred to
        as 'fpc'.  A third has been devloped on an ONOS Controller for use in
        MCORD projects.</t>
    <t> fpcagent's intent was to provide a proof of concept for FPC Version 03
        Model 1 in January 2016 and research various errors, corrections and
        optimizations that the Agent could make when supporting multiple
        DPNs.</t>
    <t> As the code developed to support OpenFlow and a proprietary DPN from a
        3rd party, several of the advantages of a multi-DPN Agent became obvious
        including the use of machine learning to reduce the number of Flows and
        Policy entities placed on the DPN.  This work has driven new efforts in
        the DIME WG, namely Diameter Policy Groups
        <xref target="I-D.bertz-dime-policygroups"/>.</t>
    <t> A throughput performance of tens per second using various NetConf based
        solutions in OpenDaylight made fpcagent undesirable for call processing.
        The RPC implementation improved throughput by an order of magnitude but
        was not useful based upon FPC's Version 03 design using two information
        models.  During this time the features of version 04 and its converged
        model became attractive and the fpcagent project was closed in August
        2016. fpcagent will no longer be developed and will remain a
        proprietary implementation.</t>
    <t> The learnings of fpcagent has influenced the second project, fpc.
        Fpc is also an OpenDaylight project but is an open source release
        as the Opendaylight FpcAgent plugin
<!--  CEP: This should be a citation in the References.  -->
        (https://wiki.opendaylight.org/view/Project_Proposals:FpcAgent).
        This project is scoped to be a fully compliant FPC Agent that supports
        multiple DPNs including those that communicate via OpenFlow. The
        following features present in this draft and others developed by the
        FPC development team have already led to an order of magnitude
        improvement.
        <list hangIndent="4" style="hanging">
        <t> Migration of non-realtime provisioning of entities such as topology
            and policy allowed the implementation to focus only on the rpc.</t>
        <t> Using only 5 messages and 2 notifications has also reduced
            implementation time.</t>
        <t> Command Sets, an optional feature in this specification, have
            eliminated 80% of the time spent determining what needs to be done
            with a Context during a Create or Update operation.</t>
        <t> Op Reference is an optional feature modeled after video delivery.
            It has reduced unnecessary cache lookups.  It also has the
            additional benefit of allowing an Agent to become cacheless and
            effectively act as a FPC protocol adapter remotely with multi-DPN
            support or colocated on the DPN in a single-DPN support model.</t>
        <t> Multi-tenant support allows for Cache searches to be partitioned
            for clustering and performance improvements. This has not been
            capitalized upon by the current implementation but is part of the
            development roadmap.</t>
        <t> Use of Contexts to pre-provision policy has also eliminated any
            processing of Ports for DPNs which permitted the code for CONFIGURE
            and CONF_BUNDLE to be implemented as a simple nested FOR loops
            (see below).</t>
        </list>
    </t>

    <t> Initial v04 performance results without code optimizations or tuning
        allow 2-5K FPC Contexts processed per second on a 2013 Mac laptop.
        This results in 2x the number of transactions on the southbound
        interface to a proprietary DPN API on the same machine.</t>
    <t> Current v04 performance results without code optimizations or tuning
        allow 1-2K FPC Contexts processed per second on a 2013 Mac laptop.
        This results in 2x the number of transactions on the southbound
        interface to a proprietary DPN API on the same machine.</t>
    <t> fpc currently supports the following:
        <list hangIndent="24" style="hanging">
        <t> 1 proprietary DPN API</t>
        <t> Policy and Topology as defined in this specification using
            OpenDaylight North Bound Interfaces such as NetConf and
            RestConf</t>
        <t> CONFIG and CONF_BUNDLE (all operations)</t>
        <t> DPN assignment, Tunnel allocations and IPv4 address assignment
            by the Agent or Client.</t>
        <t> Immediate Response is always an OK_NOTIFY_FOLLOWS.</t>
        </list> </t>

  <t>
        <figure anchor="pseudo_code"
              title="fpc pseudo code">
        <artwork align="center"><![CDATA[
assignment system (receives rpc call):
  perform basic operation integrity check
  if CONFIG then
    goto assignments
    if assignments was ok then
      send request to activation system
      respond back to client with assignment data
    else
      send back error
    end if
  else if CONF_BUNDLE then
    for each operation in bundles
    goto assignments
    if assignments was ok then
      hold onto data
    else
      return error with the assignments that occurred in
        prior operations (best effort)
    end if
    end for
    send bundles to activation systems
  end if

assignments:
  assign DPN, IPv4 Address and/or tunnel info as required
  if an error occurs undo all assignments in this operation
  return result

activation system:
  build cache according to op-ref and operation type
  for each operation
    for each Context
      for each DPN / direction in Context
        perform actions on DPN according to Command Set
      end for
    end for
  end for
  commit changes to in memory cache
  log transaction for tracking and notification
                                (CONFIG_RESULT_NOTIFY)
      ]]></artwork>
    </figure>
  </t>

  <t> For further information please contact Lyle Bertz who is also a
      co-author of this document.</t>

  <t> NOTE: Tenant support requires binding a Client ID to a Tenant ID
      (it is a one to many relation) but that is outside of the scope of this
      specification.  Otherwise, the specification is complete in terms
      of providing sufficient information to implement an Agent.</t>
</section>


<section title="Security Considerations">

    <t> Detailed protocol implementations for DMM Forwarding Policy
        Configuration must ensure integrity of the information exchanged
        between an FPC Client and an FPC Agent. Required Security Associations
        may be derived from co-located functions, which utilize the FPC Client
        and FPC Agent respectively.</t>

    <t> The YANG modules defined in this memo is designed to be accessed
        via the NETCONF <xref target="RFC6241"/> or RESTCONF
        <xref target="RFC8040"/> protocol.  The lowest NETCONF layer is the
        secure transport layer and the mandatory-to-implement secure transport
        is SSH <xref target="RFC6242"/>.</t> 
    <t> The information model defined in the memo is designed to be access by
        protocols specified in extensions to this document or, if using the
        YANG modules, as described above.</t>

    <t> There are a number of data nodes defined which are
        writable/creatable/deletable.  These data nodes may be considered
        sensitive or vulnerable in some network environments.  Write operations
        (e.g., a NETCONF edit-config) to these data nodes without proper
        protection can have a negative effect on network operations.  These
        are the subtrees and data nodes and their sensitivity/vulnerability:
        <list>
        <t> Nodes under the Policy tree provide generic policy enforcement and
            traffic classification. They can be used to block or permit
            traffic.  If this portion of the model was to be compromised it
            may be used to block, identify or permit traffic that was not
            intended by the Tenant or FPC CLient.</t>
        <t> Nodes under the Topology tree provide definition of the Tenant's
            forwarding topology.  Any compromise of this information will
            provide topology information that could be used for subsequent
            attack vectors.  Removal of topology can limit services.</t>
        <t> Nodes under the Mobility Tree are runtime only and manipulated by
            remote procedure calls.  The unwanted deletion or removal of such
            information would deny users service or provide services to
            unauthorized parties.</t>
        </list> </t>

    <t> Some of the readable data nodes defined may be considered sensitive or
        vulnerable in some network environments.  It is thus important to
        control read access (e.g., via get, get-config, or notification) to
        these data nodes.  These are the subtrees and data nodes and their
        sensitivity/vulnerability:
        <list>
        <t> IP address assignments in the Context along with their associated
            tunnel configurations/identifiers (from the FPC base module)</t>
        <t> Internaional Mobile Subscriber Identity (IMSI) and bearer
            identifiers in the Context when using the optional 3GPP module</t>
        </list></t>

    <t> Some of the RPC operations defined may be considered sensitive or
        vulnerable in some network environments.  It is thus important to
        control access to these operations.  These are the operations and their
        sensitivity/vulnerability:
        <list>
        <t> CONFIG and CONF_BUNDLE send Context information which can include
            information of a sensitive or vulnerable nature in some network
            environments as described above.</t>
        <t> Monitor related RPC operations do not specicially provide sensitive
            or vulnerable information but care must be taken by users to avoid
            identifier values that expose sensitive or vulnerable
            information.</t>
        <t> Notications MUST be treated with same level of protection and
            scrutiny as the operations they correspond to.  For example, a
            CONFIG_RESULT_NOTIFY notification provides the same information
            that is sent as part of the input and output of the CONFIG and
            CONF_BUNDLE RPC operations.</t>
        </list> </t>

    <t> General usage of FPC MUST consider the following:
        <list>
        <t> FPC Naming <xref target="naming"/> permits arbirtrary string values
            but a users MUST avoid placing sensitive or vulnerable information
            in those values.</t>
        <t> Policies that are very narrow and permit the identification of
            specific traffic, e.g. that of a single user, SHOULD be avoided.</t>
        </list></t>
</section>

<section anchor="IANA" title="IANA Considerations">
    <t> This document registers six URIs in the "IETF XML Registry"
        <xref target="RFC3688"/>.  Following the format in RFC 3688, the
        following registrations have been made.</t>

    <t> <figure><artwork>
    URI: urn:ietf:params:xml:ns:yang:ietf-dmm-fpc
    Registrant Contact: The DMM WG of the IETF.
    XML: N/A, the requested URI is an XML namespace.</artwork></figure></t>

    <t> <figure><artwork>
    URI: urn:ietf:params:xml:ns:yang:ietf-dmm-pmip-qos
    Registrant Contact: The DMM WG of the IETF.
    XML: N/A, the requested URI is an XML namespace.</artwork></figure></t>

    <t> <figure><artwork>
    URI: urn:ietf:params:xml:ns:yang:ietf-dmm-traffic-selector-types
    Registrant Contact: The DMM WG of the IETF.
    XML: N/A, the requested URI is an XML namespace.</artwork></figure></t>

    <t> <figure><artwork>
    URI: urn:ietf:params:xml:ns:yang:ietf-dmm-fpc-settingsext
    Registrant Contact: The DMM WG of the IETF.
    XML: N/A, the requested URI is an XML namespace.</artwork></figure></t>

    <t> This document registers the following YANG modules in the "YANG
          Module Names" registry [RFC6020].</t>

    <t> <figure><artwork>
      name:         ietf-dmm-fpc
      namespace:    urn:ietf:params:xml:ns:yang:ietf-dmm-fpc
      prefix:       fpc
      reference:    TBD1
      </artwork></figure></t>
    <t> <figure><artwork>
      name:         ietf-dmm-pmip-qos
      namespace:    urn:ietf:params:xml:ns:yang:ietf-dmm-pmip-qos
      prefix:       qos-pmip
      reference:    TBD2
      </artwork></figure></t>
    <t> <figure><artwork>
      name:         ietf-dmm-traffic-selector-types
      namespace:    urn:ietf:params:xml:ns:yang:
        ietf-dmm-traffic-selector-types
      prefix:       traffic-selectors
      reference:    TBD3
      </artwork></figure></t>
    <t> <figure><artwork>
      name:         ietf-dmm-fpc-settingsext
      namespace:    urn:ietf:params:xml:ns:yang:
        ietf-dmm-fpc-settingsext
      prefix:       fpcbase
      reference:    TBD4
    </artwork></figure></t>
</section>

<section title="Work Team Participants">

    <t> Participants in the FPSM work team discussion include Satoru
        Matsushima, Danny Moses, Sri Gundavelli, Marco Liebsch, Pierrick Seite,
        Alper Yegin, Carlos Bernardos, Charles Perkins and Fred Templin. </t>
</section>

</middle>

<back>
    <references title="Normative References">
    &rfc2119;
    &RFC7333;
    &RFC6088;
    &RFC6991;
    &RFC8300;
    &I-D.ietf-6man-segment-routing-header;
    &I-D.ietf-spring-segment-routing-mpls;
    </references>

    <references title="Informative References">
    &I-D.ietf-dmm-deployment-models;
    &I-D.bertz-dime-policygroups;
    &RFC5213;
    &RFC5777;
    &RFC7222;
    &RFC7660;
    &RFC6241;
    &RFC6242;
    &RFC3688;
    &RFC8040;
    &RFC8072;
    </references>

<!--

<reference anchor="3GPP-PCRFFR" target="http://www.3gpp.org">
        <front>
            <title>
		3GPP TS 29.816  3GPP TS 29.272 Study on PRCF
		Failure and Restoration
	    </title>
            <author initials="" surname="" fullname="">
                <organization />
            </author>
        </front>
    </reference>

<reference anchor="3GPP-DIAM" target="http://www.3gpp.org">
        <front>
            <title>
		3GPP TS 29.272  Mobility Management Entity (MME) and Serving
                GPRS Support Node (SGSN) related interfaces based on Diameter
		protocol
	    </title>
            <author initials="" surname="" fullname="">
                <organization />
            </author>
        </front>
    </reference>


    </references>
-->

<section anchor="yangmodel" title="YANG Data Model for the FPC protocol">
    <t> This section provides a type mapping for FPC structures in YANG.  When being
        mapped to a specific information such as YANG the data type MAY
        change.</t>
    
    <t>L-Keys for Actions, Descriptors, Rules, Policies, DPNs, Domains and Mobility-Contexts are
        specified as FPC-Identity which follows rules according to <xref target="naming"/>.</t>
    
    <t>Action and Descriptor Templates are mapped as choices.  This was done to ensure
        no duplication of Types and avoid use of identityref types for typing.</t>
    
    <t>Policy Expressions are provided as default values.  NOTE that a static value CANNOT
        be supported in YANG.</t>

    <t>Four modules are defined:

    <list style="symbols">
    <t> ietf-dmm-fpc (fpc) - Defines the base model and messages for FPC
        that are meant to be static in FPC.</t>
    <t> ietf-dmm-fpc-settingsext An FPC module that defines the information
        model elements that are likely to be extended in FPC.</t>
    <t> ietf-pmip-qos (pmip-qos) - Defines proxy mobile IPv6 QoS parameters
        per RFC 7222</t>
    <t> ietf-trafficselectors-types (traffic-selectors) - Defines Traffic
        Selectors per RFC 6088</t>
    </list></t>
    
    

<!-- template for YANG model, start -->
    <section anchor="fpc-yang-model" title="FPC YANG Model">
    <t> This module defines the information model and protocol elements
        specified in this document.</t>
    <t> This module references <xref target="RFC6991"/>,
        <xref target="RFC8040"/> and the fpc-settingsext module defined in
        this document.</t>
    <figure> <artwork><![CDATA[
<CODE BEGINS> file "ietf-dmm-fpc@2017-09-27.yang"
module ietf-dmm-fpc {
  yang-version 1.1;
    namespace "urn:ietf:params:xml:ns:yang:ietf-dmm-fpc";
    prefix fpc;

    import ietf-inet-types { prefix inet; 
        revision-date 2013-07-15; }
    import ietf-restconf { prefix restconf; 
        revision-date 2017-01-26; }
    import ietf-dmm-fpc-settingsext { prefix fpcbase; 
    revision-date 2017-09-27;
  }

    organization "IETF Distributed Mobility Management (DMM)
      Working Group";

    contact
       "WG Web:   <http://tools.ietf.org/wg/netmod/>
        WG List:  <mailto:netmod@ietf.org>

        WG Chair: Dapeng Liu
                  <mailto:maxpassion@gmail.com>

        WG Chair: Sri Gundavelli
                  <mailto:sgundave@cisco.com>

        Editor:   Satoru Matsushima
                  <mailto:satoru.matsushima@g.softbank.co.jp>

        Editor:   Lyle Bertz
                  <mailto:lylebe551144@gmail.com>";

    description
    "This module contains YANG definition for
     Forwarding Policy Configuration Protocol (FPCP).

     Copyright (c) 2016 IETF Trust and the persons identified as the
     document authors. All rights reserved.

     This document is subject to BCP 78 and the IETF Trust's Legal
     Provisions Relating to IETF Documents
     (http://trustee.ietf.org/license-info) in effect on the date of
     publication of this document. Please review these documents
     carefully, as they describe your rights and restrictions with
     respect to this document. Code Components extracted from this
     document must include Simplified BSD License text as described
     in Section 4.e of the Trust Legal Provisions and are provided
     without warranty as described in the Simplified BSD License.";

    revision 2017-09-27 {
    description "Version 10 updates.";
    reference "draft-ietf-dmm-fpc-cpdp-10";
  }
revision 2017-07-22 {
    description "Version 08 updates.";
    reference "draft-ietf-dmm-fpc-cpdp-08";
}
revision 2017-03-08 {
    description "Version 06 updates.";
    reference "draft-ietf-dmm-fpc-cpdp-06";
}
revision 2016-08-03 {
    description "Initial Revision.";
    reference "draft-ietf-dmm-fpc-cpdp-05";
}
    feature fpc-basename-registry {
      description "Ability to track Base Names already provisioned
        on the Agent";
    }
    feature fpc-bundles {
      description "Ability for Client to send multiple bundles of
        actions to an Agent";
    }
    feature fpc-auto-binding {
      description "Allows a FPC Agent to advertise Topology Objects
        that could be DPNs";
    }
    feature operation-ref-scope {
      description "Provides the scope of refeneces in an operation.
        Used to optmize the Agent processing.";
    }
    
  //General Structures
    typedef fpc-identity {
        type union {
            type uint32;
            type string;
            type instance-identifier;
        }
        description "FPC Identity";
    }
    grouping target-value {
      leaf target {
          type fpc-identity;
      mandatory true;
      description "Target Identity";
      }
      description "FPC Target Value";
    }
  // Topology 
  typedef fpc-interface-id {
        type fpc:fpc-identity;
        description "DPN interface Identifier";
  }
    identity interface-protocols {
        description "Protocol supported by the interface";
    }
    identity features {
        description "Protocol features";
    }
  // Settings
  grouping settings {
    container settings-set {
      uses fpcbase:fpc-settings;
      description "Settings";
    }
    description "Settings container";
  }
  //Topology - Groupings
  grouping interface-settings {
    container interface-settings-set {
      description "Interface settings";
    }
    description "Generic interface settings container";
  }
  grouping access-technology-key {
    leaf access-technology {
      type identityref {
        base "fpcbase:access-technology";
      }
      mandatory true;
      description "Access Technology";
    }
    description "Access Technology key";
  }
  grouping role-key {
    leaf role {
      type identityref {
        base "fpcbase:role";
      }
      mandatory true;
      description "Access Technology Role";
    }
    description "Access Technology Role key";
  }
  grouping interface-id-key {
    leaf interface-id {
      type fpc:fpc-interface-id;
      mandatory true;
      description "interface identifier";
    }
    description "Interface Identifier key";
  }
  grouping dpn-identifier-key {
    leaf dpn-id {
      type fpc:fpc-identity;
      mandatory true;
      description "DPN Identifier Type";
    }
    description "DPN Identifier key";
  }
  grouping dpn-interface-reference {
    uses fpc:access-technology-key;
    uses fpc:role-key;
    uses fpc:interface-id-key;
    description "A reference to a DPN interface";
  }
  // Topology Grouping
  grouping fpc-topology {
    list dpn-set {
      key dpn-id;
      uses fpc:dpn-identifier-key;
      leaf dpn-name {
        type string;
        description "DPN name";
      }
      leaf dpn-resource-mapping-reference {
        type string;
        description "Reference to underlying DPN resource(s)";
      }
      list interface-set {
        key "access-technology role interface-id";
        uses fpc:dpn-interface-reference;
        uses fpc:interface-settings;
        description "DPN interfaces";
      }
      description "Set of DPNs";
    }
    list dpn-type-set {
      key "access-technology role";  
      uses fpc:access-technology-key;
      leaf access-technology-name {
        type string;
        description "Access Technology Name";
      }
      uses fpc:role-key;
      leaf role-name {
        type string;
        description "Access Technology Role Name";
      }
      list interface-set {
        key interface-id;
        uses fpc:interface-id-key;
        leaf interface-name {
          type string;
          description "DPN-Type Interface Name";
        }
        leaf-list interface-protocol-set {
          type identityref {
            base "interface-protocols";
          }
          description "Supported protocols";
        }
        leaf-list feature-set {
          type identityref {
            base "interface-protocols";
          }
          description "Supported features";
        }
        uses fpc:interface-settings;
        description "A DPN interface types";
      }
      description "Set of DPN types";
    }
    list srv-group-set {
      key "srv-group-id";
      leaf srv-group-id {
        type fpc:fpc-identity;
        mandatory true;
        description "DPN Group Identifier";
      }
      list referenced-dpns-set {
        key "access-technology role interface-id";
        uses fpc:dpn-interface-reference;
        leaf-list supporting-dpn-id-set {
          type fpc:fpc-identity;
          description "DPNs that suppport this group";
        }
        leaf-list peer-srv-group-id-set {
          type fpc:fpc-identity;
          description "Set of Peer-Service-Group references";
        }
        description "A list of DPNs supporting a group 
          by DPN Type";
      }
      list peer-srv-group-set {
        key remote-srv-group-id;
        leaf remote-srv-group-id {
          type fpc:fpc-identity;
          mandatory true;
          description "Remote DPN Group identifier";
        }
        uses fpc:interface-settings;
        description "Locally applied settings used for 
          the referenced Peer-Service-Group.";
      }
      leaf domain-id {
        type fpc:fpc-identity;
        description "Domain Identifier";
      }
      description "List of DPN groups";
    }
    list domain-set {
      key domain-id;
      leaf domain-id {
        type fpc:fpc-identity;
        mandatory true;
        description "Domain Identifier";
      }
      leaf domain-name {
        type string;
        description "Domain displayname";
      }
      leaf domain-reference {
        type string;
        description "Reference to domain resources";
      }
      description "List of Domains";
    }
    description "FPC Topology grouping";
  }
  // Policy Structures
    // Descriptor Structure
    identity fpc-descriptor-type {
        description "A traffic descriptor";
    }
    grouping descriptor-definition {
        leaf descriptor-id {
            type fpc:fpc-identity;
            mandatory true;
            description "Descriptor Id";
        }
        leaf descriptor-type {
            type identityref {
              base "fpc-descriptor-type";
            }
            description "Descriptor Type Value";
        }
    uses fpcbase:fpc-descriptor-value;
        description "FPC Descriptor Definition";
    }
    // Action Structure
    identity fpc-action-type {
        description "Action Type";
    }
    grouping action-definition {
        leaf action-id {
            type fpc:fpc-identity;
            description "Action Identifier";
        }
        leaf action-type {
            type identityref {
              base "fpc-action-type";
            }
            description "Action Type";
        }
        uses fpcbase:fpc-action-value;
        description "FPC Action Definition";
    }
    // Rule Structure
    typedef fpc-direction-type {
       type enumeration {
         enum uplink {
           description "uplink";
         }
         enum downlink {
           description "Downlink";
         }
         enum both {
           description "Both";
        }
       }
       description "FPC Direction";
    }
    grouping fpc-rule-id {
    leaf rule-id {
      type fpc:fpc-identity;
      mandatory true;
      description "Rule Identifier";
    }
    description "FPC Rule-Id key";
    }
    grouping match-type {
        leaf descriptor-match-type {
          type enumeration {
            enum or { 
              value 0;
              description "OR logic";
            }
            enum and {
              value 1;
              description "AND logic";
            }
          }
          mandatory true;
          description "Type of Match (OR or AND) applied to the 
            descriptor-reference-set.";
      }
        description "Map Type Grouping";
    }
    grouping fpc-action-order {
        leaf action-order {
            type uint32;
            mandatory true;
            description "Action Execution Order";
        }
        description "Action Order Leaf";
    }
    grouping rule-definition {
        uses fpc:fpc-rule-id;
    uses fpc:match-type;
        list descriptor-reference-set {
          key "descriptor-id-reference";
          leaf descriptor-id-reference {
              type fpc:fpc-identity;
              mandatory true;
              description "Descriptor Id Reference";
          }
          leaf direction {
              type fpc:fpc-direction-type;
              description "Direction";
          }
          description "A set of Descriptor references";
        }
        list action-reference-set {
          key "action-order";
      uses fpc:fpc-action-order;
          leaf action-id-reference {
      type fpc:fpc-identity;
      mandatory true;
      description "Action Identifier Reference";
          }
          description "A set of Action references";
        }
        description
          "Rule.Definition";
    }
    // Policy Structures
    grouping fpc-precedence {
    leaf precedence {
      type uint32;
      mandatory true;
      description "Rule Precedence";
    }
    description "FPC Rule Precedence";
    }
    grouping policy {
        leaf policy-id {
            type fpc:fpc-identity;
            description "Policy Identifier";
        }
        list rule-set {
            key "precedence";
            unique "rule-id-reference";
            uses fpc:fpc-precedence;
            leaf rule-id-reference {
                type fpc:fpc-identity;
                mandatory true;
                description "Rule Identifier";
            }
            description "Rule Entry";
        }
        description "FPC Policy";
    }
    // FPC Policy
  grouping fpc-policy {
    list action-definition-set {
      key action-id;
      uses fpc:action-definition;
      description "List of Actions";
    }
    list descriptor-definition-set {
      key descriptor-id;
      uses fpc:descriptor-definition;
      description "List of Descriptors";
    }
    list rule-definition-set {
      key rule-id;
      uses fpc:rule-definition;
      description "List of Rules";
    }
    list policy-definition-set {
      key policy-id;
      uses fpc:policy;
      description "List of Policies";
    }
    description "FPC Policy Structures";
  }
    // Mobility Structures
  grouping configurable-policy-set {
    list installed-policy-list {
      key dpn-id-reference;
      leaf dpn-id-reference {
        type fpc:fpc-identity;
        description "Installed Policy identifier";
      }
      list installed-policy-set {
        key installed-policy-id;
        leaf installed-policy-id {
          type fpc:fpc-identity;
          description "Installed Policy Identifier";
        }
        leaf policy-id-reference {
          type fpc:fpc-identity;
          description "Installed Policy Identifier";
        }
        container policy-settings {
          uses fpcbase:fpc-settings;
          description "Policy Settings";
        }
        description "Policy installed upon a DPN";
      }
      description "Configurable Policy";
      uses fpc:settings;
    }
    description "List of installed DPN policies and settings";
  }
    // Dynamic Policy
    grouping mobility-context {
    leaf mobility-context-id {
      type fpc:fpc-identity;
      mandatory true;
      description "Mobility Context Identifier";
    }
    leaf srv-group-id-reference {
      type fpc:fpc-identity;
      description "Group ID used when DPN selecitons were 
        made";
    }
    leaf parent-mobility-context-id-reference {
      type fpc:fpc-identity;
      description "Parent Mobility Context";
    }
    list dpn-reference-list {
      key "dpn-id-reference direction";
      leaf dpn-id-reference {
        type fpc:fpc-identity;
        mandatory true;
        description "DPN Id reference";
      }
      leaf direction {
        type fpc:fpc-direction-type;
        mandatory true;
        description "Direction of DPN assignment";
      }
      container complementary-dpn-settings {
        uses fpcbase:fpc-settings;
        description "Complementary Settings";
      }
      leaf interface-id-reference {
        type fpc:fpc-interface-id;
        mandatory true;
        description "referenced interface";
      }
      list embedded-rule-set {
        key "precedence";
        unique "rule-id";
        uses fpc:fpc-rule-id;
        uses fpc:match-type;
        uses fpc:fpc-precedence;
        list action-definition-set {
          key "action-order";
          uses fpc:fpc-action-order;
          uses fpc:action-definition;
          description "List of Actions";
        }
        list descriptor-definition-set {
          key descriptor-id;
          uses fpc:descriptor-definition;
          description "List of Descriptors";
        }
        description "List of FPC Embedded Rule Definitions";
      }
      leaf-list assigned-policy-reference-set {
        type fpc:fpc-identity;
        description "List of Policies request to be enforced for 
          this Mobility Context";
      }
      description "DPN List";
    }
    
    leaf-list requested-policy-reference-set {
      type fpc:fpc-identity;
      description "List of Policies request to be enforced for 
        this Mobility Context";
    }
    container complementary-context-settings {
      uses fpcbase:fpc-settings;
      description "Context Settings";
    }
    description "Mobility Context";
    }
    // Events, Probes & Notifications
  identity event-type {
    description "Base Event Type";
  }
  typedef event-type-id {
    type uint32;
    description "Event ID Type";
  }
  grouping monitor-id {
    leaf monitor-id {
      type fpc:fpc-identity;
      mandatory true;
      description "Monitor Identifier";
    }
    description "Monitor Id";
  }
    grouping monitor-config {
        uses fpc:monitor-id;
    leaf deterrable {
      type boolean;
      description "Indicates reports related to this
        config can be delayed.";
    }
    container binding-information {
      description "Placeholder for information helpful
        to binding the monitor ot the correct target";
    }
    uses fpc:target-value;
    choice configuration {
      mandatory true;
      case periodic-config {
        leaf period {
          type uint32;
          description "Period";
        }
        description "Periodic Config Case";
      }
      case threshold-config {
        leaf lo-thresh {
          type uint32;
          description "lo threshold";
        }
        leaf hi-thresh {
          type uint32;
          description "hi threshold";
        }
        description "Threshold Config Case";
      }
      case scheduled-config {
        leaf report-time {
          type uint32;
          description "Reporting Time";
        }
        description "Scheduled Config Case";
      }
      case events-config-ident {
        leaf-list event-identities {
          type identityref {
            base "fpc:event-type";
          }
          description "Event Identities";
        }
        description "Events Config Identities Case";
      }
      case events-config {
        leaf-list event-ids {
          type uint32;
            description "Event IDs";
        }
        description "Events Config Case";
      }
      description "Event Config Value";
    }
    description "Monitor Configuration";
  }
    grouping report {
      uses fpc:monitor-config;
      choice report-value {
        leaf trigger {
          type fpc:event-type-id;
          description "Trigger Identifier";
        }
        case simple-empty {
          leaf nothing {
            type empty;
            description "Empty Value";
          }
          description "Empty Case";
        }
        case simple-val32 {
          leaf val32 {
            type uint32;
            description "Unsigned 32 bit value";
          }
          description "Simple Value Case";
        }
        case list-simple-val32 {
            leaf-list  val32-list {
              type uint32;
              description "Unsigned 32 bit value";
            }
            description "Simple Value Case";
          }
        description "Report Value";
      }
      description "Monitor Report";
    }
    typedef agent-identifier {
        type fpc:fpc-identity;
        description "Agent Identifier";
    }
    typedef client-identifier {
        type fpc:fpc-identity;
        description "Client Identifier";
    }
    grouping basename-info {
          leaf basename {
            type fpc:fpc-identity;
            description "Rules Basename";
          }
          leaf base-state {
            type string;
            description "Current State";
          }
          leaf base-checkpoint {
            type string;
            description "Checkpoint";
          }
          description "Basename Information";
    }
    // Top Level Structures
  container tenants {
    list tenant {
      key "tenant-id";
      leaf tenant-id {
          type fpc:fpc-identity;
          description "Tenant ID";
      }
          container mobility {
           container topology {
              uses fpc:fpc-topology;
             uses fpc:basename-info {
               if-feature fpc:fpc-basename-registry;
             }
              description "Topology";
            }
           container policy {
             uses fpc:fpc-policy;
             uses fpc:basename-info {
               if-feature fpc:fpc-basename-registry;
             }
             description "Policy";
           }
            uses fpc:configurable-policy-set;
            list mobility-context-set {
                key "mobility-context-id";
                config false;
                uses fpc:mobility-context;
                description "Mobility Context Set";
            }
            list monitor-set {
              key monitor-id;
              uses fpc:monitor-config;
              description "Monitor Configurations";
            }
            description "Mobility Elements";
          }
      description "Tenant";
    }
    description "Tenant List";
  }
    // RPC
    // RPC Specific Structures
    typedef op-identifier {
        type uint64;
        description "Operation Identifier";
    }
    typedef ref-scope {
      type enumeration {
        enum none {
          value 0;
          description "no references";
        }
        enum op {
          value 1;
          description "All references are intra-operation";
        }
        enum bundle {
          value 2;
          description "All references in exist in bundle";
        }
        enum storage {
          value 3;
          description "One or more references exist in storage.";
        }
        enum unknown {
          value 4;
          description "The location of the references are unknown.";
        }
      }
      description "Search scope for references in the operation.";
    }
    grouping context-operation {
      uses fpc:mobility-context;
      uses fpcbase:instructions;
      description "Context Operation";
    }
    grouping payload {
        uses fpc:configurable-policy-set;
    list mobility-context-set {
        key "mobility-context-id";
        uses fpc:mobility-context;
        description "Mobility Context Set";
    }
    uses fpc:fpc-policy;
    description "Payload";
  }
    grouping op-header {
    leaf client-id {
      type fpc:client-identifier;
      mandatory true;
      description "Client ID";
    }
    leaf delay {
      type uint32;
      description "Operation Delay (ms)";
    }
    leaf op-id {
      type op-identifier;
      mandatory true;
      description "Operation Identifier";
    }
    description "Common Operation header";
    }
  grouping fpc-op-type {
    leaf op-type {
      type enumeration {
        enum create {
          value 0;
          description "create";
        }
        enum update {
          value 1;
          description "update";
        }
        enum query {
          value 2;
          description "query";
        }
        enum delete {
          value 3;
          description "delete";
        }
      }
      mandatory true;
      description "Type";
    }
    description "FPC Operation Type";
  }
  grouping fpc-op-ref-scope {
    leaf op-ref-scope {
      if-feature operation-ref-scope;
      type fpc:ref-scope;
      description "Reference Scope";
    }
    description "FPC OP-REF Scope";
  }
  grouping op-input {
    uses fpc:fpc-op-ref-scope;
    uses fpcbase:instructions;
    choice op_body {
      case create_or_update {
        uses fpc:payload;
        description "Create/Update input";
      }
      case delete_or_query {
        uses fpc:target-value;
        description "Delete/Query input";
      }
      description "Opeartion Input value";
    }
    description "Operation Input";
  }
  typedef result-status {
    type enumeration {
      enum ok {
        value 0;
        description "OK";
      }
      enum err {
        value 1;
        description "Error";
      }
    }
    description "Result Status";
  }
  grouping status-value {
    leaf op-id {
      type op-identifier;
      mandatory true;
      description "Operation Identifier";
    }
    leaf status {
      type result-status;
      mandatory true;
      description "Status";
    }    
    description "Status value for all messages";
  }
  grouping result {
    uses fpc:status-value;
    uses fpc:result-body;
    description "General Result grouping";
  }
  grouping result-body {
    leaf notify-follows {
      type boolean;
      description "Indicates that a notification will 
        follow regarding this result";
    }
    choice result-type {
      case err {
        uses restconf:errors;
        description "Error Information";
      }
      case create-or-update-success {
        uses fpc:payload;
        description "Create/Update Success";
      }
      case delete_or_query-success {
        uses fpc:target-value;
        description "Delete/Query Success";
      }
      case empty-case {
        description "Empty Case";
      }
      description "Result Value";
    }
    description "Common Result member body";
  }
  // Common RPCs
  rpc configure {
    description "CONF message";
    input {
      uses fpc:op-header;
      uses fpc:fpc-op-type;
      uses fpc:op-input;
    }
    output {
      uses fpc:result;
    }
  }
  rpc configure-bundles {
    if-feature fpc:fpc-bundles;
    description "CONF_BUNDLES message";
    input {
      uses fpc:op-header;
      uses fpc:fpc-op-type;
      uses fpc:fpc-op-ref-scope;
      list bundles {
        key op-id;
        leaf op-id {
          type op-identifier;
          mandatory true;
          description "Operation Identifier";
        }
        uses fpc:op-input;
        description "List of operations";
      }
    }
    output {
      uses fpc:status-value;
      list bundles {
        key op-id;
        uses fpc:result;
        description "Operation Identifier";
      }
    }
  }
  rpc reg_monitor {
    description "Used to register monitoring of parameters/events";
    input {
      uses fpc:op-header;
      uses fpc:monitor-config;
    }
    output {
      uses fpc:status-value;
      uses restconf:errors;
    }
  }
  rpc dereg_monitor {
    description "Used to de-register monitoring of
      parameters/events";
    input {
      uses fpc:op-header;
      leaf-list monitor-set {
        type fpc:fpc-identity;
        min-elements 1;
        description "Monitor Identifier";
      }
      leaf send_data {
        type boolean;
        description "Indicates if NOTIFY with final data 
          is desired upon deregistration";
      }
    }
    output {
      uses fpc:status-value;
      uses restconf:errors;
    }
  }
  rpc probe {
    description "Probe the status of a registered monitor";
    input {
      uses fpc:op-header;
      uses fpc:monitor-id;
    }
    output {
      uses fpc:status-value;
      uses restconf:errors;
    }
  }
  // Notification Messages & Structures
  grouping notification-header {
    leaf notification-id {
      type uint32;
      description "Notification Identifier";
    }
    leaf timestamp {
      type uint32;
      description "timestamp";
    }
    description "Notification Header";
  }
  notification config-result-notification {
    uses fpc:notification-header;
    uses fpc:status-value;
    choice value {
      case config-result {
        uses result-body;
        description "CONF Result";
      }
      case config-bundle-result {
        list bundles {
          key op-id;
          uses fpc:result;
          description "Operation Identifier";
        }
        description "CONF_BUNDLES Result";
      }
      description "Config Result value";
    }
    description "CONF/CONF_BUNDLES Async Result";
  }
  identity notification-cause {
    description "Notification Cause";
  }
  identity dpn-availabilty-change {
    base "notification-cause";
    description "DPN Candidate/Exisitng DPN Availablity Change";
  }
  identity monitoring-suspension {
    base "notification-cause";
    description "Indicates monitoring suspension";
  }
  identity monitoring-resumption {
    base "notification-cause";
    description "Indicates that monitoring has resumed";
  }
  identity monitor-notification {
    base "notification-cause";
    description "Indicates 1+ monitor reports";
  }
  notification notify {
    uses fpc:notification-header;
    leaf cause {
      type identityref {
        base "notification-cause";
      }
      description "Notification Cause";
    }
    choice value {
      case dpn-candidate-available {
        if-feature fpc:fpc-auto-binding;
        leaf node-id {
          type inet:uri;
          description "Topology URI";
        }
        list supported-interface-list {
          key "access-technology role";
          uses fpc:access-technology-key;
          uses fpc:role-key;
          description "Support Intefaces";
        }
        description "DPN Candidate Information";
      }
      case dpn-unavailable {
        leaf dpn-id {
          type fpc:fpc-identity;
          description "DPN Identifier";
        }
        description "DPN Unavailable";
      }
      case monitor-notification {
        list reports {
          uses fpc:report;
          description "Reports";
        }
        description "Monitor Notification";
      }
      description "Notify Value";
    }
    description "Notify Message";
  }
}
<CODE ENDS>]]></artwork>
        </figure>
    </section>

    <section anchor="yangmodels" title="YANG Models">
        <section anchor="description"
                 title="FPC YANG Settings and Extensions Model">
        <t> This module defines the base data elements in FPC that are likely
            to be extended.</t>
        <t> This module references <xref target="RFC6991"/>,
            ietf-trafficselector-types and ietf-pmip-qos modules.</t>
        <figure>
          <artwork><![CDATA[
<CODE BEGINS> file "ietf-dmm-fpc-settingsext@2017-09-27.yang"
module ietf-dmm-fpc-settingsext {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-dmm-fpc-settingsext";
  prefix fpcbase;
  
    import ietf-inet-types { prefix inet; 
        revision-date 2013-07-15; }
    import ietf-trafficselector-types { prefix traffic-selectors; 
        revision-date 2017-10-29; }
    import ietf-yang-types { prefix ytypes;
        revision-date 2013-07-15; }
    import ietf-pmip-qos { prefix pmipqos;
        revision-date 2016-02-10; }

    organization "IETF Distributed Mobility Management (DMM)
      Working Group";

    contact
       "WG Web:   <http://tools.ietf.org/wg/netmod/>
        WG List:  <mailto:netmod@ietf.org>

        WG Chair: Dapeng Liu
                  <mailto:maxpassion@gmail.com>

        WG Chair: Sri Gundavelli
                  <mailto:sgundave@cisco.com>

        Editor:   Satoru Matsushima
                  <mailto:satoru.matsushima@g.softbank.co.jp>

        Editor:   Lyle Bertz
                  <mailto:lylebe551144@gmail.com>";

    description
    "This module contains YANG definition for
     Forwarding Policy Configuration Protocol(FPCP).

      It contains Settings definitions as well as Descriptor and 
      Action extensions.
      
     Copyright (c) 2016 IETF Trust and the persons identified as the
     document authors. All rights reserved.

     This document is subject to BCP 78 and the IETF Trust's Legal
     Provisions Relating to IETF Documents
     (http://trustee.ietf.org/license-info) in effect on the date of
     publication of this document. Please review these documents
     carefully, as they describe your rights and restrictions with
     respect to this document. Code Components extracted from this
     document must include Simplified BSD License text as described
     in Section 4.e of the Trust Legal Provisions and are provided
     without warranty as described in the Simplified BSD License.";
    
    revision 2017-09-27 {
    description "Version 10 updates.";
    reference "draft-ietf-dmm-fpc-cpdp-10";
}
revision 2017-07-22 {
    description "Version 08 updates.";
    reference "draft-ietf-dmm-fpc-cpdp-08";
}
revision 2017-03-08 {
    description "Version 06 updates.";
    reference "draft-ietf-dmm-fpc-cpdp-06";
}
revision 2016-08-03 {
    description "Initial Revision.";
    reference "draft-ietf-dmm-fpc-cpdp-05";
}

    // Next Hop Structures - SETTING
    typedef fpc-service-path-id {
        type uint32 {
            range "0..33554431";
        }
        description "SERVICE_PATH_ID";
    }
    typedef fpc-mpls-label {
        type uint32 {
          range "0..1048575";
        }
        description "MPLS label";
    }
    identity fpc-nexthop-type {
        description "NAT Service";
    }
    
    grouping fpc-nexthop {
        leaf nexthop-type {
            type identityref {
              base "fpcbase:fpc-nexthop-type";
            }
            mandatory true;
            description "Nexthop Type";
        }
        choice nexthop-value {
              mandatory true;
            case ip-nexthop {
                leaf ip {
                  type inet:ip-address;
                  description "IP Value";
                }
                description "IP Case";
            }
            case macaddress-nexthop {
                leaf macaddress {
                  type ytypes:mac-address;
                  description "MAC Address Value";
                }
            }
            case servicepath-nexthop {
                leaf servicepath {
                    type fpcbase:fpc-service-path-id;
                    description "Service Path Value";
                }
                description "Service Path Case";
            }
            case mplslabel-nexthop {
                leaf lsp {
                    type fpcbase:fpc-mpls-label;
                    description "MPLS Value";
                }
                description "Service Path Case";
            }
            case if-nexthop {
                leaf if-index {
                    type uint16;
                    description "If (interface) Value";
                }
                description "Service Path Case";
            }
            description "Value";
        }
        description "Nexthop Value";
    }

    // Address Translation - ACTION
    grouping simple-nat {
      leaf outbound-nat-address {
        type inet:ip-address;
        description "Outbound NAT Address";
      }
      description "Simple NAT value";
    }
    grouping simple-napt {
      leaf source-port {
        type inet:port-number;
        description "Source Port";
      }
      leaf outbound-napt-address {
        type inet:ip-address;
        description "Outbound NAPT Address";
      }
      leaf destination-port {
        type inet:port-number;
        description "Destination Port";
      }
      description "Simple NAPT Configuration";
    }

    // COPY FORWARD - ACTION
    grouping copy-forward {
      container destination {
        choice value {
          case nexthop-case {
      container nexthop {
              uses fpcbase:fpc-nexthop;
              description "Next Hop";
          }
            description "Port Forward Case";
          }
          description "Copy Forward Value";
        }
        description "destination";
      }
      description "Copy Then Forward to Port/Context Action";
    }

    //////////////////////////////
    // PMIP Integration         //
      identity pmip-tunnel-type {
          description "PMIP Tunnel Type";
      }
      identity grev1 {
          base "pmip-tunnel-type";
          description "GRE v1";
      }
      identity grev2 {
          base "pmip-tunnel-type";
          description "GRE v2";
      }
      identity ipinip {
          base "pmip-tunnel-type";
          description "IP in IP";
      }
      grouping pmip-tunnel-info {
          leaf pmip-tunnel-type {
              type identityref {
                  base "pmip-tunnel-type";
              }
              description "PMIP Mobility";
          }
          choice pmip-tunnel-value {
              case gre {
                  leaf gre-key {
                      type uint32;
                      description "GRE_KEY";
                  }
                  description "GRE Value";
              }
              description "PMIP Mobility value";
          }
          uses traffic-selectors:traffic-selector;
          description "PMIP Tunnel Information";
      }
      typedef pmip-commandset {
            type bits {
                bit assign-ip {
                  position 0;
                  description "Assign IP";
                }
                bit assign-dpn {
                  position 1;
                  description "Assign DPN";
                }
                bit session {
                  position 2;
                  description "Session Level";
                }
                bit uplink {
                  position 3;
                  description "Uplink";
                }
                bit downlink {
                  position 4;
                  description "Downlink";
                }
            }
            description "PMIP Instructions";
        }
    ///////////////////////////////
    // 3GPP Integration         //
  //    Tunnel Types
      identity threeGPP-tunnel-type {
          description "3GPP Base Tunnel Type";
      }
      identity gtpv1 {
          base "fpcbase:threeGPP-tunnel-type";
          description "GTP version 1 Tunnel";
      }
      identity gtpv2 {
          base "fpcbase:threeGPP-tunnel-type";
          description "GTP version 2 Tunnel";
      }
      // QoS Profile
      typedef fpc-qos-class-identifier {
          type uint8 {
              range "1..9";
          }
          description "QoS Class Identifier (QCI)";
      }
      grouping threeGPP-QoS {
          description "3GPP QoS Attributes";
          leaf qci {
              type fpc-qos-class-identifier;
              description "QCI";
          }
          leaf gbr {
              type uint32;
              description "Guaranteed Bit Rate";
          }
          leaf mbr {
              type uint32;
              description "Maximum Bit Rate";
          }
          leaf apn-ambr {
              type uint32;
              description "Access Point Name Aggregate Max Bit Rate";
          }
          leaf ue-ambr {
              type uint32;
              description "User Equipment Aggregate Max Bit Rate";
          }
          container arp {
              uses pmipqos:Allocation-Retention-Priority-Value;
              description "Allocation Retention Priority";
          }
      }
      typedef ebi-type {
        type uint8 {
          range "0..15";
        }
        description "EUTRAN Bearere Identifier (EBI) Type";
      }

     // From 3GPP TS 24.008 version 13.5.0 Release 13
     typedef component-type-enum {
          type enumeration {
              enum ipv4RemoteAddress {
                value 16;
                description "IPv4 Remote Address";
              }
              enum ipv4LocalAddress  {
                value 17;
                description "IPv4 Local Address";
              }
              enum ipv6RemoteAddress {
                value 32;
                description "IPv6 Remote Address";
              }
              enum ipv6RemoteAddressPrefix {
                value 33;
                description "IPv6 Remote Address Prefix";
              }
              enum ipv6LocalAddressPrefix {
                value 35;
                description "IPv6 Local Address Prefix";
              }
              enum protocolNextHeader {
                value 48;
                description "Protocol (IPv4) or NextHeader (IPv6)
                  value";
              }
              enum localPort {
                value 64;
                description "Local Port";
              }
              enum localPortRange {
                value 65;
                description "Local Port Range";
              }
              enum reomotePort {
                value 80;
                description "Remote Port";
              }
              enum remotePortRange {
                value 81;
                description "Remote Port Range";
              }
              enum secParamIndex {
                value 96;
                description "Security Parameter Index (SPI)";
              }
              enum tosTraffClass {
                value 112;
                description "TOS Traffic Class";
              }
              enum flowLabel {
                value 128;
                description "Flow Label";
              }
          }
          description "TFT Component Type";
      }
      typedef packet-filter-direction {
          type enumeration {
            enum preRel7Tft {
              value 0;
              description "Pre-Release 7 TFT";
            }
            enum uplink {
              value 1;
              description "uplink";
            }
            enum downlink {
              value 2;
              description "downlink";
            }
            enum bidirectional {
              value 3;
              description "bi-direcitonal";
            }
          }
          description "Packet Filter Direction";
      }
      typedef component-type-id {
          type uint8 {
            range "16 | 17 | 32 | 33 | 35 | 48 | 64 | 65 |"
            + " 80 | 81 | 96 | 112 | 128";
          }
          description "Specifies the Component Type";
      }
      grouping packet-filter {
        leaf direction {
            type fpcbase:packet-filter-direction;
            description "Filter Direction";
        }
        leaf identifier {
            type uint8 {
              range "1..15";
            }
            description "Filter Identifier";
        }
        leaf evaluation-precedence {
            type uint8;
            description "Evaluation Precedence";
        }
        list contents {
          key component-type-identifier;
          description "Filter Contents";
          leaf component-type-identifier {
              type fpcbase:component-type-id;
              description "Component Type";
          }
          choice value {
            case ipv4-local {
              leaf ipv4-local {
                type inet:ipv4-address;
                description "IPv4 Local Address";
              }
            }
            case ipv6-prefix-local {
              leaf ipv6-prefix-local {
                type inet:ipv6-prefix;
                description "IPv6 Local Prefix";
              }
            }
            case ipv4-ipv6-remote {
              leaf ipv4-ipv6-remote {
                type inet:ip-address;
                description "Ipv4 Ipv6 remote address";
              }
            }
            case ipv6-prefix-remote {
              leaf ipv6-prefix-remote {
                type inet:ipv6-prefix;
                description "IPv6 Remote Prefix";
              }
            }
            case next-header {
              leaf next-header {
                type uint8;
                description "Next Header";
              }
            }
            case local-port {
              leaf local-port {
                type inet:port-number;
                description "Local Port";
              }
            }
            case local-port-range {
              leaf local-port-lo {
                type inet:port-number;
                description "Local Port Min Value";
              }
              leaf local-port-hi {
                type inet:port-number;
                description "Local Port Max Value";
              }
            }
            case remote-port {
              leaf remote-port {
                type inet:port-number;
                description "Remote Port";
              }
            }
            case remote-port-range {
              leaf remote-port-lo {
                type inet:port-number;
                description "Remote Por Min Value";
              }
              leaf remote-port-hi {
                type inet:port-number;
                description "Remote Port Max Value";
              }
            }
            case ipsec-index {
              leaf ipsec-index {
                type traffic-selectors:ipsec-spi;
                description "IPSec Index";
              }
            }
            case traffic-class {
              leaf traffic-class {
                type inet:dscp;
                description "Traffic Class";
              }
            }
            case traffic-class-range {
                leaf traffic-class-lo {
                  type inet:dscp;
                  description "Traffic Class Min Value";
                }
                leaf traffic-class-hi {
                  type inet:dscp;
                  description "Traffic Class Max Value";
                }
            }
            case flow-label-type {
              leaf-list flow-label {
                type inet:ipv6-flow-label;
                description "Flow Label";
              }
            }
            description "Component Value";
          }
        }
        description "Packet Filter";
      }
      grouping tft {
        list packet-filters {
            key identifier;
            uses fpcbase:packet-filter;
            description "List of Packet Filters";
        }
        description "Packet Filter List";
      }
      typedef imsi-type {
          type uint64;
          description
              "International Mobile Subscriber Identity (IMSI)
                Value Type";
      }
      typedef threegpp-instr {
        type bits {
          bit assign-ip {
            position 0;
            description "Assign IP Address/Prefix";
          }
          bit assign-fteid-ip {
            position 1;
            description "Assign FTEID-IP";
          }
          bit assign-fteid-teid {
            position 2;
            description "Assign FTEID-TEID";
          }
          bit session {
            position 3;
            description "Commands apply to the Session Level";
          }
          bit uplink {
            position 4;
            description "Commands apply to the Uplink";
          }
          bit downlink {
            position 5;
            description "Commands apply to the Downlink";
          }
          bit assign-dpn {
            position 6;
            description "Assign DPN";
          }
        }
        description "Instruction Set for 3GPP R11";
      }
      
      grouping threegpp-tunnel-info {
          leaf tunnel-type {
              type identityref  {
                base "fpcbase:threeGPP-tunnel-type";
              }
              description "3GPP Tunnel Subtype";
          }
          leaf tunnel-identifier {
              type uint32;
              description "Tunnel Endpoint IDentifier (TEID)";
          }
          choice tft-or-ref {
            case defined-tft {
              uses fpcbase:tft;
            }
            description "TFT Value";
          }
          description "3GPP TFT and Tunnel Information";
        }
      
      grouping threegpp-properties {
          leaf imsi {
            type fpcbase:imsi-type;
            description "IMSI";
          }
          leaf ebi {
            type fpcbase:ebi-type;
            description "EUTRAN Bearere Identifier (EBI)";
          }
          leaf lbi {
            type fpcbase:ebi-type;
            description "Linked Bearer Identifier (LBI)";
          }
          description "3GPP Mobility Session Properties";
        }
    //////////////////////////////
    // ACTION VALUE AUGMENTS
    grouping fpc-action-value {
        choice action-value {
            mandatory true;
            case drop {
              leaf drop {
                type empty;
                description "Drop Traffic";
              }
            }
            case simple-nat {
                uses fpcbase:simple-nat;
                description "Simple NAT value";
            }
            case simple-napt {
                uses fpcbase:simple-napt;
                description "Simple NAPT Value";
            }
            case copy-forward {
                uses fpcbase:copy-forward;
                description "Copy Forward Value";
            }
            case pmip-selector {
                uses traffic-selectors:traffic-selector;
                description "PMIP Selector";
            }
            description "Action Value";
        }
        description "FPC Action Value";
    }

    //////////////////////////////
    // DESCRIPTOR DEFINITIONS
  grouping fpc-descriptor-value {
    choice descriptor-value {
      mandatory true;
      case all-traffic {
        leaf all-traffic {
          type empty;
          description "admit any";
        }
      }
      case no-traffic {
        leaf no-traffic {
          type empty;
          description "deny any";
        }
      }
      case prefix-descriptor {
        leaf destination-ip {
          type inet:ip-prefix;
          description "Rule of destination IP";
        }
        leaf source-ip {
          type inet:ip-prefix;
          description "Rule of source IP";
        }
        description "Traffic descriptor based upon source/
          destination as IP prefixes";
      }
      case pmip-selector {
        uses traffic-selectors:traffic-selector;
        description "PMIP Selector";
      }
      case threegpp-tft {
          uses fpcbase:tft;
          description "3GPP TFT";
      }
      description "Descriptor Value";
    }
    description "FPC Descriptor Values";
  }
    
    //SETTINGS DEFINITIONS
    grouping fpc-settings {
        leaf-list delegated-ip-prefixes {
            type inet:ip-prefix;
            description "Delegated Prefix(es)";
        }
        leaf tunnel-local-address {
            type inet:ip-address;
            description "local tunnel address";
        }
        leaf tunnel-remote-address {
            type inet:ip-address;
            description "remote tunnel address";
        }
        leaf mtu-size {
            type uint32;
            description "MTU size";
        }
        container mobility-tunnel-parameters {
            choice profile-parameters {
                case nothing {
                  leaf none {
                    type empty;
                    description "Empty Value";
                  }
                  description "No Parameters Case";
                }
        case pmip {
          uses pmip-tunnel-info;
        }
        case threegpp {
          uses threegpp-tunnel-info;
          uses threegpp-properties;
        }
                description "Mobility Profile Parameters";
            }
            description
            "Profile specific tunnel parameters";
        }
        container nexthop {
            uses fpcbase:fpc-nexthop;
            description "Next Hop";
        }
        container qos-profile-parameters {
            choice value {
                description "QoS Value";
            }
            description "QoS Parameters";
        }
        description "A collection of settings";
    }
    identity access-technology {
    description "The technology used in the access network";
  }
    identity role {
    description "The access-technology function of the DPN";
}
  identity ietf-pmip-access-type {
    base "fpcbase:access-technology";
    description "PMIP Access";
  }
  identity threeGPP-access-type {
    base "fpcbase:access-technology";
    description "3GPP Access Type";
  }
   // Instructions
  grouping instructions {
    container instructions {
      choice instr-type {
        case threegpp-instr {
          leaf instr-3gpp-mob {
            type fpcbase:threegpp-instr;
            description "3GPP GTP Mobility Instructions";
          }
        }
        case pmip-instr {
          leaf instr-pmip {
            type pmip-commandset;
            description "PMIP Instructions";
          }
        }
        description "Instruction Value Choice";
      }
      description "Instructions";
    }
    description "Instructions Value";
  }
}
<CODE ENDS>]]></artwork>
            </figure>
        </section>

        <section anchor="ietf-pmip-qos" title="PMIP QoS Model">
        <t> This module defines the base protocol elements specified in
            this document.</t>
        <t> This module references <xref target="RFC6991"/>.</t>
        <figure>
          <artwork><![CDATA[
<CODE BEGINS> file "ietf-pmip-qos@2017-10-29.yang"
module ietf-pmip-qos {
    yang-version 1.1;

    namespace
      "urn:ietf:params:xml:ns:yang:ietf-pmip-qos";

    prefix "qos-pmip";

    import ietf-inet-types {
      prefix inet;
      revision-date 2013-07-15;
    }
    import ietf-trafficselector-types { prefix traffic-selectors; }

    organization "IETF Distributed Mobility Management (DMM)
      Working Group";

    contact
       "WG Web:   <http://tools.ietf.org/wg/netmod/>
        WG List:  <mailto:netmod@ietf.org>

        WG Chair: Dapeng Liu
                  <mailto:maxpassion@gmail.com>

        WG Chair: Sri Gundavelli
                  <mailto:sgundave@cisco.com>

        Editor:   Satoru Matsushima
                  <mailto:satoru.matsushima@g.softbank.co.jp>

        Editor:   Lyle Bertz
                  <mailto:lylebe551144@gmail.com>";

    description
      "This module contains a collection of YANG definitions for
     quality of service paramaters used in Proxy Mobile IPv6.

     Copyright (c) 2016 IETF Trust and the persons identified as the
     document authors. All rights reserved.

     This document is subject to BCP 78 and the IETF Trust's Legal
     Provisions Relating to IETF Documents
     (http://trustee.ietf.org/license-info) in effect on the date of
     publication of this document. Please review these documents
     carefully, as they describe your rights and restrictions with
     respect to this document. Code Components extracted from this
     document must include Simplified BSD License text as described
     in Section 4.e of the Trust Legal Provisions and are provided
     without warranty as described in the Simplified BSD License.";

  revision 2017-10-29 {
     description "Base Version";
      reference
        "RFC 6088: Traffic Selectors for Flow Bindings";
   }

    // Type Definitions

    // QoS Option Field Type Definitions
  typedef sr-id {
    type uint8;
      description
       "An 8-bit unsigned integer used for identifying the QoS 
        Service Request.";
    }

    typedef traffic-class {
      type inet:dscp;
      description
        "Traffic Class consists of a 6-bit DSCP field followed by a
         2-bit reserved field.";
     reference
         "RFC 3289: Management Information Base for the 
             Differentiated Services Architecture
          RFC 2474: Definition of the Differentiated Services Field
                    (DS Field) in the IPv4 and IPv6 Headers
          RFC 2780: IANA Allocation Guidelines For Values In
                    the Internet Protocol and Related Headers";
    }

    typedef operational-code {
      type enumeration {
        enum RESPONSE {
          value 0;
          description "Response to a QoS request";
        }
        enum ALLOCATE {
          value 1;
          description "Request to allocate QoS resources";
        }
        enum DE-ALLOCATE {
          value 2;
          description "Request to de-Allocate QoS resources";
        }
        enum MODIFY {
          value 3;
          description "Request to modify QoS parameters for a
              previously negotiated QoS Service Request";
        }
        enum QUERY {
          value 4;
          description "Query to list the previously negotiated QoS
              Service Requests that are still active";
        }
        enum NEGOTIATE {
          value 5;
          description "Response to a QoS Service Request with a
            counter QoS proposal";
        }
      }
      description
       "The type of QoS request. Reserved values:   (6) to (255)
                Currently not used.  Receiver MUST ignore the option
                received with any value in this range.";
    }

    // QoS Attribute Types

    //The enumeration value for mapping - don't confuse with the
    //  identities
    typedef qos-attrubite-type-enum {
      type enumeration {
        enum Reserved {
          value 0;
          description "This value is reserved and cannot be used";
        }
        enum Per-MN-Agg-Max-DL-Bit-Rate {
          value 1;
          description "Per-Mobile-Node Aggregate Maximum Downlink
              Bit Rate.";
        }
        enum Per-MN-Agg-Max-UL-Bit-Rate {
          value 2;
          description "Per-Mobile-Node Aggregate Maximum Uplink Bit
            Rate.";
        }
        enum Per-Session-Agg-Max-DL-Bit-Rate {
          value 3;
          description "Per-Mobility-Session Aggregate Maximum
            Downlink Bit Rate.";
        }
        enum Per-Session-Agg-Max-UL-Bit-Rate {
          value 4;
          description "Per-Mobility-Session Aggregate Maximum
             Uplink Bit Rate.";
        }
        enum Allocation-Retention-Priority {
          value 5;
          description "Allocation and Retention Priority.";
        }
        enum Aggregate-Max-DL-Bit-Rate {
          value 6;
          description "Aggregate Maximum Downlink Bit Rate.";
        }
        enum Aggregate-Max-UL-Bit-Rate {
          value 7;
          description "Aggregate Maximum Uplink Bit Rate.";
        }
        enum Guaranteed-DL-Bit-Rate {
          value 8;
          description "Guaranteed Downlink Bit Rate.";
        }
        enum Guaranteed-UL-Bit-Rate {
          value 9;
          description "Guaranteed Uplink Bit Rate.";
        }
        enum QoS-Traffic-Selector {
          value 10;
          description "QoS Traffic Selector.";
        }
        enum QoS-Vendor-Specific-Attribute {
          value 11;
          description "QoS Vendor-Specific Attribute.";
        }
      }
     description
    "The type of the QoS attribute.  This specification reserves 
       the following reserved values.
         (12) to (254) -  Reserved
            These values are reserved for future allocation.

         (255)  Reserved
            This value is reserved and cannot be used.";
    }

    // Attribute Type as Identities
    // Added for convenience of inclusion and extension in
    //    other YANG modules.
    identity qos-attribute-type {
      description
        "Base type for Quality of Service Attributes";
    }

    identity Per-MN-Agg-Max-DL-Bit-Rate-type {
      base qos-attribute-type;
      description
        "Per-Mobile-Node Aggregate Maximum Downlink Bit Rate.";
    }

   identity Per-MN-Agg-Max-UL-Bit-Rate-type {
      base qos-attribute-type;
      description
        "Per-Mobile-Node Aggregate Maximum Uplink Bit Rate";
   }

   identity Per-Session-Agg-Max-DL-Bit-Rate-type {
      base qos-attribute-type;
      description
       "Per-Mobility-Session Aggregate Maximum Downlink Bit Rate.";
  }

   identity Per-Session-Agg-Max-UL-Bit-Rate-type {
      base qos-attribute-type;
      description
       "Per-Mobility-Session Aggregate Maximum Uplink Bit Rate.";
   }

   identity Allocation-Retention-Priority-type {
      base qos-attribute-type;
      description
        "Allocation and Retention Priority.";
   }

   identity Aggregate-Max-DL-Bit-Rate-type {
      base qos-attribute-type;
      description "Aggregate Maximum Downlink Bit Rate.";
   }

  identity Aggregate-Max-UL-Bit-Rate-type {
      base qos-attribute-type;
      description "Aggregate Maximum Uplink Bit Rate.";
  }

  identity Guaranteed-DL-Bit-Rate-type {
      base qos-attribute-type;
      description "Guaranteed Downlink Bit Rate.";
  }

  identity Guaranteed-UL-Bit-Rate-type {
      base qos-attribute-type;
      description "Guaranteed Uplink Bit Rate.";
  }

  identity QoS-Traffic-Selector-type {
      base qos-attribute-type;
      description "QoS Traffic Selector.";
  }

  identity QoS-Vendor-Specific-Attribute-type {
      base qos-attribute-type;
      description "QoS Vendor-Specific Attribute.";
  }

  //value definitions
  typedef Per-MN-Agg-Max-DL-Bit-Rate-Value {
      type uint32;
      description
          "The aggregate maximum downlink bit rate that is
          requested/allocated for all the mobile node's IP flows.
          The measurement units are bits per second.";
  }

   typedef Per-MN-Agg-Max-UL-Bit-Rate-Value {
      type uint32;
      description
        "The aggregate maximum uplink bit rate that is
            requested/allocated for the mobile node's IP flows. The
            measurement units are bits per second.";
   }

   // Generic Structure for the uplink and downlink
   grouping Per-Session-Agg-Max-Bit-Rate-Value {
     leaf max-rate {
       type uint32;
       mandatory true;
       description
       "The aggregate maximum bit rate that is requested/allocated 
     for all the IP flows associated with that mobility session.  
     The measurement units are bits per second.";
     }
     leaf service-flag {
      type boolean;
      mandatory true;
      description
       "This flag is used for extending the scope of the
        target flows for Per-Session-Agg-Max-UL/DL-Bit-Rate
        from(UL)/to(DL) the mobile node's other mobility sessions
        sharing the same Service Identifier.";
      reference
        "RFC 5149 - Service Selection mobility option";
     }
     leaf exclude-flag {
       type boolean;
       mandatory true;
       description
        "This flag is used to request that the uplink/downlink
       flows for which the network is providing
            Guaranteed-Bit-Rate service be excluded from the
            target IP flows for which
            Per-Session-Agg-Max-UL/DL-Bit-Rate is measured.";
     }
    description "Per-Session-Agg-Max-Bit-Rate Value";
   }

   grouping Allocation-Retention-Priority-Value {
     leaf prioirty-level {
       type uint8 {
         range "0..15";
       }
       mandatory true;
       description
        "This is a 4-bit unsigned integer value.  It is used to 
        decide whether a mobility session establishment or 
        modification request can be accepted; this is typically used
        for admission control of Guaranteed Bit Rate traffic in 
        case of resource limitations.";
     }
     leaf premption-capability {
       type enumeration {
        enum enabled {
          value 0;
          description "enabled";
        }
        enum disabled {
          value 1;
          description "disabled";
        }
        enum reserved1 {
          value 2;
          description "reserved1";
        }
        enum reserved2 {
          value 3;
          description "reserved2";
        }
       }
       mandatory true;
       description
       "This is a 2-bit unsigned integer value.  It defines whether a
        service data flow can get resources that were already
        assigned to another service data flow with a lower priority
        level.";
     }
     leaf premption-vulnerability {
       type enumeration {
        enum enabled {
          value 0;
          description "enabled";
        }
        enum disabled {
          value 1;
          description "disabled";
        }
        enum reserved1 {
          value 2;
          description "reserved1";
        }
        enum reserved2 {
          value 3;
          description "reserved2";
        }
       }
       mandatory true;
       description
       "This is a 2-bit unsigned integer value.  It defines whether a
         service data flow can lose the resources assigned to it in
         order to admit a service data flow with a higher priority
         level.";
     }
    description "Allocation-Retention-Priority Value";
   }

   typedef Aggregate-Max-DL-Bit-Rate-Value {
      type uint32;
      description
        "The aggregate maximum downlink bit rate that is
         requested/allocated for downlink IP flows.  The measurement
         units are bits per second.";
   }

    typedef Aggregate-Max-UL-Bit-Rate-Value {
      type uint32;
      description
        "The aggregate maximum downlink bit rate that is
         requested/allocated for downlink IP flows.  The measurement
         units are bits per second.";
    }

    typedef Guaranteed-DL-Bit-Rate-Value {
      type uint32;
      description
      "The guaranteed bandwidth in bits per second for downlink
        IP flows.  The measurement units are bits per second.";
    }

    typedef Guaranteed-UL-Bit-Rate-Value {
      type uint32;
      description
        "The guaranteed bandwidth in bits per second for uplink 
         IP flows.  The measurement units are bits per second.";
    }

    grouping QoS-Vendor-Specific-Attribute-Value-Base {
      leaf vendorid {
        type uint32;
        mandatory true;
        description
         "The Vendor ID is the SMI (Structure of Management
          Information) Network Management Private Enterprise Code of
          the IANA-maintained 'Private Enterprise Numbers'
          registry.";
        reference
          "'PRIVATE ENTERPRISE NUMBERS', SMI Network Management
            Private Enterprise Codes, April 2014,
             <http://www.iana.org/assignments/enterprise-numbers>";
      }
      leaf subtype {
        type uint8;
        mandatory true;
        description
          "An 8-bit field indicating the type of vendor-specific
           information carried in the option.  The namespace for this
           sub-type is managed by the vendor identified by the
           Vendor ID field.";
      }
      description
        "QoS Vendor-Specific Attribute.";
    }

    //NOTE - We do NOT add the Status Codes or other changes in
    // PMIP in this module

    //Primary Structures (groupings)
    grouping qosattribute {
        leaf attributetype {
            type identityref {
                base qos-attribute-type;
            }
            mandatory true;
            description "the attribute type";
        }

        //All of the sub-types by constraint
        choice attribute-choice {
            case per-mn-agg-max-dl-case {
                when "./attributetype = "
                   + "'Per-MN-Agg-Max-DL-Bit-Rate-type'";
                leaf per-mn-agg-max-dl {
                    type qos-pmip:Per-MN-Agg-Max-DL-Bit-Rate-Value;
                    description "Per-MN-Agg-Max-DL-Bit-Rate Value";
                }
                description "Per-MN-Agg-Max-DL-Bit-Rate Case";
            }
            case per-mn-agg-max-ul-case {
                when "./attributetype = "
                  + "'Per-MN-Agg-Max-UL-Bit-Rate-type'";
                leaf per-mn-agg-max-ul {
                    type qos-pmip:Per-MN-Agg-Max-UL-Bit-Rate-Value;
                    description "Per-MN-Agg-Max-UL-Bit-Rate Value";
                }
                description "Per-MN-Agg-Max-UL-Bit-Rate Case";
            }
            case per-session-agg-max-dl-case {
                when "./attributetype = "
                + "'Per-Session-Agg-Max-DL-Bit-Rate-type'";
                container per-session-agg-max-dl {
                    uses qos-pmip:Per-Session-Agg-Max-Bit-Rate-Value;
                    description "Per-Session-Agg-Max-Bit-Rate Value";
                }
                description "Per-Session-Agg-Max-Bit-Rate Case";
            }
            case per-session-agg-max-ul-case {
                when "./attributetype = "
                + "'Per-Session-Agg-Max-UL-Bit-Rate-type'";
                container per-session-agg-max-ul {
                    uses qos-pmip:Per-Session-Agg-Max-Bit-Rate-Value;
                    description "Per-Session-Agg-Max-Bit-Rate Value";
                }
                description "Per-Session-Agg-Max-Bit-Rate Case";
            }
            case allocation-retention-priority-case {
                when "./attributetype = "
                   + "'Allocation-Retention-Priority-type'";
                uses qos-pmip:Allocation-Retention-Priority-Value;
                description "Allocation-Retention-Priority Case";
            }
            case agg-max-dl-case {
                when "./attributetype = "
                  + "'Aggregate-Max-DL-Bit-Rate-type'";
                leaf agg-max-dl {
                    type qos-pmip:Aggregate-Max-DL-Bit-Rate-Value;
                    description "Aggregate-Max-DL-Bit-Rate Value";
                }
                description "Aggregate-Max-DL-Bit-Rate Case";
            }
            case agg-max-ul-case {
                when "./attributetype = "
                  + "'Aggregate-Max-UL-Bit-Rate-type'";
                leaf agg-max-ul {
                    type qos-pmip:Aggregate-Max-UL-Bit-Rate-Value;
                    description "Aggregate-Max-UL-Bit-Rate Value";
                }
                description "Aggregate-Max-UL-Bit-Rate Case";
            }
            case gbr-dl-case {
                when "./attributetype = 
                   'Guaranteed-DL-Bit-Rate-type'";
                leaf gbr-dl {
                    type qos-pmip:Guaranteed-DL-Bit-Rate-Value;
                    description "Guaranteed-DL-Bit-Rate Value";
                }
                description "Guaranteed-DL-Bit-Rate Case";
            }
            case gbr-ul-case {
                when "./attributetype = 
                 'Guaranteed-UL-Bit-Rate-type'";
                leaf gbr-ul {
                    type qos-pmip:Guaranteed-UL-Bit-Rate-Value;
                    description "Guaranteed-UL-Bit-Rate Value";
                }
                description "Guaranteed-UL-Bit-Rate Case";
            }
            case traffic-selector-case {
                when "./attributetype = 'QoS-Traffic-Selector-type'";
                container traffic-selector {
                    uses traffic-selectors:traffic-selector;
                    description "traffic selector";
                }
                description "traffic selector Case";
            }
            description "Attribute Value";
        }
        description "PMIP QoS Attribute";
    }

    grouping qosoption {
        leaf srid {
            type sr-id;
            mandatory true;
            description "Service Request Identifier";
        }
        leaf trafficclass {
            type traffic-class;
            mandatory true;
            description "Traffic Class";
        }
        leaf operationcode {
            type operational-code;
            mandatory true;
            description "Operation Code";
        }
        list attributes {
            unique "attributetype";
            uses qosattribute;
            min-elements 1;
            description "Attributes";
        }
        description "PMIP QoS Option";
    }
}
<CODE ENDS>]]></artwork>
        </figure>
    </section>

    <section anchor="ietf-trafficselectors-types"
	     title="Traffic Selectors YANG Model">
    <t> This module defines traffic selector types commonly used in Proxy
        Mobile IP (PMIP).</t>
    <t> This module references <xref target="RFC6991"/>.</t>
    <figure>
         <artwork><![CDATA[
<CODE BEGINS> file "ietf-trafficselector-types@2017-10-29.yang"
module ietf-trafficselector-types {
 yang-version 1.1;

 namespace
 "urn:ietf:params:xml:ns:yang:ietf-trafficselector-types";

 prefix "traffic-selectors";

 import ietf-inet-types {
   prefix inet;
   revision-date 2013-07-15;
 }

 organization "IETF Distributed Mobility Management (DMM)
 Working Group";

 contact
 "WG Web: <http://tools.ietf.org/wg/netmod/>
 WG List: <mailto:netmod@ietf.org>

 WG Chair: Dapeng Liu
 <mailto:maxpassion@gmail.com>

 WG Chair: Sri Gundavelli
 <mailto:sgundave@cisco.com>

 Editor: Satoru Matsushima
 <mailto:satoru.matsushima@g.softbank.co.jp>

 Editor: Lyle Bertz
 <mailto:lylebe551144@gmail.com>";

 description
 "This module contains a collection of YANG definitions for
 traffic selectors for flow bindings.

 Copyright (c) 2016 IETF Trust and the persons identified as the
 document authors. All rights reserved.

 This document is subject to BCP 78 and the IETF Trust's Legal
 Provisions Relating to IETF Documents
 (http://trustee.ietf.org/license-info) in effect on the date of
 publication of this document. Please review these documents
 carefully, as they describe your rights and restrictions with
 respect to this document. Code Components extracted from this
 document must include Simplified BSD License text as described
 in Section 4.e of the Trust Legal Provisions and are provided
 without warranty as described in the Simplified BSD License.";


  revision 2017-10-29 {
     description "Base Version";
      reference
        "RFC 6088: Traffic Selectors for Flow Bindings";
   }

 // Identities
   identity traffic-selector-format {
     description
     "The base type for Traffic-Selector Formats";
   }

   identity ipv4-binary-selector-format {
     base traffic-selector-format;
     description
       "IPv4 Binary Traffic Selector Format";
   }

   identity ipv6-binary-selector-format {
     base traffic-selector-format;
     description
       "IPv6 Binary Traffic Selector Format";
   }

   // Type definitions and groupings
   typedef ipsec-spi {
     type uint32;
     description
      "The first 32-bit IPsec Security Parameter Index (SPI)
      value on data. This field is defined in [RFC4303].";
       reference
       "RFC 4303: IP Encapsulating Security
       Payload (ESP)";
   }

   grouping traffic-selector-base {
     description "A grouping of the commen leaves between the
       v4 and v6 Traffic Selectors";
     container ipsec-spi-range {
       presence "Enables setting ipsec spi range";
       description
       "Inclusive range representing IPSec Security Parameter
       Indices to be used. When only start-spi is present, it
       represents a single spi.";
   leaf start-spi {
       type ipsec-spi;
       mandatory true;
       description
         "The first 32-bit IPsec SPI value on data.";
       }
   leaf end-spi {
         type ipsec-spi;
         must ". >= ../start-spi" {
           error-message
             "The end-spi must be greater than or equal
              to start-spi";
       }
      description
        "If more than one contiguous SPI value needs to be matched,
        then this field indicates the end value of a range.";
       }
    }
    container source-port-range {
      presence "Enables setting source port range";
      description
       "Inclusive range representing source ports to be used.
        When only start-port is present, it represents a single
     port. These value(s) are from the range of port numbers 
        defined by IANA (http://www.iana.org).";
      leaf start-port {
         type inet:port-number;
         mandatory true;
         description
         "The first 16-bit source port number to be matched";
      }
      leaf end-port {
         type inet:port-number;
         must ". >= ../start-port" {
         error-message
          "The end-port must be greater than or equal to start-port";
        }
        description
         "The last 16-bit source port number to be matched";
       }
    }
    container destination-port-range {
      presence "Enables setting destination port range";
      description
       "Inclusive range representing destination ports to be used.
       When only start-port is present, it represents a single
       port.";
        leaf start-port {
          type inet:port-number;
          mandatory true;
          description
          "The first 16-bit destination port number to be matched";
       }
       leaf end-port {
         type inet:port-number;
         must ". >= ../start-port" {
         error-message
           "The end-port must be greater than or equal to
          start-port";
        }
        description
     "The last 16-bit destination port number to be matched";
     }
   }
 }

 grouping ipv4-binary-traffic-selector {
   container source-address-range-v4 {
      presence "Enables setting source IPv4 address range";
      description
       "Inclusive range representing IPv4 addresses to be used. When
       only start-address is present, it represents a single
       address.";
      leaf start-address {
        type inet:ipv4-address;
        mandatory true;
       description
        "The first source address to be matched";
      }
      leaf end-address {
        type inet:ipv4-address;
        description
         "The last source address to be matched";
       }
   }
   container destination-address-range-v4 {
      presence "Enables setting destination IPv4 address range";
      description
        "Inclusive range representing IPv4 addresses to be used.
        When only start-address is present, it represents a
        single address.";
      leaf start-address {
        type inet:ipv4-address;
        mandatory true;
        description
         "The first destination address to be matched";
      }
      leaf end-address {
        type inet:ipv4-address;
        description
         "The last destination address to be matched";
      }
   }
   container ds-range {
      presence "Enables setting dscp range";
      description
       "Inclusive range representing DiffServ Codepoints to be used.
       When only start-ds is present, it represents a single
       Codepoint.";
      leaf start-ds {
        type inet:dscp;
        mandatory true;
        description
         "The first differential service value to be matched";
    }
    leaf end-ds {
      type inet:dscp;
      must ". >= ../start-ds" {
        error-message
          "The end-ds must be greater than or equal to start-ds";
      }
      description
        "The last differential service value to be matched";
   }
  }
  container protocol-range {
    presence "Enables setting protocol range";
    description
      "Inclusive range representing IP protocol(s) to be used. When
       only start-protocol is present, it represents a single
       protocol.";
    leaf start-protocol {
      type uint8;
      mandatory true;
      description
        "The first 8-bit protocol value to be matched.";
     }
     leaf end-protocol {
       type uint8;
       must ". >= ../start-protocol" {
         error-message
           "The end-protocol must be greater than or equal to
          start-protocol";
       }
     description
       "The last 8-bit protocol value to be matched.";
     }
   }
   description "ipv4 binary traffic selector";
 }
  grouping ipv6-binary-traffic-selector {
   container source-address-range-v6 {
     presence "Enables setting source IPv6 address range";
      description
       "Inclusive range representing IPv6 addresses to be used.
       When only start-address is present, it represents a
       single address.";
      leaf start-address {
        type inet:ipv6-address;
        mandatory true;
        description
        "The first source address, from the
        range of 128-bit IPv6 addresses to be matched";
      }
      leaf end-address {
        type inet:ipv6-address;
        description
            "The last source address, from the
            range of 128-bit IPv6 addresses to be matched";
      }
   }
   container destination-address-range-v6 {
     presence "Enables setting destination IPv6 address range";
     description
       "Inclusive range representing IPv6 addresses to be used.
        When only start-address is present, it represents a
        single address.";
     leaf start-address {
       type inet:ipv6-address;
       mandatory true;
       description
           "The first destination address, from the
           range of 128-bit IPv6 addresses to be matched";
     }
     leaf end-address {
       type inet:ipv6-address;
       description
           "The last destination address, from the
           range of 128-bit IPv6 addresses to be matched";
    }
  }
  container flow-label-range {
    presence "Enables setting Flow Label range";
    description
      "Inclusive range representing IPv4 addresses to be used. When
       only start-flow-label is present, it represents a single
       flow label.";
    leaf start-flow-label {
      type inet:ipv6-flow-label;
      description
        "The first flow label value to be matched";
    }
    leaf end-flow-label {
      type inet:ipv6-flow-label;
      must ". >= ../start-flow-label" {
        error-message
          "The end-flow-lable must be greater than or equal to
           start-flow-label";
      }
      description
         "The first flow label value to be matched";
    }
   }
  container traffic-class-range {
    presence "Enables setting the traffic class range";
    description
     "Inclusive range representing IPv4 addresses to be used. When
      only start-traffic-class is present, it represents a single
      traffic class.";
    leaf start-traffic-class {
      type inet:dscp;
      description
       "The first traffic class value to be matched";
      reference
       "RFC 3260: New Terminology and Clarifications for Diffserv
        RFC 3168: The Addition of Explicit Congestion Notification
        (ECN) to IP";
    }
    leaf end-traffic-class {
      type inet:dscp;
      must ". >= ../start-traffic-class" {
        error-message
          "The end-traffic-class must be greater than or equal to
           start-traffic-class";
      }
      description
        "The last traffic class value to be matched";
    }
  }
  container next-header-range {
    presence "Enables setting Next Header range";
    description
     "Inclusive range representing Next Headers to be used. When
      only start-next-header is present, it represents a
      single Next Header.";
    leaf start-next-header {
      type uint8;
      description
       "The first 8-bit next header value to be matched.";
    }
    leaf end-next-header {
      type uint8;
      must ". >= ../start-next-header" {
        error-message
          "The end-next-header must be greater than or equal to
          start-next-header";
      }
      description
        "The last 8-bit next header value to be matched.";
    }
  }
  description "ipv6 binary traffic selector";
}
  grouping traffic-selector {
    leaf ts-format {
       type identityref {
         base traffic-selector-format;
       }
       description "Traffic Selector Format";
     }
    uses traffic-selector-base;
    uses ipv4-binary-traffic-selector;
    uses ipv6-binary-traffic-selector;
    description
     "The traffic selector includes the parameters used to match
       packets for a specific flow binding.";
    reference
     "RFC 6089: Flow Bindings in Mobile IPv6 and Network
       Mobility (NEMO) Basic Support";
  }

  grouping ts-list {
    list selectors {
      key index;
      leaf index {
        type uint64;
        description "index";
      }
      uses traffic-selector;
      description "traffic selectors";
    }
    description "traffic selector list";
  }
}

<CODE ENDS>]]></artwork>
        </figure>
        </section>
    </section> <!-- template for YANG model, end -->

    <section anchor="ietf-dmm-fpc-tree" title="FPC YANG Data Model Structure">
    <t> This section only shows the structure for FPC YANG model. NOTE, it
        does NOT show the settings, Action values or Descriptor Value.</t>
    <t>
    <figure anchor="fig-ietf-dmm-fpc-tree"
              title="YANG FPC Agent Tree">
    <artwork align="center"><![CDATA[

module: ietf-dmm-fpc
+--rw mobility
   +--rw topology
   |  +--rw dpn-set* [dpn-id]
   |  |  +--rw dpn-id                            fpc:fpc-identity
   |  |  +--rw dpn-name?                         string
   |  |  +--rw dpn-resource-mapping-reference?   string
   |  |  +--rw interface-set*[access-technology role interface-id]
   |  |     +--rw access-technology         identityref
   |  |     +--rw role                      identityref
   |  |     +--rw interface-id              fpc:fpc-interface-id
   |  |     +--rw interface-settings-set
   |  +--rw dpn-type-set* [access-technology role]
   |  |  +--rw access-technology         identityref
   |  |  +--rw access-technology-name?   string
   |  |  +--rw role                      identityref
   |  |  +--rw role-name?                string
   |  |  +--rw interface-set* [interface-id]
   |  |     +--rw interface-id              fpc:fpc-interface-id
   |  |     +--rw interface-name?           string
   |  |     +--rw interface-protocol-set*   identityref
   |  |     +--rw feature-set*              identityref
   |  |     +--rw interface-settings-set
   |  +--rw srv-group-set* [srv-group-id]
   |  |  +--rw srv-group-id           fpc:fpc-identity
   |  |  +--rw referenced-dpns-set* 
                       [access-technology role interface-id]
   |  |  |  +--rw access-technology        identityref
   |  |  |  +--rw role                     identityref
   |  |  |  +--rw interface-id             fpc:fpc-interface-id
   |  |  |  +--rw supporting-dpn-id-set*   fpc:fpc-identity
   |  |  |  +--rw peer-srv-group-id-set*   fpc:fpc-identity
   |  |  +--rw peer-srv-group-set* [remote-srv-group-id]
   |  |  |  +--rw remote-srv-group-id       fpc:fpc-identity
   |  |  |  +--rw interface-settings-set
   |  |  +--rw domain-id?             fpc:fpc-identity
   |  +--rw domain-set* [domain-id]
   |  |  +--rw domain-id           fpc:fpc-identity
   |  |  +--rw domain-name?        string
   |  |  +--rw domain-reference?   string
   |  +--rw basename?          fpc:fpc-identity
   |  +--rw base-state?        string
   |  +--rw base-checkpoint?   string
   +--rw policy
   |  +--rw action-definition-set* [action-id]
   |  |  +--rw action-id      fpc:fpc-identity
   |  |  +--rw action-type?   identityref
   |  |  +--rw (action-value)?
   |  +--rw descriptor-definition-set* [descriptor-id]
   |  |  +--rw descriptor-id      fpc:fpc-identity
   |  |  +--rw descriptor-type?   identityref
   |  |  +--rw (descriptor-value)?
   |  +--rw rule-definition-set* [rule-id]
   |  |  +--rw rule-id                     fpc:fpc-identity
   |  |  +--rw descriptor-match-type       enumeration
   |  |  +--rw descriptor-reference-set* [descriptor-id-reference]
   |  |  |  +--rw descriptor-id-reference    fpc:fpc-identity
   |  |  |  +--rw direction?                 fpc:fpc-direction-type
   |  |  +--rw action-reference-set* [action-order]
   |  |     +--rw action-order           uint32
   |  |     +--rw action-id-reference    fpc:fpc-identity
   |  +--rw policy-definition-set* [policy-id]
   |  |  +--rw policy-id    fpc:fpc-identity
   |  |  +--rw rule-set* [precedence]
   |  |     +--rw precedence           uint32
   |  |     +--rw rule-id-reference    fpc:fpc-identity
   |  +--rw basename?                    fpc:fpc-identity
   |  +--rw base-state?                  string
   |  +--rw base-checkpoint?             string
   +--rw installed-policy-list* [dpn-id-reference]
   |  +--rw dpn-id-reference        fpc:fpc-identity
   |  +--rw installed-policy-set* [installed-policy-id]
   |  |  +--rw installed-policy-id    fpc:fpc-identity
   |  |  +--rw policy-id-reference?   fpc:fpc-identity
   |  |  +--rw policy-settings
   |  +--rw settings-set
   +--ro mobility-context-set* [mobility-context-id]
   |  +--ro mobility-context-id                     fpc:fpc-identity
   |  +--ro srv-group-id-reference?                 fpc:fpc-identity
   |  +--ro parent-mobility-context-id-reference?   fpc:fpc-identity
   |  +--ro dpn-reference-list* [dpn-id-reference direction]
   |  |  +--ro dpn-id-reference                 fpc:fpc-identity
   |  |  +--ro direction                       fpc:fpc-direction-type
   |  |  +--ro complementary-dpn-settings
   |  |  +--ro interface-id-reference           fpc:fpc-interface-id
   |  |  +--ro embedded-rule-set* [precedence]
   |  |  |  +--ro rule-id                      fpc:fpc-identity
   |  |  |  +--ro descriptor-match-type        enumeration
   |  |  |  +--ro precedence                   uint32
   |  |  |  +--ro action-definition-set* [action-order]
   |  |  |  |  +--ro action-order    uint32
   |  |  |  |  +--ro action-id?      fpc:fpc-identity
   |  |  |  |  +--ro action-type?    identityref
   |  |  |  |  +--ro (action-value)?
   |  |  |  +--ro descriptor-definition-set* [descriptor-id]
   |  |  |     +--ro descriptor-id      fpc:fpc-identity
   |  |  |     +--ro descriptor-type?   identityref
   |  |  |     +--ro (descriptor-value)?
   |  |  +--ro assigned-policy-reference-set*   fpc:fpc-identity
   |  +--ro requested-policy-reference-set*      fpc:fpc-identity
   |  +--ro complementary-context-settings
   +--rw monitor-set* [monitor-id]
      +--rw monitor-id             fpc:fpc-identity
      +--rw deterrable?            boolean
      +--rw binding-information
      +--rw target                 fpc-identity
      +--rw (configuration)
         +--:(periodic-config)
         |  +--rw period?                uint32
         +--:(threshold-config)
         |  +--rw lo-thresh?             uint32
         |  +--rw hi-thresh?             uint32
         +--:(scheduled-config)
         |  +--rw report-time?           uint32
         +--:(events-config-ident)
         |  +--rw event-identities*      identityref
         +--:(events-config)
            +--rw event-ids*             uint32
     ]]></artwork>
        <postamble></postamble>
      </figure>
    </t>
    </section>
</section>
</back>
</rfc>

