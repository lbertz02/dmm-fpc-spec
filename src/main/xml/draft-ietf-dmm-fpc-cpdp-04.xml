<?xml version="1.0" encoding="US-ASCII"?>
<!-- edited with XMLSPY v5 rel. 3 U (http://www.xmlspy.com)
     by Daniel M Kohn (private) -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC3344 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3344.xml">
<!ENTITY RFC3775 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3775.xml">
<!ENTITY RFC4225 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4225.xml">
<!ENTITY RFC4866 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4866.xml">
<!ENTITY RFC5213 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5213.xml">
<!ENTITY RFC3588 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3588.xml">
<!ENTITY RFC4005 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4005.xml">
<!ENTITY RFC4006 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4006.xml">
<!ENTITY RFC4601 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4601.xml">
<!ENTITY RFC4605 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4605.xml">
<!ENTITY RFC6224 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6224.xml">
<!ENTITY RFC7333 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7333.xml">
<!ENTITY RFC7429 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7429.xml">
<!ENTITY RFC6088 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6088.xml">
<!ENTITY RFC7222 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7222.xml">
<!ENTITY I-D.ietf-dmm-requirements PUBLIC "" "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-dmm-requirements.xml">
]>
<rfc category="std" docName="draft-ietf-dmm-fpc-cpdp-04.txt"
     ipr="trust200902">
  <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

  <?rfc toc="yes" ?>

  <?rfc symrefs="yes" ?>

  <?rfc sortrefs="yes"?>

  <?rfc iprnotified="no" ?>

  <?rfc strict="yes" ?>

  <front>
    <title abbrev="DMM FPC Protocol">Protocol for Forwarding Policy Configuration (FPC) in DMM</title>

    <author fullname="Marco Liebsch" initials="M." surname="Liebsch">
      <organization abbrev="NEC">NEC Laboratories Europe</organization>

      <address>
        <postal>
          <street>NEC Europe Ltd.</street>

          <street>Kurfuersten-Anlage 36</street>

          <city>D-69115 Heidelberg</city>

          <region></region>

          <code></code>

          <country>Germany</country>
        </postal>

        <phone>+49 6221 4342146</phone>

        <email>liebsch@neclab.eu</email>
      </address>
    </author>

 <author fullname="Satoru Matsushima" initials="S." surname="Matsushima">
      <organization abbrev="SoftBank">SoftBank</organization>

      <address>
        <postal>

          <street>1-9-1,Higashi-Shimbashi,Minato-Ku</street>

          <city>Tokyo  105-7322</city>

          <region></region>

          <code></code>

          <country>Japan</country>
        </postal>

        <phone></phone>

        <email>satoru.matsushima@g.softbank.co.jp</email>
      </address>
    </author>

   <author fullname="Sri Gundavelli" initials="S" surname="Gundavelli">
      <organization abbrev="">Cisco</organization>

      <address>
        <postal>
          <street>170 West Tasman Drive</street>

          <city>San Jose</city>

          <region>CA</region>

          <code>95134</code>

          <country>USA</country>
        </postal>

        <email>sgundave@cisco.com</email>
      </address>
    </author>



<author initials="D." surname="Moses" fullname="Danny Moses">
<organization abbrev="Intel Corporation"></organization>
<address>
<postal>
          <street></street>

          <city></city>

          <region></region>

          <code></code>

          <country></country>
        </postal>

        <phone></phone>

        <email>danny.moses@intel.com</email>

</address>
</author>

<author initials="L." surname="Bertz" fullname="Lyle Bertz">
<organization abbrev="Sprint"></organization>
<address>
<postal>
          <street>6220 Sprint Parkway</street>

          <city>Overland Park  KS, 66251</city>

          <region></region>

          <code></code>

          <country>USA</country>
        </postal>

        <phone></phone>

        <email>lyleb551144@gmail.com</email>

</address>
</author>


    <date year="2016" />

    <workgroup>DMM Working Group</workgroup>

    <abstract>
      <t>
        This document describes the solution of data-plane separation
        from control-plane which enables mobility management system
        flexible using agent and client functions. To configure
        data-plane nodes and functions, the data-plane is abstracted in
        the agent to provide interface to the client. The data-plane
        abstraction model is extensible to support many different type
        of mobility management systems and data-plane functions.
      </t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">


<t>
One objective of the Distributed Mobility Management (DMM) WG is the separation of
the mobility management Control- and Data-Plane to enable flexible deployment, such
as decentralized provisioning of Data-Plane nodes (DPN). Data-Plane nodes can be configured
to function as an anchor for a registered Mobile Node's (MN) traffic, others can be configured
to function as a Mobile Access Gateway (MAG) per the Proxy Mobile IPv6 protocol
<xref target="RFC5213"></xref> or a Foreign Agent (FA) per the Mobile IPv4 protocol
<xref target="RFC3344"></xref>. Requirements for DMM have been described in <xref target="RFC7333"></xref>,
whereas best current practices for DMM are documented in <xref target="RFC7429"></xref>.
</t>

<t>
The Data-Plane must provide a set of functions to the Mobility Control-Plane, such as
support for encapsulation, IP address re-writing, QoS differentiation and traffic shaping.
In addition, means for traffic description must be provided to complement traffic treatment actions
and build unambiguous Data-plane rules. These requirements are met by various transport network components,
such as IP switches and routers, though configuration semantics differ between them.
</t>

<t>Forwarding Policy Configuration (FPC) per this document enables the configuration
of any Data-Plane node and type by the abstraction of configuration details and the use
of common configuration semantics. The protocol using the FPC semantics is deployed between
a Client function, which is associated with the Mobility Management Control-Plane,
and an Agent function. The Agent function enforces the Data-Plane configuration
and can be present on a transport network controller or co-located with a Data-Plane
node. The Agent applies the generalized configuration semantics to configuration, which
is specific to the Data-Plane node and type.
</t>

<t>This specification follows a common functional architecture, which utilizes the FPC
protocol between the Client and Agent functions.</t>

<t>A Client interacts with the Agent to build unambiguous rules which are to be enforced in
the Data-Plane. An Agent translates a rule, which follows the data model herein, into one or
multiple configuration actions to enforce the rule in the Data-Plane. Distinct collections of
rulese are defined as Ports in the information Model.</t>

<t>The Client interacts with the Agent to build sessions, including mobility sessions, to be
hosted by teh Data-Plane.  These sessions are referred to as Contexts.
</t>

<t>A Client utilizes a sequence or grouping of control messages to interact with the Agent, where
each control message has an unambiguous semantic, e.g. to set up a tunnel interface or to
configure a policy route in a Data-Plane node. An Agent performs a configuration action
per the semantics of the received control message or grouping of control messages. Generic messages,
i.e. create, update, query and delete, are also supported.</t>

<t>The availability of both generic and control messaging enables tailored implementation and deployment of Control-/Data-Plane
separation in mobile communication gateways, e.g. by having the Mobility Control-Plane directly communicating to
a Data-Plane node using control messages, or by the deployment of a Network Controller in between the Mobility
Control-Plane and Data-Plane nodes which may support both generic and control messages, which are under control of the Network Controller. Support for multiple deployment models
enables an operator to transition their network in incremental phases.</t>

<t>The architecture and reference interface specified in this document is not tied to any specific Control-Plane
protocol that is in use in the mobility network, or to any type of access technology. The mobility protocols in
use can be Proxy Mobile IPv6, GTP, IPSec or other protocols; and the access network can be 4G LTE, WiFi, or 5G.
These aspects have no direct implication on the FPC interface that is between Control- and Data-Plane nodes.</t>


    </section>

    <section title="Conventions and Terminology">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119"></xref>.</t>


   </section>

   <section anchor="pcmodel" title="Reference Architecture and Information Model">

   <section anchor="refarch" title="Architecture for DMM Forwarding Policy Configuration">

<t>The DMM Forwarding Policy Configuration (FPC) protocol enables the separation of the mobility management Control-Plane
from the Data-Plane and provides the required control and semantics in between these two planes.
<xref target="fig_usecase"></xref> depicts an exemplary use case where IP traffic between a Correspondent Node (CN)
and a Mobile Node (MN) traverses multiple DPNs, each applying policies as per the Control-Plane's request.
Policies in the one or multiple DPNs can result in traffic steering according to a host-route, packet scheduling
and marking according to a subscriber's QoS profile, or forwarding rules (e.g. encapsulation within GRE or GTP-U tunnel).
</t>
<t>
   <figure anchor="fig_usecase"
              title="Exemplary illustration of DMM traffic steering and policy enforcement
                     at Data Plane Nodes (DPN)">
        <artwork align="center"><![CDATA[

               +--------------------------+
               |     Mobility Control     |
               +--------------------------+
                |             |         |
                |             |         |
                |             |         |
         \ /    V             V         V
+--+     -o-  +---+         +---+     +---+   +--+
|MN| ---- |---|DPN|<========|DPN|<----|DPN|<--|CN|
+--+      |   +---+         +---+     +---+   +--+
             Rules:       Rules:      Rules:
             Encap,Decap, Encap,Decap Policy-Route,
             Forward,QoS  Forward,QoS Forward

          ]]></artwork>

        <postamble></postamble>
      </figure>
</t>

<t>Mobility Control-Plane functions have the following roles in common: </t>

 <t><list style="symbols">
     <t>Tracking a mobile node's attachment, detachment from the access network.</t>
     <t>Accept requests to set up and maintain mobility-related Data-Plane paths between DPNs,
        enforcing QoS and forwarding policies. Such requests are a result of mobility signaling between different
        Mobility Control-Plane functions.</t>
     <t>Ensure that required rules to establish and maintain connectivity of an MN with its correspondent
        nodes are enforced in the Data-Plane.</t>
     <t>Participate in monitoring the DPNs' operation and support the handling of exceptions, e.g. the
        detection of a partial DPN failure and the diversion of traffic through a different DPN.</t>
     <t>Maintain consistency between multiple DPNs which enforce policy rules to ensure
        connectivity between a MN and its correspondent services.</t>
  </list></t>

<t>Mobility Data-Plane functions have the following roles in common: </t>

  <t><list style="symbols">
     <t>Forward and treat traffic according to the policies and directives sent by the Mobility Control-Plane.</t>
     <t>Provide status information (e.g. load, health, statistics and traffic volume) and events related to service failure
        upon request.</t>
     <t>Participate in the process of topology acquisition, e.g. by exposing relevant topological and
        capability information, such as support for QoS differentiation and supported encapsulation protocols.
        </t>
  </list></t>
<t>The protocol for DMM FPC applies to the interface between a FPC Client function and
a FPC Agent function, as depicted in <xref target="fig_refarch"></xref>. The FPC Client function
is associated with an application function of the mobility management Control-Plane, e.g. a Local
Mobility Anchor Control-Plane function per the Proxy Mobile IPv6 protocol.
The FPC Agent function processes the FPC protocol semantics and translates them into configuration
commands per the DPN's technology. In one example, a FPC Agent can be co-located with a Network
Controller, which enforces forwarding rules on a set of Data-plane nodes. In another example, the Agent
can be co-located with a Data-Plane node to directly interact with interface management and the
router's RIB Manager. The mapping of the common FPC semantics and policy description to the configuration
commands of a particular DPN is specific to the DPN's technology and the Agent's implementation.
</t>

<t>
 <figure anchor="fig_refarch"
              title="Functional reference architecture for DMM Forwarding Policy Configuration (FPC)">
        <artwork align="center"><![CDATA[

               +-------------------------+
               | Mobility Control-Plane  |
               |                         |
               |+--------[API]----------+|
               ||  FPC Client Function  ||
               |+----------^------------+|
               +-----------|-------------+
                           |
                           | DMM FPC protocol
                           |
               +-----------|-------------+
               |+----------v------------+|
               ||  FPC Agent Function   ||
               |+-----------------------+|
               |                         |
               |  DPN Configuration API  |
               +-------------------------+
          ]]></artwork>
        <postamble></postamble>
      </figure>
</t>
</section>
<section anchor="model1" title="Information Model">
    <t>To abstract from configuration details of an IP switch or IP router on the FPC protocol interface,
    the construct of logical ports describe sets of rules for D-Plane processing and contexts describe
    Session/Mobility based rules and congfiguration.
    </t>
    <t>A conext binds one or multiple session/mobility properties, which describe mobliity/session traffic
    treatment actions, such as a mobility QoS policy or packet encapsulation. Which traffic is treated by the
    context is determined by one or multiple traffic descriptors, which also bind to that context. A group of
    one or multiple traffic descriptors, one or multiple properties defining mobility/session based traffic
    treatment actions and the port identifier make a context. The context identifier serves as key to access
    the information.</t>
    <t>A port represents a colleciton of policy groups, a group of rules that can exists independent of the
    mobility/session lifecycle.  Policy groups are named collections of policies.  Policy groups provide a
    collection of policies, e.g. a contatenation of the rules in each policy, to provide a second level of
    rule aggregation often required to separate out technical grouping of rules, e.g. a policy, with the
    grouping of rules for use cases, e.g. a service level policy.
    </t>
    <t>Policies are a collection of rules.  A policy's rules contain traffic descriptors that describe the traffic
    to which a rule applies and associated treatment actions.  The rules are ordered to ensure an unambiguous
    traffic matching.
    </t>
    <t>Actions, descriptors, policies and policy groups can be viewed as configuration data while ports and contexts
    are akin to stuctures that are instantiatied on the DPN.  The descriptors, QoS attributes, actions and other
    structures referenced by a port or context are active, i.e. they can be applied to traffic on a DPN.
    The other structures are passive and MUST be present on a DPN but MUST also be referenced by a context or
    port in order to participate in traffic processing.
    </t>
    <t>All traffic arriving at a Data-Plane node and matching a traffic descriptor will be treated per
    the properties bound to the port or context the traffic descriptor is also bound to. For example, Traffic
    Selectors <xref target="RFC6088"></xref>, which can be bound to a context or port, can identify single or
    multiple IP flows. Aggregated IP traffic destined toward a given IP address prefix or originated from
    an address matching a particular IP address range can be described using the Traffic Selector or an IP prefix
    traffic descriptor per this specification.</t>
  <section anchor="naming" title="Naming">
    <t>Names have no official format between the Client and Agent but using unsigned 32 bit integers MUST be supported
      by Clients and Agents.  Other formats such as strings or URIs MAY be supported. The only requirement is that all
      names used to identify entities must be unique by Client/Agent pair for each entity type, e.g. Context, Port, etc.
      This is done by using binary comparison of names at the Agent. If a creation attempt occurs for an entity where the
      name already exists a NAME_ALREADY_EXISTS error is raised.
    </t>
    <t>The naming convention can be used to accommodate heirarchical structures such as virtual routing and fowarding (VRF),
      Policy Based Routing (PBR), Tunnel Interfaces, Networks, etc.  For example using a string prefix such as "mcc:01/mnc:002",
      an inteface such as "/if:1/", a VRF route, e.g. "/vrf:xxx/routeid:001" or a service id in a network
      "mcc:01/mnc:002/sr-id:internet".
    </t>
  </section>
  <section anchor="policy" title="Policies, Actions and Descriptors">
    <t>Actions specify the treatment applied to a packet. Actions are assigned an identifier and contain a type and value.</t>
    <t>Descriptor describes a filter for a packet. If the packet matches (passes) the filter it is said to be consumed by
      or taken by the Descriptor. Many specifications also used the terms Filter, Traffic Descriptor or Traffic Selector
      <xref target="RFC6088"/>. A packet that meets the criteria of a Descriptor is said to satisfy, pass or is consumed by
      the Descriptor. Descriptors are assigned an identifier and contain a type and value.</t>
    <t>Rules - are a collection of Descriptors and Actions. All Descriptors MUST be satisfied before the Actions are taken.
      This is known as an AND Descriptor list, i.e. Descriptor 1 AND Descriptor 2 AND ... Descriptor X MUST be satisfied for
      the rule to apply. These are an internal to the Policy, i.e. it is not a first class, visible object at the top level
      of an agent. Each Action and Descriptor are given Identifiers to assist in deleting individual list members of the Rule.
      Every Action also comes with an order value that specifies the execution order of Actions and simplifies DPN
      processing. A Rule references the Descriptors and Actions by their Identifiers and does not directly contain Action
      and Descriptor structures.</t>
    <t>Policies are a collection of Rules. Each Policy has a Policy Identifier and a list of Rules/Order pairs. Unlike the
      AND filter matching the Policy uses an OR matching to find the first Rule whose Descriptors are satisfied by the packet.
      The search for a Rule to apply to packet is executed according to the Order values of the Rules. This is an
      ascending order search, i.e. the Rule with the lowest Order value is tested first and if its Descriptors are not
      satisfied by the packet the Rule with the next lowest Order value is tested. Policies contain Rules as opposed to
      references to Rules.</t>
    <t>Policy Groups are an aggregation of Policies and provide a convenience mechanism for aggregation. Common applications
      include aggregating Policies that are defined by different functions, e.g. Network Address Translation, Security, etc.
      The structure has an Identifier and references the Policies via their Identifiers.</t>
  </section>
  <section anchor="portscontext" title="Ports and Context">
    <t>Ports contain Policy Groups (via reference to their Policy Group Identifiers) and have an Identifier. They may be
      instantiated on the DPN at the discretion of the Agent. Being Policy based and having the ability to specify Rules
      with Forwarding related Actions, Ports can take on functions such as network address translation, route selection, etc.</t>
    <t>Contexts provide Port functionality with a focus on hierarchically related forwarding functions such as Mobility.
      They have attributes such as uplink/downlink Quality of Service (QoS) and tunnel and assigned IP, e.g. delegating
      prefixes, as well as the ability to reference parent Contexts. When a parent Context is referenced, the descendant,
      e.g. child, can inherit required properties and policies. Contexts also have fate sharing - when a Context is deleted
      all of its descendants are deleted. They are also assigned Data Plane Nodes (DPNs).
    </t>
    <t>Although Contexts are hierarchical Ports are not. There are distinct advantages in Contexts for the hierarchical
      representation including limiting the amount of over the wire information transported and fate sharing during deletion.
      However, Client MUST avoid creating deep, arbitrary hierarchies as this creates major disadvantages. A two tier
      hierarchy is common in many mobility solutions but further depths SHOULD be avoided.</t>
  </section>
  <section anchor="toplogy" title="Topology">
    <t>Data Plane Nodes may be organized into Data Plane Groups. A Context is attached to a DPN Group indirectly (by
      reference to the DPN Group Identifier) or directly through specification of the structure in the Context.</t>
    <t>A DPN specifies the connectivity information for the Agent, supported Control Protocols and the DPN Groups
    it is a part of.</t>
    <t>DPN Groups specify the Mobility Role, supported access technologies and mobility profiles. It also specifies
    connected peer groups.</t>
  </section>
  <section anchor="monitor_descr" title="Monitors">
    <t>Monitors provide a mechanism to produce reports when events occur.  Unlike ports and contexts a Monitor will
      have a target that may be any FPC-Identity except other monitors, events by their type, or attributes of an entity.
      In such cases, the target name is a concatenation of the FPC-Identity and the relative path (separated by '/') to the
      attribute(s) to be monitored.
    </t>
    <t>Monitors MUST be registered with the Agent.  The registration specifies the monitor id, attribute to monitor and
      optional reporting configuration. When a Monitor registration is applied, the reporting configuration MUST be applicable
      to the attribute monitored, e.g. a Monitor using a Threshold configuration cannot be applied to a context but it can be
      applied to a numeric context property.
    </t>
    <t>Four report types are defined:
      <list style="numbers">
        <t>Periodic reporting specifies an interval by which a NOTIFY is sent to the Client.</t>
        <t>Event reporting specifies a list of EVENT_TYPE_IDs that, if they occur and are related to the monitored attribute,
          will result in sending a NOTIFY to the Client</t>
       <t>Scheduled reporting specifies the time (in seconds since Jan 1, 1970) when a NOTIFY for the monitor should be sent
         to the Client. Once this Monitor's NOTIFY is completed the Monitor is automatically de-registered.</t>
       <t>Threshold reporting specifies one or both of a low and high threshold. When these values are crossed a corresponding
         NOTIFY is sent to the Client.</t>
      </list>
    </t>
   <t>All monitored data can be requested by the Client at any time using the PROBE message. Thus, reporting configuration is
     optional and when not present only PROBE messages may be used for monitoring. If a SCHEDULED or PERIODIC configuration is
     provided during registration with the time related value (time or period respectively) of 0 a NOTIFY is immediately sent and
     the monitor is immediately de-registered. This method should, when a MONITOR has not been installed, result in an immediate
     NOTIFY is sufficient for the Client's needs and the Client has no further need for the monitor to be registered.
     An Agent may reject a registration if it or the DPN has insufficient resources.</t>
   <t>MONITOR_DEREG is used by a Client to remove a monitor from an Agent. The message identifies one or multiple monitors by including
     the MONITOR_ID. The message also includes an optional Boolean value that, when true, will result in NOTIFY messages being sent for
     the MONITOR_ID to the Client.</t>
   <t>When a monitor has a reporting configuration of SCHEDULED it is automatically de-registered after the NOTIFY occurs.
   An Agent or DPN may temporarily suspend monitoring if insufficient resources exist.  In such a case the Agent MUST notify the
   Client.</t>
  <t>PROBE are used by a Client to retrieve information about a previously installed monitor. The PROBE message SHOULD
   identify one or more monitors by means of including the associated monitor identifier. An Agent receiving a PROBE
   message SHOULD send the requested information in a single or multiple NOTIFY messages.</t>
  <t>NOTIFY are used by an Agent to report the status of a monitor to a Client. This message contains the MONITOR_ID, a
   NOTIFICATION_ID to permit the Client to distinguish amongst many monitoring related requests, a TRIGGER that caused
   the NOTIFY message, the timestamp of when the monitored information was record for the message along with the value
   of the monitored attribute.</t>
  </section>
</section>
    </section>
<section anchor="protocol" title="Protocol">
  <section anchor="messageandsematics" title="Protocol Messages and Semantics">
    <t>Five message types are supported:</t>
    <texttable anchor="messages" title="Client to Agent Messages">
    <ttcol align="left">Message</ttcol>
    <ttcol align="left">Type</ttcol>
    <ttcol align="left">Description</ttcol>

    <c>CONF</c>
    <c>HEADER BODY</c>
    <c>Configure processes a single operation.</c>

    <c>CONF_BUNDLES</c>
    <c>1*[HEADER BODY]</c>
    <c>Configure-bundles takes multiple operations that are to be executed as a group
          with partial failures allowed. They are executed according to the OP_ID value
          in the OP_BODY.</c>

    <c>REG_MONITOR</c>
    <c>*[ MONITOR ]</c>
    <c>Install a monitor at an Agent. The message includes information about the attribute to
      monitor and the reporting method.  Note that a MONITOR_CONFIG is required for this
      opeation.</c>

    <c>DEREG_MONITOR</c>
    <c>*[ MONITOR_ID ] [ boolean ]</c>
    <c>Remove monitors from an Agent. Monitor IDs are provided. Boolean (optional) indicates
      if a successful DEREG triggers a NOTIFY with final data.</c>

    <c>PROBE</c>
    <c>MONITOR_ID</c>
    <c>Probe the status of a registered monitor.</c>
    </texttable>
    <t>Each message contains a header with the Client Identifier, an execution delay timer,
    the state of session related entites after the operation, the adminstrative state of all
    entities, the type of operation, an optional Command Set (see <xref target="commandsets"/>) and
    the input (body) of the message.</t>
    <t>The operation input contains an operation identifier, a list of all entities and optional cloning
    instructions (see <xref target="cloning"/>).</t>
    <t>An Agent will respond with an error, ok, or an ok with indication that remaining
    data will be sent via a notify from the Agent to the Client <xref target="asyncnotification"/>. When
    returning an 'ok' of any kind, optional data may be present.</t>
    <t>Two Agent notifications are supported:</t>
    <texttable anchor="notifications" title="Agent to Client Messages (Notfications)">
      <ttcol align="left">Message</ttcol>
      <ttcol align="left">Type</ttcol>
      <ttcol align="left">Description</ttcol>

      <c>CONFIG_RESULT_NOTIFY</c>
      <c>See <xref target="ayncnotify"/></c>
      <c>An asynchronous notification from Agent to Client based upon a previous CONFIG or CONFIG_BUNDLES
      request.</c>

      <c>NOTIFY</c>
      <c>See <xref target="notify_structs"/></c>
      <c>An asynchronous notification from Agent to Client based upon a registered MONITOR.</c>
    </texttable>

    <section anchor="agent-processing" title="Agent Operation Processing">
      <t>The Agent will process entities provided in an operation in the following order:
        <list style="numbers">
  <t>Clone Instructions, if the feature is supported</t>
  <t>Descriptors</t>
  <t>Actions</t>
  <t>Policies</t>
  <t>Policy-Groups according to COMMAND_SET order processing</t>
  <t>Ports according to COMMAND_SET order processing</t>
  <t>Contexts according to COMMAND_SET order processing</t>
</list></t>
   <t>The following Order Processing occurs when COMMAND Sets are present
        <list style="numbers">
        <t>The Entity specific COMMAND_SET is processed according to its bit order unless
        otherwise specified by the technology specific COMMAND_SET.
        </t><t>Operation specific COMMAND_SET is processed upon all applicable entities
        (even if they had Entity specific COMMAND_SET values present) according to its bit
        order unless otherwise specified by the technology specific COMMAND_SET.
        </t><t>Operation OP_TYPE is processed for all entities.</t>
        </list>
    </t>
    <t>When deleting objects it at the top level only their name needs to be provided.</t>
    <t>When deleting an attribute, a leaf reference should be provided.  This is a path to the attibutes.</t>
  </section>
    <section anchor="cloning" title="Cloning">
      <t>Cloning is an optional feature that allows a Client to copy one structure to another
        in an operation. Cloning is always done first within the operation (see Operation
        Order of Execution for more detail). If a Client wants to build an object then Clone
        it using CONFIG_BUNDLES with the first operation being the entities to be copied and
        a second operation with the Cloning instructions. A CLONE operation takes two arguments,
        the first is the name of the target to clone and the second is the name of the newly
        created entity.</t>
    </section>
    <section anchor="commandsets" title="Command Bitsets">
<t>The COMMAND_SET is a technology specific bitset that allows for a single entity to
  be sent in an operation with the requested sub-transactions to be completed. For
  example, a Context could have the Home Network Prefix absent but it is unclear if
  the Client would like the address to be assigned by the Agent or if this is an error.
  Rather than creating a specific command for assigning the IP a bit position in a
  COMMAND_SET is reserved for Agent based IP assignment. Alternatively, an entity
  could be sent in an update operation that would be considered incomplete, e.g.
  missing some required data in for the entity, but has sufficient data to complete
  the instructions provided in the COMMAND_SET.</t>
    </section>
    <section anchor="response" title="Operation Response">
      <section anchor="immediateresp" title="Immediate Response">
    <t>Results will be supplied per operation input. Each result contains the
      RESULT_STATUS and OP_ID that it corresponds to. RESULT_STATUS values are:
      <list>
      <t>OK - SUCCESS
      </t><t>ERR - An Error has occurred
      </t><t>OK_NOTIFY_FOLLOWS - The Operation has been accepted by the Agent but
      further processing is required. A CONFIG_RESULT_NOTIFY will be sent once the
      processing has succeeded or failed.</t>
      </list>
    </t>
    <t>If the operation is successful, the result MAY contain nothing or a entities created
      as part of the operation as specified in <xref target="op_respbody"/>.</t>
    <texttable anchor="op_respbody" title="RESPONSE_BODY Fields">
    <ttcol align="left">Field</ttcol>
    <ttcol align="left">Type</ttcol>
    <ttcol align="left">Operation Types Create(C), Update(U), Query(Q) and Delete(D)</ttcol>
    <ttcol align="left">Description</ttcol>

    <c>DESCRIPTORS</c>
    <c>*[ DESCRIPTOR ]</c>
    <c>C,U</c>
    <c>List of Descriptors</c>

    <c>ACTIONS</c>
    <c>*[ ACTION ]</c>
    <c>C,U</c>
    <c>List of actions.</c>

    <c>POLICIES</c>
    <c>*[ POLICY ]</c>
    <c>C,U</c>
    <c>List of Policies</c>

    <c>POLICY_GROUPS</c>
    <c>*[ POLICY_GROUP ]</c>
    <c>C,U</c>
    <c>List of Policy-groups.</c>

    <c>PORTS</c>
    <c>*[ PORT [ COMMAND_SET ] ]</c>
    <c>C,U</c>
    <c>List of Ports that may optionally come with Command bitsets, if Command Sets are
      supported by the Agent. See <xref target="commandsets"/>.</c>

    <c>CONTEXTS</c>
    <c>*[ CONTEXT [ COMMAND_SET ] ]</c>
    <c>C,U</c>
    <c>List of Contexts that may optionally come with Command bitsets, if Command Sets are
      supported by the Agent. See <xref target="commandsets"/>.</c>

    <c>TARGETS</c>
    <c>*[ FPC-Identity (<xref target="naming"/>) ]</c>
    <c>Q,D</c>
    <c>List of targets for the operation.</c>
    </texttable>

    <t>If an error occurs the following information is returned.
    <list>
      <t>ERROR_TYPE_ID (Unsigned 32) - The identifier of a specific error type
      </t><t>ERROR_INFORMATION - An OPTIONAL string of no more than 1024 characters.
    </t></list>
    </t>
      </section>
      <section anchor="asyncnotification" title="Asynchronous Notification">
      <t>A CONFIG_RESULT_NOTIFY occurs after the Agent has completed processing related to a
        CONFIG or CONFIG_BUNDLES request. It is an asynchronous communication from the
        Agent to the Client.</t>

        <t>The value includes the following data</t>
    <texttable anchor="ayncnotify" title="CONFIG_RESULT_NOTIFY Fields">
    <ttcol align="left">Field</ttcol>
    <ttcol align="left">Type</ttcol>
    <ttcol align="left">Description</ttcol>
      <c>AGENT_ID </c>
      <c>FPC-Identity (<xref target="naming"/>)</c>
      <c>FPC Agent Identifier</c>

      <c>NOTIFICATION_ID </c>
      <c>[32, unsigned integer]</c>
      <c>A Notification Identifier used to determ;ine notification order.</c>

      <c>TIMESTAMP</c>
      <c>[32, unsigned integer]</c>
      <c>The time that the notification originated from the Agent.</c>

      <c>DATA</c>
      <c>*[ OP_ID RESPONSE_BODY ]</c>
      <c>A list of OP_ID / RESPONSE_BODY (<xref target="op_respbody"/>) pairs.</c>
      </texttable>
      </section>
    </section>
  </section>
  <section anchor="protoperation" title="Protocol Operation">
    <section anchor="simple" title="Simple RPC Operation">
      <t>Inital Connection...</t>
      <t>Handover...</t>
      <t>Teardown...</t>
    </section>
    <section anchor="optimization" title="Optimization for Current and Subsequent Messages">
      <t>Inital Connection...</t>
      <t>Handover...</t>
      <t>Teardown...</t>
      <section anchor="cloningexample" title="Cloning Feature (Optional)">
        <t>Inital Connection with cloning...</t>
      </section>
    </section>
    <section anchor="preprov" title="Pre-provisioning">
      <t>Inital Connection...</t>
      <t>Handover...</t>
      <t>Teardown...</t>
      <section anchor="registry" title="Basename Registry Feature (Optional)">
        <t>The Optional BaseName Registry support feature is provided to permit Clients with common scopes,
        referred to in this specification as BaseNames, to track the state of provisioned policy information
        on an Agent. The registry records the BaseName and Checkpoint set by a Client. If a new Client
        attaches to the Agent it can query the Registry to determine the amount of work that must be
        executed to configure the Agent to a BaseName / checkpoint revision. A State value is also
        provided in the registry to help Clients coordinate work on common BaseNames.
        </t>
      </section>
    </section>
  </section>

</section>

<section anchor="proto_message_detail" title="Protocol Message Details">
<section anchor="datastructure" title="Data Structures">
  <t>A Client may add, modify or delete multiple actions, descriptors,
   policies, policy-groups, ports and contexts in a single message. This
   includes control of the operation of a rule.  As example, a rule which
   performs re-writing of an arriving packet's destination IP address
   from IP_A to IP_B matching an associated Descriptro, can be
   enforced in the Data-Plane via an Agent to implicitly consider
   matching arriving packet's source IP address against IP_B and re-
   write the source IP address to IP_A.
</t>

<t><xref target="fig_port"/> illustrates the generic policy configuration
   model as used between a FPC Client and a FPC Agent.
</t>

  <t>
<figure anchor="fig_port" title="Structure of Policies and Ports">
        <artwork align="center"><![CDATA[

  Descriptor_1 -+          +- Action_1
                |          |
  Descriptor_2 -+--<Rule>--+- Action_2
                  +------+
                  /Order#/-------------+
                  +------+             |
                                       |
  Descriptor_3 -+          +- Action_3 +-<PolicyID>
                |          |           |  ^
  Descriptor_4 -+--<Rule>--+- Action_4 |  |
                  +------+             | <PolicyGroupID>
                  /Order#/-------------+  ^
                  +------+                |
                                         <PortID>

  +-------------------+     +---------------------+
  | Bind 1..M traffic |     |  Bind 1..N traffic  |
  |  Descriptors to   | --> |  treatment actions  |
  |     a Policy,     |     |      to a Policy,   |
  | Policy-Group and  |     |   Policy-Group and  |
  |       Port        |     |       Port          |
  +-------------------+     +---------------------+

 |                                                 |
 +-------------- Data-Plane Rule ------------------+
        ]]></artwork>
        <postamble></postamble>
      </figure>
</t>

  <t>
   As depicted in <xref target="fig_port"/>, the port represents the anchor
   of rules through the policy-group, policy, rule heirarchy.  A
   Client and Agent use the identifier of the associated policy to directly
   access the rule and perform modifications of traffic descriptors or action
   references.  A Client and Agent use the identifiers to access the descriptors
   or action to perform modifications. From the viewpoint of packet processing,
   arriving packets are matched against traffic descriptors and processed according
   to the treatment actions specified in the list of properties associated with the
   port.
  </t>
  <t>
   A Client complements a rule's descriptors with a match priority
   value to allow unambiguous traffic matching on the Data-Plane.
  </t>
<t><xref target="fig_context"/> illustrates the generic context configuration
   model as used between a FPC Client and a FPC Agent.
  </t>

   <t>
<figure anchor="fig_context" title="Structure of Contexts">
        <artwork align="center"><![CDATA[

  TrafficSelector_1
           |
  profile-parameters
           |
  mobility-profile-- dl ------+
                     ^        |
                     |      qos-profile
                <ContextID1>       |
                     ^        per-mn-agg-max-dl_2
                     |
                <ContextID2>

  +-------------------+     +---------------------+
  | Bind 1..M traffic |     |  Bind 1..N traffic  |
  |    selectors to   | --> |  treatment / qos    |
  |     a Context     |     |  actions to a       |
  |                   |     |       Context       |
  +-------------------+     +---------------------+

 |                                                 |
 +-------------- Data-Plane Rule ------------------+
        ]]></artwork>
        <postamble></postamble>
      </figure>
</t>
<t>
   As depicted in <xref target="fig_context"/>, the context represents a mobiility
   session heirarchy.  A Client and Agent directly assigns values such as dowlink
   traffic descriptors, QoS information, etc.  A Client and Agent use the context
   identifiers to access the descriptors, qos information, etc. to perform modifications.
   From the viewpoint of packet processing, arriving packets are matched against traffic
   descriptors and processed according to the qos or other mobility profile related actions
   specified in the context's properties. If present, the final action is to use a context's
   tunnel information to encapsulate and forward the packet.
  </t>
<t>A second context also references context1 in the figure.  Based upon the techology a property
  in a parent context MAY be inherited by its descendants.  This permits concise over the wire
  representation.  When a Client deletes a parent context all children are also deleted.</t>

  <t>Actions defines how to apply action to classified traffic flow by descriptors,
    such as traffic management related action such as shaping, policing based on
    given bandwidth, and connectivity management actions, such as pass, drop,
    forward to given nexthop. Noted that Actions are extensibly defined by
    specific profiles which 3gpp, ietf or other SDO produced. QCI (QoS Class
    Identifier)) from 3gpp, and  rfc7222 from ietf can become action profiles. .
  </t>
  <t>The following table shows the Action fields</t>
  <texttable anchor="action_field" title="Action Fields">
    <ttcol align="left">Field</ttcol>
    <ttcol align="left">Type</ttcol>
    <ttcol align="left">Description</ttcol>
      <c>ACTION_ID </c>
      <c>FPC-Identity (<xref target="naming"/>)</c>
      <c>An Action's Identifier.</c>

      <c>TYPE</c>
      <c>[32, unsigned integer]</c>
      <c>Defines action type how to treat specified traffic flow,
        such as pass, drop, forward to given nexthop value and shape,
        police based on given bandwidth value, etc.</c>

      <c>VALUE</c>
      <c>Type specific</c>
      <c>The Action's value.</c>
  </texttable>

  <t>Descriptors define classifiers of specific traffic flow, such as based on
    source and destination addresses, protocols, port numbers of
    TCP/UDP/SCTP/DCCP and if any. Noted that Descriptors are extensibly defined
    by specific profiles which 3gpp, ietf or other SDO produced. TFT (Traffic
    flow template) from 3gpp, and  rfc6089 from ietf can become descriptor profiles.
  </t>
  <t>The following table shows the Descriptor fields</t>
  <texttable anchor="descriptor_field" title="Descriptor Fields" align="left">
    <ttcol align="left">Field</ttcol>
    <ttcol align="left">Type</ttcol>
    <ttcol align="left">Description</ttcol>
      <c>DESCRIPTOR_ID </c>
      <c>FPC-Identity (<xref target="naming"/>)</c>
      <c>A Descriptor's Identifier.</c>

      <c>TYPE</c>
      <c>[32, unsigned integer]</c>
      <c>Defines descriptor type, which classifies specific traffic flow, such as
        source and destination addresses, protocols, port numbers of
        TCP/UDP/SCTP/DCCP or if any.</c>

      <c>VALUE</c>
      <c>Type specific</c>
      <c>The Descriptor's value.</c>
  </texttable>
  <t>Policies contain a list of rules by their order value. Each rule contains descriptors with
  optional directionality and actions with order values that specifies ordering if the rule
  has multiple actions.</t>
  <t>The following table shows the Policy fields</t>
  <texttable anchor="policy_field" title="Policy Fields" align="left">
    <ttcol align="left">Field</ttcol>
    <ttcol align="left">Type</ttcol>
    <ttcol align="left">Description</ttcol>
      <c>POLICY_ID</c>
      <c>FPC-Identity (<xref target="naming"/>)</c>
      <c>A Policy's Identifier.</c>

      <c>RULES</c>
      <c>*[ RULE ]</c>
      <c>List of rules. See <xref target="rule_field"/></c>
  </texttable>
  <t>Rules consist of the following fields.</t>
  <texttable anchor="rule_field" title="Rule Fields" align="left">
    <ttcol align="left">Field</ttcol>
    <ttcol align="left">Type</ttcol>
    <ttcol align="left">Description</ttcol>
      <c>ORDER</c>
      <c>[16, INTEGER]</c>
      <c>Specifies ordering if the multiple rules are present.</c>

      <c>RULE_DESCRIPTORS</c>
      <c>*[ DESCRIPTOR_ID DIRECTION ]</c>
      <c>The DESCRIPTOR_ID refers to a DESCRIPTOR. DIRECTION [2, unsigned
        bits] is an ENUMERTION (uplink, downlink or both) that specifies
        descriptor to which direction applies, such as upstream or
        downstream.</c>

      <c>RULE_ACTIONS</c>
      <c>*[ ACTION_ID ORDER ]</c>
      <c>The ACTION_ID refers to an ACTION.  ORDER [8, unsigned integer]
        specifies action order when multiple actions are present.</c>
  </texttable>

  <t>A policy-group refers to  a set of policies which are to apply to
    ports and contexts. Policy-groups consist of the following fields.</t>
  <texttable anchor="policygroup_field" title="Policy Group Fields" align="left">
    <ttcol align="left">Field</ttcol>
    <ttcol align="left">Type</ttcol>
    <ttcol align="left">Description</ttcol>
      <c>POLICY_GROUP_ID</c>
      <c>FPC-Identity (<xref target="naming"/>)</c>
      <c>A Policy-Groups's Identifier.</c>

      <c>POLICIES</c>
      <c>*[ POLICY_ID ]</c>
      <c>Indicates each Policy which the Policy-group includes.</c>
  </texttable>

  <t>Port is a set of policies which will apply to contexts or any traffic
    in the Dataplane node. It contains a list of Policy-groups which apply
    to the port.</t>
  <texttable anchor="port_field" title="Port Fields" align="left">
    <ttcol align="left">Field</ttcol>
    <ttcol align="left">Type</ttcol>
    <ttcol align="left">Description</ttcol>
      <c>PORT_ID</c>
      <c>FPC-Identity (<xref target="naming"/>)</c>
      <c>A Port's Identifier.</c>

      <c>POLICIES</c>
      <c>*[ POLICY_GROUP_ID ]</c>
      <c>Indicates each Policy-Group in the list.</c>
  </texttable>

  <t>An endpoint of a mobility session is abstracted as a context. The fields
    of a context is shown in table <xref target="context_fields"/>.</t>
  <texttable anchor="context_fields" title="Context Fields" align="left">
    <ttcol align="left">Field</ttcol>
    <ttcol align="left">Type</ttcol>
    <ttcol align="left">Description</ttcol>
      <c>CONTEXT_ID</c>
      <c>FPC-Identity (<xref target="naming"/>)</c>
      <c>A Context's Identifier.</c>

      <c>PORTS</c>
      <c>*[ PORT_ID ]</c>
      <c>List of Ports. When a context is applied to port(s), the context
        is configured by policies of port(s).</c>

      <c>DELEGATING IP PREFIXES</c>
      <c>*[ IP_PREFIX ]</c>
      <c>List of IP prefixes to be delegated to the mobile node of the
        context. An IP_PREFIX is an IPv4 or IPv6 PREFIX.</c>

      <c>UPLINK</c>
      <c>TUN_LOCAL_ADDRESS TUN_REMOTE_ADDRESS TUN_MTU TUN_PAYLOAD_TYPE TUN_TYPE TUN_IF
        [ MOB_PROFILE_TUN_PARAMS ] [ NEXTHOP ] [ QOS_PARAMS ]
        [ VENDOR_SPECIFIC_PARAMS ] </c>
      <c>Uplink information. See <xref target="context_link_fields"/>.</c>

      <c>DOWNLINK</c>
      <c>TUN_LOCAL_ADDRESS TUN_REMOTE_ADDRESS TUN_MTU TUN_PAYLOAD_TYPE TUN_TYPE TUN_IF
        [ MOB_PROFILE_TUN_PARAMS ] [ NEXTHOP ] [ QOS_PARAMS ]
        *[ VENDOR_SPECIFIC_PARAM ] </c>
      <c>Uplink information. See <xref target="context_link_fields"/>.</c>

      <c>PARENT_CONTEXT_ID</c>
      <c>FPC-Identity (<xref target="naming"/>)</c>
      <c>Indicates context which this context associated with. This will help to
        indicate relationships such as default/dedicated bearer relation.</c>

      <c>DPN_GROUP_ID</c>
      <c>FPC-Identity (<xref target="naming"/>)</c>
      <c>Indicates DPN-Group in the case of the context is configured to attach
        to the DPN-group.</c>

      <c>DPNS</c>
      <c>*[ DPN ]</c>
      <c>List of the DPNs which the Context accommodates. When DPN-group is indicated,
        this list is derived from the group definition.  See <xref target="context_dpn_fields"/></c>
  </texttable>

  <texttable anchor="context_link_fields" title="Context Downlink/Uplink Field Definitions" align="left">
    <ttcol align="left">Field</ttcol>
    <ttcol align="left">Type</ttcol>
    <ttcol align="left">Description</ttcol>
      <c>TUN_LOCAL_ADDRESS</c>
      <c>IP Address</c>
      <c>Endpoint address of the DPN. [NOTE 1]</c>

      <c>TUN_REMOTE_ADDRESS</c>
      <c>IP Address</c>
      <c>Endpoint address of the remote DPN. [NOTE 1]</c>

      <c>TUN_MTU</c>
      <c>[32, unsigned integer]</c>
      <c>Specifies profile specific direction (uplink/downlink) tunnel's MTU.</c>

      <c>TUN_PAYLOAD_TYPE</c>
      <c>[2, bits]</c>
      <c>An enumeraiton of the tunnel payload type: payload_ipv4(0), payload_ipv6(1) or payload_dual(2).</c>

      <c>TUN_TYPE</c>
      <c>[8, unsigned integer]</c>
      <c>An enumeration that specifies the tunnel subtype. Current values include IP-in-IP(0), UDP(1)
         GRE(2) and GTP(3).</c>

      <c>INPUT_IF</c>
      <c>[16, unsigned integer]</c>
      <c>Input interface index.</c>

      <c>MOB_PROFILE_TUN_PARAMS</c>
      <c>[ IETF_PMIP_MOB_PROFILE |
           3GPP_MOB_PROFILE ]</c>
      <c>Specifies profile specific direction (uplink/downlink) tunnel parameters to the
        DPN. The profiles includes GTP/TEID for 3gpp profile, GRE/Key for ietf-pmip profile,
        or new profile if anyone will define it. [NOTE 1]</c>

      <c>NEXTHOP</c>
      <c>[ IP Address | MAC Address | SPI | MPLS Label | SID | Interface Index ] (See <xref target="nexthop_subtypes"/>).</c>
      <c>Indicates nexthop information of downlink in access network or the uplink in external
        network, such as IP address, MAC address, SPI of service function chain, SID of segment
        routing, or if any. [NOTE 1]</c>

      <c>QOS_PARAMS</c>
      <c>[ 3GPP_QOS | PMIP_QOS ]</c>
      <c>Specifies profile specific QoS parameter of downlink/uplink, such as QCI/TFT for 3gpp profile,
        rfc6089/7222 for ietf-pmip, or extensions of this specification. [NOTE 1]</c>

      <c>VENDOR_SPECIFIC_PARAM</c>
      <c> Varies </c>
      <c>Vendor specific parameter. [NOTE 1]</c>
      <postamble>
        NOTE 1 - These parameters are extensible.  The Types may be extended for Field value by
        future specifications or in the case of Vendor Specific Attributes by enterprises.
      </postamble>
  </texttable>

  <texttable anchor="context_dpn_fields" title="Context DPN Fields" align="left">
    <ttcol align="left">Field</ttcol>
    <ttcol align="left">Type</ttcol>
    <ttcol align="left">Description</ttcol>

    <c>DPN_ID</c>
    <c>FPC-Identity (<xref target="naming"/>)</c>
    <c>DPN Identifier.</c>

    <c>DIRECTION</c>
    <c>[2, bits]</c>
    <c>Indicates if the DPN serves uplink(0), downlink(1) or
    both(2).</c>

    <c>MOB_PROFILE_PARAMS</c>
    <c>TUN_LOCAL_ADDRESS TUN_REMOTE_ADDRESS TUN_MTU
        TUN_PAYLOAD_TYPE TUN_TYPE
        [ MOB_PROFILE_TUN_PARAMS ] [ NEXTHOP ] [ QOS_PARAMS ]
        [ VENDOR_SPECIFIC_PARAMS ] [ TUN_IF ]</c>
    <c>Mobility Profile information. See <xref target="context_link_fields"/>.</c>

    <c>DPN_PARAMS</c>
    <c> Varies </c>
    <c>Specific parameters, such like if-index, tunnel-if-number
      that must be unique in the DPN.</c>
  </texttable>

  <section anchor="topology" title="Topology Structures">
  <t>This section defines topology structures such as DPNs and DPN Groups.</t>
  <texttable anchor="dpn_fields" title="DPN Fields" align="left">
    <ttcol align="left">Field</ttcol>
    <ttcol align="left">Type</ttcol>
    <ttcol align="left">Description</ttcol>

    <c>DPN_ID</c>
    <c>FPC-Identity. See <xref target="naming"/></c>
    <c>DPN Identifier.</c>

    <c>IP_ADRRESS</c>
    <c>IP Address</c>
    <c>DPN's IP Address.</c>

    <c>CONTROL_PROTOCOL</c>
    <c>Enumeration</c>
    <c>Specifies control protocol, such as BGP, Netconf, Restconf, FORCES, XMPP,
      Openflow, if any.</c>

    <c>DPN_GROUPS</c>
    <c>FPC-Identity. See <xref target="naming"/></c>
    <c>Indicates DPN-Groups where DPN works as a member of the DPN-Group.</c>
  </texttable>

  <texttable anchor="dpn_groups" title="DPN Groups" suppress-title="false" align="left">
    <ttcol align="left">Field</ttcol>
    <ttcol align="left">Type</ttcol>
    <ttcol align="left">Description</ttcol>

    <c>DPN_GROUP_ID</c>
    <c>FPC-Identity. See <xref target="naming"/></c>
    <c>DPN Group Identifier.</c>

    <c>FORWARDING_PLANE_ROLE</c>
    <c>Enumeration</c>
    <c>Defines forwarding-plane role of the DPN-Group, such as access-dpn, L2/L3 anchor-dpn.</c>

    <c>ACCESS_TYPE</c>
    <c>Enumeration</c>
    <c>Defines access type which the DPN-Group capable, such as ethernet(802.3/11), 3gpp cellular(S1,
      RAB), if any. </c>

    <c>MOBILITY_PROFILE</c>
    <c><xref target="context_link_fields"/></c>
    <c>Defines supporting mobility profile, such as ietf-pmip, 3gpp, or new profile if anyone will define
      it. When those profiles are correctly defined, some or all of forwarding-plane parameters of
      contexts can be automatically derived from the profile by FPC agent.</c>

    <c>PEER_DPN_GROUPS</c>
    <c>DPN_GROUP_ID REMOTE_ENDPOINT_ADDRESS LOCAL_ENDPOINT_ADDRESS
    TUN_MTU MOB_PROFILE_TUN_PARAMS FORWARDING_PLANE_ROLE</c>
    <c>Indicates DPN-Groups where DPN works as a member of the DPN-Group.</c>

    <c>REMOTE_ENDPOINT_ADDRESS</c>
    <c>IP Address</c>
    <c>Defines Endpoint address of the peering DPN-Group.</c>

    <c>LOCAL_ENDPOINT_ADDRESS</c>
    <c>IP Address</c>
    <c>Defines Endpoint address of its own DPN-Group to peer the remote DPN-Group. </c>
  </texttable>
  </section>

  <section anchor="mess_notifications" title="Monitors">
    <texttable anchor="monitor_structs" title="Monitor Structures and Attributes" align="left">
      <ttcol align="left">Field</ttcol>
      <ttcol align="left">Type</ttcol>
      <ttcol align="left">Description</ttcol>

      <c>MONITOR_ID</c>
      <c>FPC-Identity. See <xref target="naming"/></c>
      <c>Identifies a registered monitor.</c>

      <c>EVENT_TYPE_ID</c>
      <c>[8, Event Type ID]</c>
      <c>Identifies an event type (unsigned integer).</c>

      <c>MONITOR</c>
      <c>MONITOR_ID TARGET [REPORT_CONFIG]</c>
      <c>A Monitor.</c>

      <c>TARGET</c>
      <c>FPC-Identity. See <xref target="naming"/></c>
      <c>A Target MAY be an entity, e.g. Context, port, etc. or it may be the attribute of an entity.  When
      it is an attribute the fully qualified path (instance identifier) is reuqired.  This is equal to the
      FPC-Identity of the top level structure concatenated by a '/' and the relative path to the attribute.</c>

      <c>REPORT_CONFIG</c>
      <c>[8, REPORT-TYPE] [TYPE_SPECIFIC_INFO]</c>
      <c>The type of report and type-specific configuration.</c>

      <c>PERIODIC_CONFIG</c>
      <c>[32, period]</c>
      <c>period specifies the report interval (ms).</c>

      <c>THRESHOLD_CONFIG</c>
      <c>[32, low] [32, hi]</c>
      <c>low and high thresholds (at least one value must be present)</c>

      <c>SCHEDULED_CONFIG</c>
      <c>[32, time]</c>
      <c>time specifies when the report must be sent.</c>

      <c>EVENTS_CONFIG</c>
      <c>*[EVENT_TYPE_ID]</c>
      <c>List of events that triggers a report.</c>
    </texttable>
    <texttable anchor="notify_structs" title="Monitor Notifications" align="left">
      <ttcol align="left">Field</ttcol>
      <ttcol align="left">Type</ttcol>
      <ttcol align="left">Description</ttcol>

      <c>NOTIFICATION_ID</c>
      <c>[32, unsiged integer]</c>
      <c>Notifiction Identifier.</c>

      <c>TRIGGER</c>
      <c>[32, unsigned integer]</c>
      <c>The trigger for this notification.</c>

      <c>NOTIFY</c>
      <c>NOTIFICATION_ID MONITOR_ID TRIGGER [32, timestamp] [NOTIFICATION_DATA]</c>
      <c>A Notification. timestamp notes when the event occurred. Notification Data is
      specific to the TRIGGER and Monitor type.</c>
    </texttable>
    <t>TRIGGERS include but are not limited to the following values:
      <list style="symbols">
        <t>Events specified in the Event List of an EVENTS CONFIG</t>
        <t>LOW_THRESHOLD_CROSSED</t>
        <t>HIGH_THRESHOLD_CROSSED</t>
        <t>PERIODIC_REPORT</t>
        <t>SCHEDULED_REPORT</t>
        <t>PROBED</t>
        <t>DEREG_FINAL_VALUE</t>
      </list>
    </t>
  </section>
</section>
</section>

  <section anchor="mess_attributes" title="Message Attributes">
    <section anchor="op-header" title="Header">
      <t>Each operation contains a header with the following fields:</t>
    <texttable anchor="op-header-tables" title="Message Header Fields">
    <ttcol align="left">Field</ttcol>
    <ttcol align="left">Type</ttcol>
    <ttcol align="left">Description</ttcol>

    <c>CLIENT_ID</c>
    <c>FPC-Identity (<xref target="naming"/>)</c>
    <c>FPC Client Identifier</c>

    <c>DELAY</c>
    <c>[32, unsigned integer]</c>
    <c>Delay, in milliseconds, from the time the operation is received by the Agent for the
      operation(s) to take effect.</c>

    <c>SESSION_STATE</c>
    <c>[8, session state] </c>
    <c>Sets the expected state of the entities embedded in the operation body after successful
      completion of the operation. This can be 'complete', 'incomplete' or 'outdated'. Any operation
      that is 'incomplete' MAY NOT result in communication between the Agent and DPN. If the result is
      'outdated' any new operations on these entities or new references to these entities have unpredictable
      results.</c>

    <c>ADMIN_STATE </c>
    <c>[8, admin state]</c>
    <c>Sets the administrative status for all entities. If the status is set to virtual, any existing data on the
      DPN is removed. If the value is set to disabled, then an operation will occur on the DPN IF the entity
      exists on the DPN. If set to 'active' the DPN will be provisioned. Values are 'enabled', 'disabled' or
      'virtual'.</c>

    <c>OP_TYPE</c>
    <c>[8, op type]</c>
    <c>The type of operation. Valid values are 'create', 'update', 'query' or 'delete'.</c>

    <c>COMMAND_SET</c>
    <c>FPC Command Bitset</c>
    <c>If supported by the Agent. See <xref target="commandsets"/>.</c>
    </texttable>
    </section>

    <section anchor="op-body" title="Body">
    <t>An operation body contains an operation identifier an lists of entities.</t>
    <texttable anchor="op_input" title="Message Body Fields">
    <ttcol align="left">Field</ttcol>
    <ttcol align="left">Type</ttcol>
    <ttcol align="left">Description</ttcol>

    <c>OP_ID</c>
    <c>[64, unsigned integer]</c>
    <c>Operation identifier which is used in responses and related notifications.</c>

    <c>CLONES</c>
    <c>*[ FPC-Identity FPC-Identity ] (<xref target="naming"/>)</c>
    <c>If supported by the Agent, this is a list of clone instructions.  The first argument
      is the entity to be cloned and the second argument is the name of the newly cloned entity.
      See <xref target="cloning"/></c>

    <c>DESCRIPTORS</c>
    <c>*[ DESCRIPTOR ]</c>
    <c>List of descriptors.</c>

    <c>ACTIONS</c>
    <c>*[ ACTION ]</c>
    <c>List of actions.</c>

    <c>POLICIES</c>
    <c>*[ POLICY ]</c>
    <c>List of policies.</c>

    <c>POLICY_GROUPS</c>
    <c>*[ POLICY_GROUP ]</c>
    <c>List of policy-groups.</c>

    <c>PORTS</c>
    <c>*[ PORT [ COMMAND_SET ] ]</c>
    <c>List of ports that may optionally come with Command bitsets, if Command Sets are
      supported by the Agent. See <xref target="commandsets"/>.</c>

    <c>CONTEXTS</c>
    <c>*[ CONTEXT [ COMMAND_SET ] ]</c>
    <c>List of contexts that may optionally come with Command bitsets, if Command Sets are
      supported by the Agent. See <xref target="commandsets"/>.</c>
    </texttable>
    </section>
  </section>

  <section anchor="mess_messages" title="Messages">
<t>An FPC Client and Agent MUST identify themself using the CLI_ID and AGT_ID respectively to ensure that for all
transactions a recipient of an FPC message can unambiguously identify the sender of the FPC message.
<!--All messages between an Agent and a Client must identify the Client and Agent using the CLI_ID and AGT_ID respectively.-->
A Client MAY direct the Agent to enforce a rule in a particular DPN by including a DPN_ID value. Otherwise the Agent
selects a suitable DPN to enforce a rule and notifies the Client about the selected DPN using the DPN_ID.</t>

<t>All messages sent from a Client to an Agent MUST be acknowledged by the Agent. The response must
include all attributes as well as status information, which indicates the result of processing the message,
using the RESULT property. In case the processing of the message results in a failure, the Agent sets
the RESULT accordingly and MAY clear the property or traffic descriptor, which caused the failure,
in the response.</t>

<t>A Client MAY add a property to a port without providing all required details of the attribute's value. In such case
the Agent SHOULD determine the missing details and provide the completed property description back to the Client.
In case the Agent cannot determine the missing value of an attribute's value per the Client's request, it leaves the
attribute's value cleared in the response and sets the RESULT to failure. As example, the Control-Plane needs to setup
a tunnel configuration in the Data-Plane but has to rely on the Agent to determine the tunnel endpoint which is
associated with the DPN that enforces the rule. The Client adds the tunnel property attribute to the FPC message and
clears the value of the attribute (e.g. IP address of the local tunnel endpoint). The Agent determines the tunnel
endpoint and includes the completed tunnel property in its response to the Client.</t>


<t><xref target="fig_msc_example"></xref> illustrates an exemplary session life-cycle based on
Proxy Mobile IPv6 registration via MAG Control-Plane function 1
(MAG-C1) and handover to MAG Control-Plane function 2 (MAG-C2). Edge DPN1 represents the Proxy CoA after
attachment, whereas Edge DPN2 serves as Proxy CoA after handover. As exemplary architecture,
the FPC Agent and the network control function are assumed to be co-located with the Anchor-DPN, e.g. a Router.
</t>

<t>
 <figure anchor="fig_msc_example"
              title="Exemplary Message Sequence (focus on FPC reference point)">
        <artwork align="center"><![CDATA[
                                                +-------Router--------+
                        +-----------+           |+-------+ +---------+|
+------+ +------+     +-----+ FPC   |            | FPC   | |  Anchor |
|MAG-C1| |MAG-C2|     |LMA-C| Client|            | Agent | |   DPN   |
+------+ +------+     +-----+-------+            +-------+ +---------+
[MN attach]  |            |                          |           |
   |-------------PBU----->|                          |           |
   |         |            |----(1)-PRT_ADD---------->|           |
   |         |            |        [PRT_ID]          |           |
   |         |            |                          |           |
   |         |            |--(2)---PROP_ADD--------->|           |
   |         |            |   [PRT_ID,PROP_TUN]      |--tun1 up->|
   |         |            |                          |           |
   |         |            |--(3)---PROP_ADD--------->|           |
   |         |            |    [PRT_ID,PROP_QOS]     |--tc qos-->|
   |<------------PBA------|--(4)----TS_ADD---------->|           |
   | +----+  |            |       [PRT_ID,           |-route add>|
   | |Edge|  |            |    TD_CONTAINER(HNP)]    |           |
   | |DPN1|  |            |                          |           |
   | +----+  |            |                          |           |
   |   |                                                         |
   |   |-=======================================================-|
   |                      |                          |           |
   |   [MN handover]      |                          |           |
   |         |---PBU ---->|                          |           |
   |         |            |--(5)---PROP_MOD--------->|           |
   |         |<--PBA------|    [PRT_ID,PROP_TUN]     |-tun1 mod->|
   |         |            |                          |           |
   |         |  +----+    |                          |           |
   |         |  |Edge|    |                          |           |
   |         |  |DPN2|    |                          |           |
   |         |  +----+    |                          |           |
   |         |    |       |                          |           |
   |         |    |-============================================-|
   |         |            |                          |           |

      ]]></artwork>
        <postamble></postamble>
      </figure>
</t>

<t>After reception of the Proxy Binding Update (PBU) at the LMA Control-Plane function (LMA_C), the
LMA-C selects a suitable DPN, which serves as Data-Plane anchor to the mobile node's (MN) traffic. The LMA-C
adds a new logical port to the DPN to treat the MN's traffic (1) and includes a Port Identifier (PRT_ID)
to the PRT_ADD command. The LMA-C identifies the selected Anchor DPN by including the associated DPN identifier.
</t>

<t>Subsequently, the LMA-C adds properties to the new port. One property is added (2) to specify the
forwarding tunnel type and endpoints (Anchor DPN, Edge DPN1). Another property is added (3) to specify the QoS
differentiation, which the MN's traffic should experience. At reception of the properties, the FPC Agent
utilizes local configuration commands to create the tunnel (tun1) as well as the traffic control (tc)
to enable QoS differentiation. After configuration of port properties have been completed, the LMA binds the
traffic description for the MN's traffic to the port by sending a TS_CONTAINER to the Agent and identifying the
MN's Nome Network Prefix (HNP) in the traffic descriptor. At the reception of the traffic descriptor, the Agent
applies a new route to forward all traffic destined to the MN's HNP to the configured tunnel interface (tun1).</t>

<t>During handover, the LMA-C receives an updating PBU from the handover target MAG-C2. The PBU refers to a
new Data-Plane node (Edge DPN2) to represent the new tunnel endpoint. The LMA-C sends a PROP_MOD message (5)
to the Agent to modify the existing tunnel property of the existing port and to update the tunnel endpoint
from Edge DPN1 to Edge DPN2. Upon reception of the PROP_MOD message, the Agent applies updated tunnel property
to the local configuration.</t>

<t>To reduce the number of protocol handshakes between the LMA-C and the DPN, the LMA-C can
append properties (PROP_TUN, PROP_QOS) and traffic descriptor attributes to the PRT_ADD message,
as illustrated in <xref target="fig_msc_aggr_example"></xref>.</t>

<t>
 <figure anchor="fig_msc_aggr_example"
              title="Example: Sequence for Message Aggregation (focus on FPC reference point)">
        <artwork align="center"><![CDATA[
                        +-----------+             +-------+ +---------+
+------+ +------+     +-----+ FPC   |             | FPC   | |  Anchor |
|MAG-C1| |MAG-C2|     |LMA-C| Client|             | Agent | |   DPN   |
+------+ +------+     +-----+-------+             +-------+ +---------+
[MN attach]  |            |                           |           |
   |-------------PBU----->|                           |           |
   |         |            |----(1)-PRT_ADD----------->|           |
   |         |            |      [PRT_ID,PROP_TUN,    |--tun1 up->|
   |<------------PBA------|              PROP_QOS,    |--tc qos-->|
   |         |            |       TS_CONTAINER(HNP)]  |-route add>|
   | [Edge]-=====================================================-|
   | [DPN1|  |            |                           |           |
   |         |            |                           |           |
   |   [MN handover]      |                           |           |
   |         |---PBU ---->|                           |           |
   |         |            |---------PROP_MOD--------->|           |
   |         |<--PBA------|     [PRT_ID,PROP_TUN]     |-tun1 mod->|
   |         |            |                           |           |
   |         | [Edge]-===========================================-|
   |         | [DPN2]     |                           |           |

      ]]></artwork>
        <postamble></postamble>
      </figure>
</t>
</section>

<section title="Security Considerations">

<t>Detailed protocol implementations for DMM Forwarding Policy Configuration must ensure integrity
of the information exchanged between an FPC Client and an FPC Agent. Required Security Associations
may be derived from co-located functions, which utilize the FPC Client and FPC Agent respectively.
</t>

  </section>

<section anchor="derived_attrs" title="Derived and Subtype Attributes">
<t>This section notes derived attributes.</t>
  <texttable anchor="descriptor_subtypes" title="Descriptor Subtypes" align="left">
    <ttcol align="left">Field</ttcol>
    <ttcol align="left">Type Value</ttcol>
    <ttcol align="left">Type</ttcol>
    <ttcol align="left">Description</ttcol>

    <c>TO_PREFIX</c>
    <c>0</c>
    <c>[IP Address] [ Prefix Len ]</c>
    <c>Aggregated or per-host destination IP address/prefix descriptor.</c>

    <c>FROM_PREFIX</c>
    <c>1</c>
    <c>[IP Address] [ Prefix Len ]</c>
    <c>Aggregated or per-host source IP address/prefix descriptor.</c>

    <c>TRAFFIC_SELECTOR</c>
    <c>2</c>
    <c>Format per specification <xref target="RFC6088"/>.</c>
    <c>Traffic Selector, format as per <xref target="RFC6088"/>.</c>
  </texttable>

  <texttable anchor="action_subtypes" title="Action Subtypes" align="left">
    <ttcol align="left">Field</ttcol>
    <ttcol align="left">Type Value</ttcol>
    <ttcol align="left">Type</ttcol>
    <ttcol align="left">Description</ttcol>

    <c>DROP</c>
    <c>0</c>
    <c>Empty</c>
    <c>Drop the associated packets.</c>

    <c>REWRITE</c>
    <c>1</c>
    <c>[in_src_ip] [out_src_ip]
       [in_dst_ip] [out_dst_ip]
       [in_src_port] [out_src_port]
       [in_dst_port] [out_dst_port]</c>
    <c>Rewrite IP Address (NAT) or IP Address / Port (NAPT).</c>

    <c>COPY_FORWARD</c>
    <c>2</c>
    <c>FPC-Identity. See <xref target="naming"/>.</c>
    <c>Copy all packets and forward them to the provided identity.  The value of the
    identity MUST be a port or context.</c>
  </texttable>

  <texttable anchor="nexthop_subtypes" title="Next Hop Subtypes" align="left">
    <ttcol align="left">Field</ttcol>
    <ttcol align="left">Type Value</ttcol>
    <ttcol align="left">Type</ttcol>
    <ttcol align="left">Description</ttcol>

    <c>IP_ADDR</c>
    <c>0</c>
    <c>IP Address</c>
    <c>An IP Address.</c>

    <c>MAC_ADDR</c>
    <c>1</c>
    <c>MAC Address</c>
    <c>A MAC Address.</c>

    <c>SERVICE_PATH_ID</c>
    <c>2</c>
    <c>[24, unsigned integer]</c>
    <c>Service Path Identifier (SPI)</c>

    <c>MPLS_LABEL</c>
    <c>3</c>
    <c>[20, unsigned integer]</c>
    <c>MPLS Label</c>

    <c>NSH</c>
    <c>4</c>
    <c>[SERVICE_PATH_ID] [8, unsigned integer]</c>
    <c>Included NSH which is a SPI and Service Index (8 bits).</c>

    <c>INTERFACE_INDEX</c>
    <c>5</c>
    <c>[16, unsigned integer]</c>
    <c>Interface Index (an unsigned integer).</c>
  </texttable>

  <texttable anchor="qos_subtypes" title="QoS Subtypes" align="left">
    <ttcol align="left">Field</ttcol>
    <ttcol align="left">Type Value</ttcol>
    <ttcol align="left">Type</ttcol>
    <ttcol align="left">Description</ttcol>

    <c>QOS</c>
    <c>0</c>
    <c>[qos index type] [index] [DSCP]</c>
    <c>Refers to a single index and DSCP to write to the packet.</c>

    <c>GBR</c>
    <c>1</c>
    <c>[32, unsigned integer]</c>
    <c>Guaranteed bit rate.</c>

    <c>MBR</c>
    <c>2</c>
    <c>[32, unsigned integer]</c>
    <c>Maximum bit rate.</c>

    <c>PMIP_QOS</c>
    <c>3</c>
    <c>Varies by Type</c>
    <c>A non-traffic selector PMIP QoS Attribute per <xref target="RFC7222"/></c>
  </texttable>

  <texttable anchor="tunnel_subtypes" title="Tunnel Subtypes" align="left">
    <ttcol align="left">Field</ttcol>
    <ttcol align="left">Type Value</ttcol>
    <ttcol align="left">Type</ttcol>
    <ttcol align="left">Description</ttcol>

    <c>IPIP_TUN</c>
    <c>0</c>
    <c></c>
    <c>IP in IP Configuration</c>

    <c>UDP_TUN</c>
    <c>1</c>
    <c>[src_port] [dst_port]</c>
    <c>UDP Tunnel - source and/or destination port</c>

    <c>GRE_TUN</c>
    <c>2</c>
    <c>[32, GRE Key]</c>
    <c>GRE Tunnel.</c>
  </texttable>

  <t>The following COMMAND_SET values are supported for IETF_PMIP.
    <list style="symbols">
      <t>assign-ip - Assign the IP Address for the mobile session.</t>
      <t>assign-dpn - Assign the Dataplane Node.</t>
      <t>session - Assign values for the Session Level.</t>
      <t>uplink - Command applies to uplink.</t>
      <t>downlink - Comman applies to downlink.</t>
    </list>
  </t>

 <section anchor="thregpp" title="3GPP Specific Extenstions">
  <t>3GPP support is optional and detailed in this section.</t>
  <texttable anchor="threegpp_attributes" title="3GPP Attributes and Structures">
    <ttcol align="left">Field</ttcol>
    <ttcol align="left">Type Value</ttcol>
    <ttcol align="left">Namespace / Entity Extended</ttcol>
    <ttcol align="left">Type</ttcol>
    <ttcol align="left">Description</ttcol>

    <c>GTPV1</c>
    <c>3</c>
    <c>Tunnel Subtypes namespace.</c>
    <c>LOCAL_TEID REMOTE_TEID SEQ_NUMBER</c>
    <c>Local and Remote Tunnel Endpoint Identifier (TEID).</c>

    <c>GTPV2</c>
    <c>4</c>
    <c>Tunnel Subtypes namespace.</c>
    <c>LOCAL_TEID REMOTE_TEID SEQ_NUMBER</c>
    <c>Local and Remote Tunnel Endpoint Identifier (TEID).</c>

    <c>LOCAL_TEID</c>
    <c>N/A</c>
    <c>N/A</c>
    <c>[32, unisgned integer]</c>
    <c>Local Tunnel Endpoint Identifier (TEID).</c>

    <c>REMOTE_TEID</c>
    <c>N/A</c>
    <c>N/A</c>
    <c>[32, unisgned integer]</c>
    <c>Remote Tunnel Endpoint Identifier (TEID).</c>

    <c>SEQ_NUMBER</c>
    <c>N/A</c>
    <c>N/A</c>
    <c>[32, unisgned integer]</c>
    <c>GTP Sequence Number. Used in failover and handover.</c>

    <c>TFT</c>
    <c>3</c>
    <c>Descriptors Subtypes namespace.</c>
    <c>Format per TS 24.008 Section 10.5.6.12.</c>
    <c>Traffic Flow Template (TFT).</c>

    <c>IMSI</c>
    <c>N/A</c>
    <c>Context (new attribute)</c>
    <c>[64, unsigned integer]</c>
    <c>International Mobile Subscriber Identity (IMSI).</c>

    <c>EBI</c>
    <c>N/A</c>
    <c>Context (new attribute)</c>
    <c>[4, unsigned integer]</c>
    <c>EPS Bearer Identity (EBI).</c>

    <c>3GPP_QOS</c>
    <c>4</c>
    <c>QoS Subtypes namespace.</c>
    <c>[8, qci] [32, gbr] [32, mbr] [32, apn_ambr] [32, ue_ambr] ARP</c>
    <c>3GPP QoS Structure with QoS Class Identifier (QCI), Guaranteed Bit Rate (GBR), Maximum Bit Rate (MBR),
    Access Point Name Aggregate Maximum Bit Rate (APN-AMBR), User Equipment Aggregate Maximum Bit Rate (UE-AMBR)
    and Allocation of Retention Priority (ARP).</c>

    <c>ARP</c>
    <c>N/A</c>
    <c>N/A</c>
    <c>See Allocation-Retention-Priority from <xref target="RFC7222"/></c>
    <c>Allocation of Retention Priority (ARP)</c>
  </texttable>

  <t>The following COMMAND_SET values are supported for 3GPP.
    <list style="symbols">
      <t>assign-ip - Assign the IP Address for the mobile session.</t>
      <t>assign-dpn - Assign the Dataplane Node.</t>
      <t>assign-fteid-ip - Assign the Fully Qualified TEID (F-TEID) LOCAL IP address.</t>
      <t>assign-fteid-teid - Assign the Fully Qualified TEID (F-TEID) LOCAL TEID.</t>
      <t>session - Assign values for the Session Level.  When this involves 'assign-fteid-ip' and 'assign-fteid-teid' this implies the values are part
        of the default bearer.</t>
      <t>uplink - Command applies to uplink.</t>
      <t>downlink - Comman applies to downlink.</t>
    </list>
  </t>
 </section>
</section>

<section anchor="IANA" title="IANA Considerations">

<t>This document provides a data model and protocol operation for DMM Forwarding Policy Configuration.
YANG models are currently included in the Appendix and will be updated per the next revision of this document
to specify the data model as well as to enable an implementation of the FPC protocol using RPC.</t>

<t>No actions from IANA are required. In case the semantics of this specification will be mapped
to a particular wire protocol, authors of an associated separate document will approach IANA for
the associated action to create a registry or add registry entries.
</t>

<!--
<t>
Detailed protocol specifications for DMM Forwarding Policy Configuration will follow the information
model as per this document and can be based on, for example, ReST-like or binary protocol formats.
Such protocol-specific details will be described in separate documents and may require IANA actions.
</t>
-->

</section>

    <section title="Work Team Participants">

    <t>Participants in the FPSM work team discussion include Satoru Matsushima, Danny Moses, Sri Gundavelli, Marco Liebsch,
       Pierrick Seite, Alper Yegin, Carlos Bernardos, Charles Perkins and Fred Templin.
    </t>

    </section>


  </middle>

  <back>
    <references title="Normative References">
    &rfc2119;
    &RFC7333;
    &RFC7429;
    &RFC6088;

    </references>

    <references title="Informative References">

    &RFC5213;
    &RFC3344;
    &RFC7222;

</references>

<!--

<reference anchor="3GPP-PCRFFR" target="http://www.3gpp.org">
        <front>
            <title>3GPP TS 29.816  3GPP TS 29.272 Study on PRCF Failure and Restoration</title>
            <author initials="" surname="" fullname="">
                <organization />
            </author>
        </front>
    </reference>

<reference anchor="3GPP-DIAM" target="http://www.3gpp.org">
        <front>
            <title>3GPP TS 29.272  Mobility Management Entity (MME) and Serving
	      GPRS Support Node (SGSN) related interfaces based on Diameter protocol </title>
            <author initials="" surname="" fullname="">
                <organization />
            </author>
        </front>
    </reference>


    </references>
-->

<section anchor="yangmodel" title="YANG Data Model for the FPC protocol">


<t>These modules define Model I YANG definitions. Four modules are defined:</t>

<t><list style="symbols">
<t>ietf-dmm-fpcp-base (fpcp-base) - Defines the base model for Model I FPC as defined in this document</t>
<t>ietf-pmip-qos (pmip-qos) - Defines proxy mobile IPv6 QoS parameters per RFC 7222</t>
<t>ietf-traffic-selectors-types (traffic-selectors) - Defines Traffic Selectors per RFC 6088</t>
<t>ietf-dmm-fpcp-pmip - Augments fpcp-base to include PMIP Traffic Selectors as a Traffic Descriptor
subtype and pmip-qos QoS parameters, where applicable, as properties.</t>
</list></t>

<t>Note (2016-03-21): The YANG Data Model does not yet adopt all extensions per this version of
the draft and will be updated shortly after the IETF95 meeting.</t>

<!-- template for YANG model, start -->
<!--
<t>
 <figure anchor="yangmodel1"
              title="caption1">
        <artwork align="center"><![CDATA[

      ]]></artwork>
        <postamble></postamble>
      </figure>
</t>
-->
<!-- template for YANG model, end -->


<section anchor="yangfpcbase" title="FPC Base">

<section anchor="yang-fpc-base-model" title="FPC Base YANG Model">

<t>
 <figure anchor="fig-yang-fpc-base-model"
              title="FPC YANG base">
        <artwork align="center"><![CDATA[
module ietf-dmm-fpcp-base {
    namespace "urn:ietf:params:xml:ns:yang:ietf-dmm-fpcp-base";
    prefix fpcp-base;

    import ietf-inet-types { prefix inet; }

    organization "IETF DMM Working Group";
    contact "Satoru Matsushima <satoru.matsushima@g.softbank.co.jp>";

    description
    "This module contains YANG definition for
     Forwarding Policy Configuration Protocol.(FPCP)";

    revision 2016-01-18 {
        description "Changes based on -01 version of FPCP draft.";
        reference "draft-ietf-dmm-fpc-cpdp-01";
    }

    typedef fpcp-name-type {
        type string;
        description "FPCP common name type";
    }

    typedef fpcp-carrier-id {
        type uint16;
        description "Carrier-ID";
    }

    typedef fpcp-network-id {
        type uint16;
        description "Carrier-ID";
    }

    typedef fpcp-client-id {
        type uint32;
        description "Client-ID";
    }

    typedef fpcp-agent-id {
        type uint32;
        description "Agent-ID";
    }

    typedef fpcp-dpn-id {
        type uint32;
        description "Carrier-ID";
    }

    typedef fpcp-port-id {
        type uint32;
        description "PRT_ID";
    }

    typedef fpcp-property-id {
        type uint8;
        description "PRT_PROP_ID";
    }

    typedef fpcp-rule-id {
        type uint8;
        description "PRT_RULE_ID";
    }

    typedef fpcp-qos-class-identifier {
        type uint8 {
            range "1..9";
        }
        description "QCI";
    }

    typedef fpcp-qos-bandwidth {
        type uint32;
        description "Bandwith value in bit per second.";
    }

    identity tunnel-type {
        description
        "Base identity from which specific use of
         tunnels are derived.";
    }

    identity fpcp-tunnel-type {
        base "tunnel-type";
        description
        "Base identity from which specific tunnel
         types in FPCP uses are derived.";
    }

    identity ip-in-ip {
        base "fpcp-tunnel-type";
        description "IP-in-IP tunnel";
    }

    identity gtp {
        base "fpcp-tunnel-type";
        description "GTP-U tunnel";
    }

    identity gre {
        base "fpcp-tunnel-type";
        description "GRE tunnel";
    }

    identity service-function {
        description
        "Base identity from which specific
         service function types are derived.";
    }

    identity ip-protocol {
        description
        "Base identity from which specific
         IP protocol types are derived.";
    }

    identity property-type {
        description
        "Base identity of property";
    }

    identity property-qos {
        base "property-type";
        description
        "QoS property";
    }

    identity property-endpoint {
        base "property-type";
        description
        "Endpoint property";
    }

    identity property-type-endpoint {
        base "property-type";
        description
        "Endpoint property";
    }

    identity qos-type {
        description
        "Base identity from which specific
         uses of QoS types are derived.";
    }

    identity fpcp-qos-type {
        base "qos-type";
        description
        "Base identity from which specific
         QoS types in FPCP uses are derived.";
    }

    identity fpcp-qos-type-gbr {
        base "fpcp-qos-type";
        description
        "A QoS Type for Guaranteed Bit Rate (GBR).";
    }

    identity fpcp-qos-type-mbr {
        base "fpcp-qos-type";
        description
        "A QoS Type for Maximum Bit Rate (MBR).";
    }

    identity fpcp-qos-index-type {
        base "qos-type";
    }

    identity fpcp-qos-index {
        base "fpcp-qos-index-type";
    }


    identity traffic-descriptor-type {
    }

    identity fpcp-traffic-descriptor {
        base "traffic-descriptor-type";
    }

    grouping carrier {
        description "Identify FPCP Carrier";
        leaf carrier-id {
            type fpcp-carrier-id;
            mandatory true;
            description "Carrier ID";
        }
    }

    grouping agent {
        description "AGT_ID to identify FPCP Agent";
        leaf agent-id {
            type fpcp-agent-id;
            description "Agent ID";
        }
    }

    grouping client {
        description "CLI_ID to identify FPCP Client";
        leaf client-id {
            type fpcp-client-id;
            description "Client ID";
        }
    }


    grouping network {
        description "Identify FPCP Network";
        leaf network-id {
            type fpcp-network-id;
            description "Network ID";
        }
    }

    grouping dpn {
        description "Identify FPCP Data-Plane Node";
        leaf dpn-id {
            type fpcp-dpn-id;
            description "DPN ID";
        }
    }

    grouping port {
        description "Identify FPCP Port";
        leaf port-id {
            type fpcp-port-id;
            description "Port-ID";
        }
    }

    grouping property {
        description "Identify FPCP Property";
        leaf property-id {
            type fpcp-property-id;
            description "Property-ID";
        }
    }

    grouping rule {
        description "Identify FPCP Rule";
        leaf rule-id {
            type fpcp-rule-id;
            description "Rule-ID";
        }
    }

    grouping fpcp-carrier {
        description "Define FPCP network";
        uses carrier;
        uses agent;
        list client {
            key client-id;
            description "List of FPCP Clients";
            leaf name {
                type fpcp-name-type;
                description "Client Name";
            }
            uses client;
        }
        list dpn {
            key dpn-id;
            description "List of FPCP DPNs";
            leaf name {
                type fpcp-name-type;
                description "DPN Name";
            }
            uses dpn;
        }
    }

   grouping dpn-set {
        description "DPNs which consist a DPN set.";
        leaf name {
            type fpcp-name-type;
            description "DPN set name";
        }
        leaf network {
            type leafref {
                path "/fpcp-carriers/carrier/network/network-id";
            }
            description "Network-ID which a DPN-set is belonging to.";
        }
        leaf role {
            type enumeration {
                enum anchor-l3 {
                    description "";
                }
                enum anchor-l2 {
                    description "";
                }
                enum access {
                    description "";
                }
            }
            description "Define DPNs role in data-plane.";
        }
        list endpoint-dp {
            key local-address;
            description "List of data-plane endpoint properties of a
                         set of DPNs.";
            leaf local-address {
                type inet:ip-address;
                description "";
            }
            leaf remote-dpn {
                type leafref {
                    path "/fpcp-carriers/carrier/dpn-group/name";
                }
                description "";
            }
            leaf default-tunnel-type {
                type identityref {
                    base "fpcp-tunnel-type";
                }
                description "Tunnel Type";
            }
        }
   grouping dpn-set {
        description "DPNs which consist a DPN set.";
        leaf name {
            type fpcp-name-type;
            description "DPN set name";
        }
        leaf network {
            type leafref {
                path "/fpcp-carriers/carrier/network/network-id";
            }
            description "Network-ID which a DPN-set is belonging to.";
        }
        leaf role {
            type enumeration {
                enum anchor-l3 {
                    description "";
                }
                enum anchor-l2 {
                    description "";
                }
                enum access {
                    description "";
                }
            }
            description "Define DPNs role in data-plane.";
        }
        list endpoint-dp {
            key local-address;
            description "List of data-plane endpoint properties of a
                         set of DPNs.";
            leaf local-address {
                type inet:ip-address;
                description "";
            }
            leaf remote-dpn {
                type leafref {
                    path "/fpcp-carriers/carrier/dpn-group/name";
                }
                description "";
            }
            leaf default-tunnel-type {
                type identityref {
                    base "fpcp-tunnel-type";
                }
                description "Tunnel Type";
            }
        }
        list dpn {
            key dpn-id;
            uses dpn;
            description "DPN list in a DPN set";
        }
    }

    grouping tunnel-endpoints {
        description
        "PROP_TUN property as a set of tunnel endpoints";
        leaf tunnel-type {
            type identityref {
                base "fpcp-tunnel-type";
            }
            description "Tunnel Type";
        }
        leaf remote-address {
            type inet:ip-address;
            description "Remote endpoint";
        }
        leaf local-address {
            type inet:ip-address;
            description "Local endpoint";
        }
    }

    grouping gtp-attributes {
        description
        "GTP_CONF as GTP tunnel specific attributes";
        leaf remote-teid {
            type uint32;
            description "TEID of remote-endpoint";
        }
        leaf local-teid {
            type uint32;
            description "TEID of local-endpoint";
        }
    }
   grouping gre-attributes {
        description
        "GRE_CONF as GRE tunnel specific attribute";
        leaf key {
            type uint32;
            description "GRE_KEY";
        }
    }

    grouping rewriting-properties {
        description
        "PROP_REWR. TBD for which type of rewriting functions
         need to be defined";
        leaf type {
            type identityref {
                base service-function;
            }
            description "The type of service-function";
        }
    }

    grouping fpcp-qosattribute {
        leaf qci {
            type fpcp-qos-class-identifier;
        }
        leaf attributetype {
            type identityref {
                base fpcp-qos-type;
            }
            description "the attribute type";
        }
        leaf bandwidth {
            type fpcp-qos-bandwidth;
        }
    }

    grouping fpcp-qos-property {
        description "PROP_QOS";
        leaf name {
            type fpcp-name-type;
        }
        leaf qos-index-type {
            type identityref {
                base "fpcp-qos-index-type";
            }
        }
        choice index-type {
            case qci {
                when "../qos-index-type = 'fpcp-qos-index'";
                container uplink {
                    uses fpcp-qosattribute;
                }
                container downlink {
                    uses fpcp-qosattribute;
                }
            }
        }
    }


    grouping traffic-descriptor {
        description
        "Traffic descriptor group collects parameters to
         identify target traffic flow.";

        leaf destination-ip {
            type inet:ip-prefix;
            description "Rule of destination IP";
        }
        leaf source-ip {
            type inet:ip-prefix;
            description "Rule of source IP";
        }
    }


   grouping fpcp-traffic-descriptor {
        leaf name {
            type fpcp-name-type;
        }
        leaf traffic-discriptor-type {
            type identityref {
                base "traffic-descriptor-type";
            }
        }

        choice descriptor-type {
            case fpcp-traffic-descriptor {
                when "../descriptor-type = 'fpcp-traffic-descriptor'";
                uses traffic-descriptor;
            }
        }
    }

    grouping fpcp-forwarding-rule {
        uses rule;
        uses fpcp-traffic-descriptor;
    }

    grouping fpcp-port-properties {
        description
        "A set of port property attributes";

        uses property;
        list attached-dpns {
            key name;
            leaf name {
                type fpcp-name-type;
                description "DPN group name of which port attached.";
            }
            description "Port attached DPN group list.";
        }
        container endpoints {
            description "Tunnel Endpoint";
            uses tunnel-endpoints;
            choice tunnel {
                description "Tunnel-Type";
                case gtp-u {
                    when "tunnel-type = 'gtp'" {
                        description "In case of GTP-U is tunnel-type";
                    }
                    uses gtp-attributes;
                }
                case gre {
                    when "tunnel-type = 'gre'" {
                        description "In case of GRE is tunnel-type";
                    }
                    uses gre-attributes;
                }
            }
        }
        container qos {
            description "QoS Type";
            uses fpcp-qos-property;
            list port-in-aggregated-bandwidth {
                key port-id;
                uses port;
            }
        }
        container rewriting {
            description "Rewriting function";
            uses rewriting-properties;
        }
    }

    grouping port-field {
        description "Definition of attributes of port field";
        uses port;
        uses carrier;
        uses network;
    }

    // Container for configurations sets.

    container fpcp-carriers {
        description "Attributes set of FPCP network";

        list carrier {
            key carrier-id;
            description "List of carriers";
            leaf name {
                type fpcp-name-type;
                description "FPCP Carrier name";
            }
            uses fpcp-carrier;
            list network {
                key network-id;
                description "List of networks in a carrier.";
                leaf name {
                    type fpcp-name-type;
                    description "Define visible name of a network.";
                }
                uses network;
            }
            list dpn-group {
                key name;
                description "List of DPN groups in a carrier.";
                uses dpn-set;
            }
            list qos-profile {
                key name;
                uses fpcp-qos-property;
            }
            list traffic-descriptor {
                key name;
                uses fpcp-traffic-descriptor;
            }
        }
    }

    // Port Entries

    container port-entries {
        config false;
        description
        "This container binds set of traffic-descriptor and
         port properties to a port and lists them as a port entry.";

        list port-entry {
            key port-id;
            description "List of port entries";
            uses port-field;

            list property {
                key property-id;
                description "Attributes set of properties";
                uses fpcp-port-properties;
            }

            list forwarding-rule {
                key rule-id;
                description "Rule and traffic-descriptor";
                uses fpcp-forwarding-rule;
            }
        }
    }


    // PRT_ADD

    rpc port_add {
        description "PRT_ADD";
        input {
            list adding-port {
                description "Ports that are added to an agent";
                uses port-field;
                list forwarding-rule {
                    key rule-id;
                    description "Rule and traffic-descriptor";
                    uses fpcp-forwarding-rule;
                }
                list property {
                    key property-id;
                    description "Attributes set of properties";
                    uses fpcp-port-properties;
                }
            }
        }
    }


    // PRT_DEL

    rpc port_delete {
        description "PRT_DEL";
        input {
            list deleting-port {
                description "Ports that are deleted from an agent";
                uses port-field;
            }
        }
    }

    // PROP_ADD

    rpc port_property_add {
        description "PROP_ADD";
        input {
            list adding-property {
                description "Properties that are added to an agent";
                uses port-field;

                list property {
                    key property-id;
                    description "Attributes set of properties";
                    uses fpcp-port-properties;
                }
            }
        }
    }

    // PROP_MOD

    rpc port_property_modify {
        description "PROP_MOD";
        input {
            list modifying-property {
                description
                "Properties that are modified in an agent";
                uses port-field;

                list property {
                    key property-id;
                    description "Attributes set of properties";
                    uses fpcp-port-properties;
                }
            }
        }
    }


    // PROP_DEL

    rpc port_property_delete {
        description "PROP_DEL";
        input {
            list deleting-property {
                description
                "Target port/property-id of deleting properties";
                uses port-field;

                leaf property-id {
                    type fpcp-property-id;
                    mandatory true;
                    description "Property ID";
                }
            }
        }
    }

    // RULE_ADD

    rpc rule_add {
        description
        "TBD for input parameters of which RULE_ADD includes
         but now just traffic-descriptor.";
        input {
            list adding-rule {
                description "Rules that are added to an agent";
                uses port-field;

                list forwarding-rule {
                    description "Added rule";
                    uses fpcp-forwarding-rule;
                }
            }
        }
    }

    // RULE_MOD

    rpc rule_modify {
        description
        "TBD for input parameters of which RULE_MOD includes
         but now just traffic-descriptor.";
        input {
            list modifying-rule {
                description "Rules that are modified in an agent";
                uses port-field;

                list forwarding-rule {
                    description "Modified rule";
                    uses fpcp-forwarding-rule;
                }
            }
        }
    }

    // RULE_DEL

    rpc rule_delete {
        description
        "TBD for input parameters of which RULE_DEL includes
         but now just traffic-descriptor.";
        input {
            list deleting-rule {
                description "Rules that are deleted from an agent";
                uses port-field;

                list target-rule {
                    description "Deleting rules";
                    leaf target-rule-id {
                        type fpcp-rule-id;
                        mandatory true;
                        description "Rule ID";
                    }
                }
            }
        }
    }


   // EVENT_REG

    rpc event_register {
        description
        "TBD for registered parameters included in EVENT_REG.";
    }

    // PROBE

    rpc probe {
        description
        "TBD for retrieved parameters included in PROBE.";
    }

    // NOTIFY

    notification notify {
        description
        "TBD for which status and event are reported to client.";
    }

}
      ]]></artwork>
        <postamble></postamble>
      </figure>
</t>

</section>


<section anchor="yang-fpc-base-tree" title="FPC Base tree">

<t>
 <figure anchor="fig-yang-fpc-base-tree"

              title="FPC base tree">
        <artwork align="center"><![CDATA[
module: ietf-dmm-fpcp-base
   +--rw fpcp-carriers
   |  +--rw carrier* [carrier-id]
   |     +--rw name?                 fpcp-name-type
   |     +--rw carrier-id            fpcp-carrier-id
   |     +--rw agent-id?             fpcp-agent-id
   |     +--rw client* [client-id]
   |     |  +--rw name?        fpcp-name-type
   |     |  +--rw client-id    fpcp-client-id
   |     +--rw dpn* [dpn-id]
   |     |  +--rw name?     fpcp-name-type
   |     |  +--rw dpn-id    fpcp-dpn-id
   |     +--rw network* [network-id]
   |     |  +--rw name?         fpcp-name-type
   |     |  +--rw network-id    fpcp-network-id
   |     +--rw dpn-group* [name]
   |     |  +--rw name           fpcp-name-type
   |     |  +--rw network?    -> /fpcp-carriers/carrier/network/network-id
   |     |  +--rw role?          enumeration
   |     |  +--rw endpoint-dp* [local-address]
   |     |  |  +--rw local-address          inet:ip-address
   |     |  |  +--rw remote-dpn?  -> /fpcp-carriers/carrier/dpn-group/name
   |     |  |  +--rw default-tunnel-type?   identityref
   |     |  +--rw dpn* [dpn-id]
   |     |     +--rw dpn-id    fpcp-dpn-id
   |     +--rw qos-profile* [name]
   |     |  +--rw name              fpcp-name-type
   |     |  +--rw qos-index-type?   identityref
   |     |  +--rw (index-type)?
   |     |     +--:(qci)
   |     |        +--rw uplink
   |     |        |  +--rw qci?             fpcp-qos-class-identifier
   |     |        |  +--rw attributetype?   identityref
   |     |        |  +--rw bandwidth?       fpcp-qos-bandwidth
   |     |        +--rw downlink
   |     |           +--rw qci?             fpcp-qos-class-identifier
   |     |           +--rw attributetype?   identityref
   |     |           +--rw bandwidth?       fpcp-qos-bandwidth
   |     +--rw traffic-descriptor* [name]
   |        +--rw name                       fpcp-name-type
   |        +--rw traffic-discriptor-type?   identityref
   |        +--rw (descriptor-type)?
   |           +--:(fpcp-traffic-descriptor)
   |              +--rw destination-ip?            inet:ip-prefix
   |              +--rw source-ip?                 inet:ip-prefix
   +--ro port-entries
      +--ro port-entry* [port-id]
         +--ro port-id            fpcp-port-id
         +--ro carrier-id         fpcp-carrier-id
         +--ro network-id?        fpcp-network-id
         +--ro property* [property-id]
         |  +--ro property-id      fpcp-property-id
         |  +--ro attached-dpns* [name]
         |  |  +--ro name    fpcp-name-type
         |  +--ro endpoints
         |  |  +--ro tunnel-type?      identityref
         |  |  +--ro remote-address?   inet:ip-address
         |  |  +--ro local-address?    inet:ip-address
         |  |  +--ro (tunnel)?
         |  |     +--:(gtp-u)
         |  |     |  +--ro remote-teid?      uint32
         |  |     |  +--ro local-teid?       uint32
         |  |     +--:(gre)
         |  |        +--ro key?              uint32
         |  +--ro qos
         |  |  +--ro name?                           fpcp-name-type
         |  |  +--ro qos-index-type?                 identityref
         |  |  +--ro (index-type)?
         |  |  |  +--:(qci)
         |  |  |     +--ro uplink
         |  |  |     |  +--ro qci?            fpcp-qos-class-identifier
         |  |  |     |  +--ro attributetype?  identityref
         |  |  |     |  +--ro bandwidth?      fpcp-qos-bandwidth
         |  |  |     +--ro downlink
         |  |  |        +--ro qci?            fpcp-qos-class-identifier
         |  |  |        +--ro attributetype?  identityref
         |  |  |        +--ro bandwidth?      fpcp-qos-bandwidth
         |  |  +--ro port-in-aggregated-bandwidth* [port-id]
         |  |     +--ro port-id    fpcp-port-id
         |  +--ro rewriting
         |     +--ro type?   identityref
         +--ro forwarding-rule* [rule-id]
            +--ro rule-id                    fpcp-rule-id
            +--ro name?                      fpcp-name-type
            +--ro traffic-discriptor-type?   identityref
            +--ro (descriptor-type)?
               +--:(fpcp-traffic-descriptor)
                  +--ro destination-ip?            inet:ip-prefix
                  +--ro source-ip?                 inet:ip-prefix

rpcs:
   +---x port_add
   |  +---w input
   |     +---w adding-port*
   |        +---w port-id?           fpcp-port-id
   |        +---w carrier-id         fpcp-carrier-id
   |        +---w network-id?        fpcp-network-id
   |        +---w forwarding-rule* [rule-id]
   |        |  +---w rule-id                    fpcp-rule-id
   |        |  +---w name?                      fpcp-name-type
   |        |  +---w traffic-discriptor-type?   identityref
   |        |  +---w (descriptor-type)?
   |        |     +--:(fpcp-traffic-descriptor)
   |        |        +---w destination-ip?            inet:ip-prefix
   |        |        +---w source-ip?                 inet:ip-prefix
   |        +---w property* [property-id]
   |           +---w property-id      fpcp-property-id
   |           +---w attached-dpns* [name]
   |           |  +---w name    fpcp-name-type
   |           +---w endpoints
   |           |  +---w tunnel-type?      identityref
   |           |  +---w remote-address?   inet:ip-address
   |           |  +---w local-address?    inet:ip-address
   |           |  +---w (tunnel)?
   |           |     +--:(gtp-u)
   |           |     |  +---w remote-teid?      uint32
   |           |     |  +---w local-teid?       uint32
   |           |     +--:(gre)
   |           |        +---w key?              uint32
   |           +---w qos
   |           |  +---w name?                           fpcp-name-type
   |           |  +---w qos-index-type?                 identityref
   |           |  +---w (index-type)?
   |           |  |  +--:(qci)
   |           |  |     +---w uplink
   |           |  |     |  +---w qci?         fpcp-qos-class-identifier
   |           |  |     |  +---w attributetype?   identityref
   |           |  |     |  +---w bandwidth?       fpcp-qos-bandwidth
   |           |  |     +---w downlink
   |           |  |        +---w qci?         fpcp-qos-class-identifier
   |           |  |        +---w attributetype?   identityref
   |           |  |        +---w bandwidth?       fpcp-qos-bandwidth
   |           |  +---w port-in-aggregated-bandwidth* [port-id]
   |           |     +---w port-id    fpcp-port-id
   |           +---w rewriting
   |              +---w type?   identityref
   +---x port_delete
   |  +---w input
   |     +---w deleting-port*
   |        +---w port-id?      fpcp-port-id
   |        +---w carrier-id    fpcp-carrier-id
   |        +---w network-id?   fpcp-network-id
   +---x port_property_add
   |  +---w input
   |     +---w adding-property*
   |        +---w port-id?      fpcp-port-id
   |        +---w carrier-id    fpcp-carrier-id
   |        +---w network-id?   fpcp-network-id
   |        +---w property* [property-id]
   |           +---w property-id      fpcp-property-id
   |           +---w attached-dpns* [name]
   |           |  +---w name    fpcp-name-type
   |           +---w endpoints
   |           |  +---w tunnel-type?      identityref
   |           |  +---w remote-address?   inet:ip-address
   |           |  +---w local-address?    inet:ip-address
   |           |  +---w (tunnel)?
   |           |     +--:(gtp-u)
   |           |     |  +---w remote-teid?      uint32
   |           |     |  +---w local-teid?       uint32
   |           |     +--:(gre)
   |           |        +---w key?              uint32
   |           +---w qos
   |           |  +---w name?                           fpcp-name-type
   |           |  +---w qos-index-type?                 identityref
   |           |  +---w (index-type)?
   |           |  |  +--:(qci)
   |           |  |     +---w uplink
   |           |  |     |  +---w qci?         fpcp-qos-class-identifier
   |           |  |     |  +---w attributetype? identityref
   |           |  |     |  +---w bandwidth?   fpcp-qos-bandwidth
   |           |  |     +---w downlink
   |           |  |        +---w qci?         fpcp-qos-class-identifier
   |           |  |        +---w attributetype?   identityref
   |           |  |        +---w bandwidth?   fpcp-qos-bandwidth
   |           |  +---w port-in-aggregated-bandwidth* [port-id]
   |           |     +---w port-id    fpcp-port-id
   |           +---w rewriting
   |              +---w type?   identityref
   +---x port_property_modify
   |  +---w input
   |     +---w modifying-property*
   |        +---w port-id?      fpcp-port-id
   |        +---w carrier-id    fpcp-carrier-id
   |        +---w network-id?   fpcp-network-id
   |        +---w property* [property-id]
   |           +---w property-id      fpcp-property-id
   |           +---w attached-dpns* [name]
   |           |  +---w name    fpcp-name-type
   |           +---w endpoints
   |           |  +---w tunnel-type?      identityref
   |           |  +---w remote-address?   inet:ip-address
   |           |  +---w local-address?    inet:ip-address
   |           |  +---w (tunnel)?
   |           |     +--:(gtp-u)
   |           |     |  +---w remote-teid?      uint32
   |           |     |  +---w local-teid?       uint32
   |           |     +--:(gre)
   |           |        +---w key?              uint32
   |           +---w qos
   |           |  +---w name?                   fpcp-name-type
   |           |  +---w qos-index-type?         identityref
   |           |  +---w (index-type)?
   |           |  |  +--:(qci)
   |           |  |     +---w uplink
   |           |  |     |  +---w qci?         fpcp-qos-class-identifier
   |           |  |     |  +---w attributetype?   identityref
   |           |  |     |  +---w bandwidth?   fpcp-qos-bandwidth
   |           |  |     +---w downlink
   |           |  |        +---w qci?         fpcp-qos-class-identifier
   |           |  |        +---w attributetype?   identityref
   |           |  |        +---w bandwidth?   fpcp-qos-bandwidth
   |           |  +---w port-in-aggregated-bandwidth* [port-id]
   |           |     +---w port-id    fpcp-port-id
   |           +---w rewriting
   |              +---w type?   identityref
   +---x port_property_delete
   |  +---w input
   |     +---w deleting-property*
   |        +---w port-id?       fpcp-port-id
   |        +---w carrier-id     fpcp-carrier-id
   |        +---w network-id?    fpcp-network-id
   |        +---w property-id    fpcp-property-id
   +---x rule_add
   |  +---w input
   |     +---w adding-rule*
   |        +---w port-id?           fpcp-port-id
   |        +---w carrier-id         fpcp-carrier-id
   |        +---w network-id?        fpcp-network-id
   |        +---w forwarding-rule*
   |           +---w rule-id?                   fpcp-rule-id
   |           +---w name?                      fpcp-name-type
   |           +---w traffic-discriptor-type?   identityref
   |           +---w (descriptor-type)?
   |              +--:(fpcp-traffic-descriptor)
   |                 +---w destination-ip?            inet:ip-prefix
   |                 +---w source-ip?                 inet:ip-prefix
   +---x rule_modify
   |  +---w input
   |     +---w modifying-rule*
   |        +---w port-id?           fpcp-port-id
   |        +---w carrier-id         fpcp-carrier-id
   |        +---w network-id?        fpcp-network-id
   |        +---w forwarding-rule*
   |           +---w rule-id?                   fpcp-rule-id
   |           +---w name?                      fpcp-name-type
   |           +---w traffic-discriptor-type?   identityref
   |           +---w (descriptor-type)?
   |              +--:(fpcp-traffic-descriptor)
   |                 +---w destination-ip?            inet:ip-prefix
   |                 +---w source-ip?                 inet:ip-prefix
   +---x rule_delete
   |  +---w input
   |     +---w deleting-rule*
   |        +---w port-id?       fpcp-port-id
   |        +---w carrier-id     fpcp-carrier-id
   |        +---w network-id?    fpcp-network-id
   |        +---w target-rule*
   |           +---w target-rule-id    fpcp-rule-id
   +---x event_register
   +---x probe
notifications:
   +---n notify
      ]]></artwork>
        <postamble></postamble>
      </figure>
</t>

</section>

</section>

<section anchor="yangfpcpmip" title="FPC PMIP">

<section anchor="yang-fpc-pmip-model" title="FPC PMIP YANG Model">

<t>
 <figure anchor="fig-yang-fpc-pmip-yang"

              title="caption1">
        <artwork align="center"><![CDATA[
module ietf-dmm-fpcp-pmip {
    namespace "urn:ietf:params:xml:ns:yang:ietf-dmm-fpcp-pmip";
    prefix fpcp-pmip;

    import ietf-inet-types { prefix inet; }
    import ietf-dmm-fpcp-base { prefix fpcp-base; }
    import ietf-pmip-qos { prefix qos-pmip; }
    import ietf-traffic-selectors { prefix traffic-selectors; }

    organization "IETF DMM Working Group";
    contact "Satoru Matsushima <satoru.matsushima@g.softbank.co.jp>";

    description
    "This module contains YANG definition for
     Forwarding Policy Configuration Protocol.(FPCP)";

    revision 2016-01-19 {
        description "Changes based on -01 version of FPCP draft.";
        reference "draft-ietf-dmm-fpc-cpdp-01";
    }

    identity fpcp-qos-index-pmip {
        base "fpcp-base:fpcp-qos-index-type";
    }

    identity traffic-selector-mip6 {
        base "fpcp-base:traffic-descriptor-type";
    }

    grouping qosattribute-pmip {

        leaf dscp {
            type inet:dscp;
        }

        choice attribute {
            case per-mn-agg-max-dl {
                when "../attributetype = 'Per-MN-Agg-Max-DL-Bit-Rate-type'";
                leaf per-mn-agg-max-dl {
                    type qos-pmip:Per-MN-Agg-Max-DL-Bit-Rate-Value;
                }
            }
            case per-mn-agg-max-ul {
                when "../attributetype = 'Per-MN-Agg-Max-UL-Bit-Rate-type'";
                leaf per-mn-agg-max-ul {
                    type qos-pmip:Per-MN-Agg-Max-UL-Bit-Rate-Value;
                }
            }
            case per-session-agg-max {
                when "../attributetype = 'Per-Session-Agg-Max-DL-Bit-Rate-type' |
                      ../attributetype = 'Per-Session-Agg-Max-UL-Bit-Rate-type'";
                uses qos-pmip:Per-Session-Agg-Max-Bit-Rate-Value;
            }
            case agg-max-dl {
                when "../attributetype = 'Aggregate-Max-DL-Bit-Rate-type'";
                leaf agg-max-dl {
                    type qos-pmip:Aggregate-Max-DL-Bit-Rate-Value;

                }
            }
            case agg-max-ul {
                when "../attributetype = 'Aggregate-Max-UL-Bit-Rate-type'";
                leaf agg-max-ul {
                    type qos-pmip:Aggregate-Max-UL-Bit-Rate-Value;
                }
            }
            case gbr-dl {
                when "../attributetype = 'Guaranteed-DL-Bit-Rate-type'";
                leaf gbr-dl {
                    type qos-pmip:Guaranteed-DL-Bit-Rate-Value;
                }
            }
            case gbr-ul {
                when "../attributetype = 'Guaranteed-UL-Bit-Rate-type'";
                leaf gbr-ul {
                    type qos-pmip:Guaranteed-UL-Bit-Rate-Value;
                }
            }
        }
    }

    // Configuration choice augmentation in the fpcp-base under the fpcp-carriers/carrier/qosprofile.
    augment "/fpcp-base:fpcp-carriers/fpcp-base:carrier/fpcp-base:qos-profile/fpcp-base:index-type" {
        case pmip {
            when "/fpcp-base:fpcp-carriers/fpcp-base:carrier/fpcp-base:qos-profile/fpcp-base:qos-index-type = 'fpcp-qos-index-pmip'";
            uses qosattribute-pmip;
        }
    }

    // Configuration choice augmentation in the fpcp-base under the fpcp-carriers/carrier/traffic-descriptor.
    augment "/fpcp-base:fpcp-carriers/fpcp-base:carrier/fpcp-base:traffic-descriptor/fpcp-base:descriptor-type" {
        case traffic-selector-mip6 {
            when "/fpcp-base:fpcp-carriers/fpcp-base:carrier/fpcp-base:traffic-descriptor/fpcp-base:traffic-descriptor-type = 'traffic-selector-mip6'";
            uses traffic-selectors:traffic-selector;
        }
    }

    // Operational choice augmentation in the fpcp-base under the port-entries/port-entry/property.
    augment "/fpcp-base:port-entries/fpcp-base:port-entry/fpcp-base:property/fpcp-base:qos/fpcp-base:index-type" {
        case pmip {
            when "/fpcp-base:port-entries/fpcp-base:port-entry/fpcp-base:property/fpcp-base:qos/fpcp-base:qos-index-type = 'fpcp-qos-index-pmip'";
            uses qosattribute-pmip;
        }
    }

    // Operational choice augmentation in the fpcp-base under the port-entries/port-entry/forwarding-rule.
    augment "/fpcp-base:port-entries/fpcp-base:port-entry/fpcp-base:forwarding-rule/fpcp-base:descriptor-type" {
        case traffic-selector-mip6 {
            when "/fpcp-base:port-entries/fpcp-base:port-entry/fpcp-base:forwarding-rule/fpcp-base:traffic-descriptor-type = 'traffic-selector-mip6'";
            uses traffic-selectors:traffic-selector;
        }
    }

    // RPC choice augmentation in the fpcp-base under "port_add" rpc.
    augment "/fpcp-base:port_add/fpcp-base:input/fpcp-base:adding-port/fpcp-base:property/fpcp-base:qos/fpcp-base:index-type" {
        case pmip {
            when "/fpcp-base:port_add/fpcp-base:input/fpcp-base:adding-port/fpcp-base:property/fpcp-base:qos/fpcp-base:qos-index-type = 'fpcp-qos-index-pmip'";
            uses qosattribute-pmip;
        }
    }

    augment "/fpcp-base:port_add/fpcp-base:input/fpcp-base:adding-port/fpcp-base:forwarding-rule/fpcp-base:descriptor-type" {
        case traffic-selector-mip6 {
            when "/fpcp-base:port_add/fpcp-base:input/fpcp-base:adding-port/fpcp-base:forwarding-rule/fpcp-base:traffic-descriptor-type = 'traffic-selector-mip6'";
            uses traffic-selectors:traffic-selector;
        }
    }

    // RPC choice augmentation in the fpcp-base under "port_property_add" rpc.
    augment "/fpcp-base:port_property_add/fpcp-base:input/fpcp-base:adding-property/fpcp-base:property/fpcp-base:qos/fpcp-base:index-type" {
        case pmip {
            when "/fpcp-base:port_property_add/fpcp-base:input/fpcp-base:adding-property/fpcp-base:property/fpcp-base:qos/fpcp-base:qos-index-type = 'fpcp-qos-index-pmip'";
            uses qosattribute-pmip;
        }
    }

    // RPC choice augmentation in the fpcp-base under "port_property_modify" rpc.
    augment "/fpcp-base:port_property_modify/fpcp-base:input/fpcp-base:modifying-property/fpcp-base:property/fpcp-base:qos/fpcp-base:index-type" {
        case pmip {
            when "/fpcp-base:port_property_modify/fpcp-base:input/fpcp-base:modifying-property/fpcp-base:property/fpcp-base:qos/fpcp-base:qos-index-type = 'fpcp-qos-index-pmip'";
            uses qosattribute-pmip;
        }
    }

    // RPC choice augmentation in the fpcp-base under "rule_add" rpc.
    augment "/fpcp-base:rule_add/fpcp-base:input/fpcp-base:adding-rule/fpcp-base:forwarding-rule/fpcp-base:descriptor-type" {
        case traffic-selector-mip6 {
            when "/fpcp-base:rule_add/fpcp-base:input/fpcp-base:adding-rule/fpcp-base:forwarding-rule/fpcp-base:traffic-descriptor-type = 'traffic-selector-mip6'";
            uses traffic-selectors:traffic-selector;
        }
    }

    // RPC choice augmentation in the fpcp-base under "rule_modify" rpc.
    augment "/fpcp-base:rule_modify/fpcp-base:input/fpcp-base:modifying-rule/fpcp-base:forwarding-rule/fpcp-base:descriptor-type" {
        case traffic-selector-mip6 {
            when "/fpcp-base:rule_modify/fpcp-base:input/fpcp-base:modifying-rule/fpcp-base:forwarding-rule/fpcp-base:traffic-descriptor-type = 'traffic-selector-mip6'";
            uses traffic-selectors:traffic-selector;
        }
    }

}
      ]]></artwork>
        <postamble></postamble>
      </figure>
</t>

</section>


<section anchor="yang-fpc-pmip-tree" title="FPC PMIP tree">


<t>
 <figure anchor="fig-yang-fpc-pmip-tree"

              title="FPC PMIP tree">
        <artwork align="center"><![CDATA[
module: ietf-dmm-fpcp-pmip
augment /fpcp-base:fpcp-carriers/fpcp-base:carrier/fpcp-base:qos-profile/fpcp-base:index-type:
   +--:(pmip)
      +--rw dscp?                inet:dscp
      +--rw (attribute)?
         +--:(per-mn-agg-max-dl)
         |  +--rw per-mn-agg-max-dl?   qos-pmip:Per-MN-Agg-Max-DL-Bit-Rate-Value
         +--:(per-mn-agg-max-ul)
         |  +--rw per-mn-agg-max-ul?   qos-pmip:Per-MN-Agg-Max-UL-Bit-Rate-Value
         +--:(per-session-agg-max)
         |  +--rw max-dl               uint32
         |  +--rw service-flag         boolean
         |  +--rw exclude-flag         boolean
         +--:(agg-max-dl)
         |  +--rw agg-max-dl?          qos-pmip:Aggregate-Max-DL-Bit-Rate-Value
         +--:(agg-max-ul)
         |  +--rw agg-max-ul?          qos-pmip:Aggregate-Max-UL-Bit-Rate-Value
         +--:(gbr-dl)
         |  +--rw gbr-dl?              qos-pmip:Guaranteed-DL-Bit-Rate-Value
         +--:(gbr-ul)
            +--rw gbr-ul?              qos-pmip:Guaranteed-UL-Bit-Rate-Value
augment /fpcp-base:fpcp-carriers/fpcp-base:carrier/fpcp-base:traffic-descriptor/fpcp-base:descriptor-type:
   +--:(traffic-selector-mip6)
      +--rw ts-format?                      identityref
      +--rw start-ipsec-spi?                ipsec-spi
      +--rw end-ipsec-spi?                  ipsec-spi
      +--rw start-source-port?              inet:port-number
      +--rw end-source-port?                inet:port-number
      +--rw start-destination-port?         inet:port-number
      +--rw end-destination-port?           inet:port-number
      +--rw start-source-address-v4?        inet:ipv4-address
      +--rw end-source-address-v4?          inet:ipv4-address
      +--rw start-destination-address-v4?   inet:ipv4-address
      +--rw end-destination-address-v4?     inet:ipv4-address
      +--rw start-ds?                       inet:dscp
      +--rw end-ds?                         inet:dscp
      +--rw start-protocol?                 uint8
      +--rw end-protocol?                   uint8
      +--rw start-source-address-v6?        inet:ipv6-address
      +--rw end-source-address-v6?          inet:ipv6-address
      +--rw start-destination-address-v6?   inet:ipv6-address
      +--rw end-destination-address-v6?     inet:ipv6-address
      +--rw start-flow-label?               inet:ipv6-flow-label
      +--rw end-flow-label?                 inet:ipv6-flow-label
      +--rw start-traffic-class?            inet:dscp
      +--rw end-traffic-class?              inet:dscp
      +--rw start-next-header?              uint8
      +--rw end-next-header?                uint8
augment /fpcp-base:port-entries/fpcp-base:port-entry/fpcp-base:property/fpcp-base:qos/fpcp-base:index-type:
   +--:(pmip)
      +--ro dscp?                inet:dscp
      +--ro (attribute)?
         +--:(per-mn-agg-max-dl)
         |  +--ro per-mn-agg-max-dl?   qos-pmip:Per-MN-Agg-Max-DL-Bit-Rate-Value
         +--:(per-mn-agg-max-ul)
         |  +--ro per-mn-agg-max-ul?   qos-pmip:Per-MN-Agg-Max-UL-Bit-Rate-Value
         +--:(per-session-agg-max)
         |  +--ro max-dl               uint32
         |  +--ro service-flag         boolean
         |  +--ro exclude-flag         boolean
         +--:(agg-max-dl)
         |  +--ro agg-max-dl?          qos-pmip:Aggregate-Max-DL-Bit-Rate-Value
         +--:(agg-max-ul)
         |  +--ro agg-max-ul?          qos-pmip:Aggregate-Max-UL-Bit-Rate-Value
         +--:(gbr-dl)
         |  +--ro gbr-dl?              qos-pmip:Guaranteed-DL-Bit-Rate-Value
         +--:(gbr-ul)
            +--ro gbr-ul?              qos-pmip:Guaranteed-UL-Bit-Rate-Value
augment /fpcp-base:port-entries/fpcp-base:port-entry/fpcp-base:forwarding-rule/fpcp-base:descriptor-type:
   +--:(traffic-selector-mip6)
      +--ro ts-format?                      identityref
      +--ro start-ipsec-spi?                ipsec-spi
      +--ro end-ipsec-spi?                  ipsec-spi
      +--ro start-source-port?              inet:port-number
      +--ro end-source-port?                inet:port-number
      +--ro start-destination-port?         inet:port-number
      +--ro end-destination-port?           inet:port-number
      +--ro start-source-address-v4?        inet:ipv4-address
      +--ro end-source-address-v4?          inet:ipv4-address
      +--ro start-destination-address-v4?   inet:ipv4-address
      +--ro end-destination-address-v4?     inet:ipv4-address
      +--ro start-ds?                       inet:dscp
      +--ro end-ds?                         inet:dscp
      +--ro start-protocol?                 uint8
      +--ro end-protocol?                   uint8
      +--ro start-source-address-v6?        inet:ipv6-address
      +--ro end-source-address-v6?          inet:ipv6-address
      +--ro start-destination-address-v6?   inet:ipv6-address
      +--ro end-destination-address-v6?     inet:ipv6-address
      +--ro start-flow-label?               inet:ipv6-flow-label
      +--ro end-flow-label?                 inet:ipv6-flow-label
      +--ro start-traffic-class?            inet:dscp
      +--ro end-traffic-class?              inet:dscp
      +--ro start-next-header?              uint8
      +--ro end-next-header?                uint8
augment /fpcp-base:port_add/fpcp-base:input/fpcp-base:adding-port/fpcp-base:property/fpcp-base:qos/fpcp-base:index-type:
   +--:(pmip)
      +---- dscp?                inet:dscp
      +---- (attribute)?
         +--:(per-mn-agg-max-dl)
         |  +---- per-mn-agg-max-dl?   qos-pmip:Per-MN-Agg-Max-DL-Bit-Rate-Value
         +--:(per-mn-agg-max-ul)
         |  +---- per-mn-agg-max-ul?   qos-pmip:Per-MN-Agg-Max-UL-Bit-Rate-Value
         +--:(per-session-agg-max)
         |  +---- max-dl               uint32
         |  +---- service-flag         boolean
         |  +---- exclude-flag         boolean
         +--:(agg-max-dl)
         |  +---- agg-max-dl?          qos-pmip:Aggregate-Max-DL-Bit-Rate-Value
         +--:(agg-max-ul)
         |  +---- agg-max-ul?          qos-pmip:Aggregate-Max-UL-Bit-Rate-Value
         +--:(gbr-dl)
         |  +---- gbr-dl?              qos-pmip:Guaranteed-DL-Bit-Rate-Value
         +--:(gbr-ul)
            +---- gbr-ul?              qos-pmip:Guaranteed-UL-Bit-Rate-Value
augment /fpcp-base:port_add/fpcp-base:input/fpcp-base:adding-port/fpcp-base:forwarding-rule/fpcp-base:descriptor-type:
   +--:(traffic-selector-mip6)
      +---- ts-format?                      identityref
      +---- start-ipsec-spi?                ipsec-spi
      +---- end-ipsec-spi?                  ipsec-spi
      +---- start-source-port?              inet:port-number
      +---- end-source-port?                inet:port-number
      +---- start-destination-port?         inet:port-number
      +---- end-destination-port?           inet:port-number
      +---- start-source-address-v4?        inet:ipv4-address
      +---- end-source-address-v4?          inet:ipv4-address
      +---- start-destination-address-v4?   inet:ipv4-address
      +---- end-destination-address-v4?     inet:ipv4-address
      +---- start-ds?                       inet:dscp
      +---- end-ds?                         inet:dscp
      +---- start-protocol?                 uint8
      +---- end-protocol?                   uint8
      +---- start-source-address-v6?        inet:ipv6-address
      +---- end-source-address-v6?          inet:ipv6-address
      +---- start-destination-address-v6?   inet:ipv6-address
      +---- end-destination-address-v6?     inet:ipv6-address
      +---- start-flow-label?               inet:ipv6-flow-label
      +---- end-flow-label?                 inet:ipv6-flow-label
      +---- start-traffic-class?            inet:dscp
      +---- end-traffic-class?              inet:dscp
      +---- start-next-header?              uint8
      +---- end-next-header?                uint8
augment /fpcp-base:port_property_add/fpcp-base:input/fpcp-base:adding-property/fpcp-base:property/fpcp-base:qos/fpcp-base:index-type:
   +--:(pmip)
      +---- dscp?                inet:dscp
      +---- (attribute)?
         +--:(per-mn-agg-max-dl)
         |  +---- per-mn-agg-max-dl?   qos-pmip:Per-MN-Agg-Max-DL-Bit-Rate-Value
         +--:(per-mn-agg-max-ul)
         |  +---- per-mn-agg-max-ul?   qos-pmip:Per-MN-Agg-Max-UL-Bit-Rate-Value
         +--:(per-session-agg-max)
         |  +---- max-dl               uint32
         |  +---- service-flag         boolean
         |  +---- exclude-flag         boolean
         +--:(agg-max-dl)
         |  +---- agg-max-dl?          qos-pmip:Aggregate-Max-DL-Bit-Rate-Value
         +--:(agg-max-ul)
         |  +---- agg-max-ul?          qos-pmip:Aggregate-Max-UL-Bit-Rate-Value
         +--:(gbr-dl)
         |  +---- gbr-dl?              qos-pmip:Guaranteed-DL-Bit-Rate-Value
         +--:(gbr-ul)
            +---- gbr-ul?              qos-pmip:Guaranteed-UL-Bit-Rate-Value
augment /fpcp-base:port_property_modify/fpcp-base:input/fpcp-base:modifying-property/fpcp-base:property/fpcp-base:qos/fpcp-base:index-type:
   +--:(pmip)
      +---- dscp?                inet:dscp
      +---- (attribute)?
         +--:(per-mn-agg-max-dl)
         |  +---- per-mn-agg-max-dl?   qos-pmip:Per-MN-Agg-Max-DL-Bit-Rate-Value
         +--:(per-mn-agg-max-ul)
         |  +---- per-mn-agg-max-ul?   qos-pmip:Per-MN-Agg-Max-UL-Bit-Rate-Value
         +--:(per-session-agg-max)
         |  +---- max-dl               uint32
         |  +---- service-flag         boolean
         |  +---- exclude-flag         boolean
         +--:(agg-max-dl)
         |  +---- agg-max-dl?          qos-pmip:Aggregate-Max-DL-Bit-Rate-Value
         +--:(agg-max-ul)
         |  +---- agg-max-ul?          qos-pmip:Aggregate-Max-UL-Bit-Rate-Value
         +--:(gbr-dl)
         |  +---- gbr-dl?              qos-pmip:Guaranteed-DL-Bit-Rate-Value
         +--:(gbr-ul)
            +---- gbr-ul?              qos-pmip:Guaranteed-UL-Bit-Rate-Value
augment /fpcp-base:rule_add/fpcp-base:input/fpcp-base:adding-rule/fpcp-base:forwarding-rule/fpcp-base:descriptor-type:
   +--:(traffic-selector-mip6)
      +---- ts-format?                      identityref
      +---- start-ipsec-spi?                ipsec-spi
      +---- end-ipsec-spi?                  ipsec-spi
      +---- start-source-port?              inet:port-number
      +---- end-source-port?                inet:port-number
      +---- start-destination-port?         inet:port-number
      +---- end-destination-port?           inet:port-number
      +---- start-source-address-v4?        inet:ipv4-address
      +---- end-source-address-v4?          inet:ipv4-address
      +---- start-destination-address-v4?   inet:ipv4-address
      +---- end-destination-address-v4?     inet:ipv4-address
      +---- start-ds?                       inet:dscp
      +---- end-ds?                         inet:dscp
      +---- start-protocol?                 uint8
      +---- end-protocol?                   uint8
      +---- start-source-address-v6?        inet:ipv6-address
      +---- end-source-address-v6?          inet:ipv6-address
      +---- start-destination-address-v6?   inet:ipv6-address
      +---- end-destination-address-v6?     inet:ipv6-address
      +---- start-flow-label?               inet:ipv6-flow-label
      +---- end-flow-label?                 inet:ipv6-flow-label
      +---- start-traffic-class?            inet:dscp
      +---- end-traffic-class?              inet:dscp
      +---- start-next-header?              uint8
      +---- end-next-header?                uint8
augment /fpcp-base:rule_modify/fpcp-base:input/fpcp-base:modifying-rule/fpcp-base:forwarding-rule/fpcp-base:descriptor-type:
   +--:(traffic-selector-mip6)
      +---- ts-format?                      identityref
      +---- start-ipsec-spi?                ipsec-spi
      +---- end-ipsec-spi?                  ipsec-spi
      +---- start-source-port?              inet:port-number
      +---- end-source-port?                inet:port-number
      +---- start-destination-port?         inet:port-number
      +---- end-destination-port?           inet:port-number
      +---- start-source-address-v4?        inet:ipv4-address
      +---- end-source-address-v4?          inet:ipv4-address
      +---- start-destination-address-v4?   inet:ipv4-address
      +---- end-destination-address-v4?     inet:ipv4-address
      +---- start-ds?                       inet:dscp
      +---- end-ds?                         inet:dscp
      +---- start-protocol?                 uint8
      +---- end-protocol?                   uint8
      +---- start-source-address-v6?        inet:ipv6-address
      +---- end-source-address-v6?          inet:ipv6-address
      +---- start-destination-address-v6?   inet:ipv6-address
      +---- end-destination-address-v6?     inet:ipv6-address
      +---- start-flow-label?               inet:ipv6-flow-label
      +---- end-flow-label?                 inet:ipv6-flow-label
      +---- start-traffic-class?            inet:dscp
      +---- end-traffic-class?              inet:dscp
      +---- start-next-header?              uint8
      +---- end-next-header?                uint8

      ]]></artwork>
        <postamble></postamble>
      </figure>
</t>

</section>

</section>

</section>


<!--
<section anchor="changenotes" title="Change Notes">

<t>No changes yet in the initial version.</t>

  <t><list style="symbols">

     <t>Nothing to report yet.</t>
     <t>Nothing to report yet.</t>

  </list></t>
-->
<!--
<t>Changes in version 02:</t>

 <t><list style="symbols">

     <t>Consistently refer to communication between MN and CN, not between
        two MNs </t>
     <t>Adopt text to the result of the roaming model discussion and refer to
        provider domain, not PMIPv6 domain</t>
     <t>Revision of Terms section according to comments</t>
     <t>Revision of text in Section 3.1 about network entities, which
        perform signaling for localized routing (clarification)</t>
     <t>Revision of text in Section 3.1 to clarify about localized routing
        benefits</t>
     <t>Revision of text in Section 3.2 to clarify about signaling race condition
        in multi-LMA case</t>
     <t>Add more text to <xref target="secroaming"></xref> about the roaming model
        for localized routing, relevance of the PMIPv6 domain concept and associated
        issues with localized routing in roaming case</t>
     <t>Modified heading of Section 3.3.1 to avoid confusion with localized routing
        between IPv4 Proxy-CoAs</t>

 </list></t>

-->
<!--
  </section>
-->
  </back>
</rfc>
