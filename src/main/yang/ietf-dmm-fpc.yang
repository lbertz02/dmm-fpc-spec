module ietf-dmm-fpc {
  yang-version 1.1;
    namespace "urn:ietf:params:xml:ns:yang:ietf-dmm-fpc";
    prefix fpc;

    import ietf-inet-types { prefix inet;
        revision-date 2013-07-15; }
    import ietf-restconf { prefix restconf;
        revision-date 2017-01-26; }
    import ietf-dmm-fpc-settingsext { prefix fpcbase;
        revision-date 2018-02-28; }
    import ietf-diam-trafficclassifier { prefix rfc5777;
        revision-date 2018-02-28; }

    organization "IETF Distributed Mobility Management (DMM)
      Working Group";

    contact
       "WG Web:   <http://tools.ietf.org/wg/netmod/>
        WG List:  <mailto:netmod@ietf.org>

        WG Chair: Dapeng Liu
                  <mailto:maxpassion@gmail.com>

        WG Chair: Jouni Korhonen
                  <mailto:jouni.nospam@gmail.com>

        Editor:   Satoru Matsushima
                  <mailto:satoru.matsushima@g.softbank.co.jp>

        Editor:   Lyle Bertz
                  <mailto:lylebe551144@gmail.com>";

    description
    "This module contains YANG definition for
     Forwarding Policy Configuration Protocol (FPCP).

     Copyright (c) 2016 IETF Trust and the persons identified as the
     document authors. All rights reserved.

     This document is subject to BCP 78 and the IETF Trust's Legal
     Provisions Relating to IETF Documents
     (http://trustee.ietf.org/license-info) in effect on the date of
     publication of this document. Please review these documents
     carefully, as they describe your rights and restrictions with
     respect to this document. Code Components extracted from this
     document must include Simplified BSD License text as described
     in Section 4.e of the Trust Legal Provisions and are provided
     without warranty as described in the Simplified BSD License.";

    revision 2018-02-28 {
    description "Version updates.";
  }
    revision 2017-09-27 {
    description "Version 10 updates.";
    reference "draft-ietf-dmm-fpc-cpdp-10";
  }
revision 2017-07-22 {
    description "Version 08 updates.";
    reference "draft-ietf-dmm-fpc-cpdp-08";
}
revision 2017-03-08 {
    description "Version 06 updates.";
    reference "draft-ietf-dmm-fpc-cpdp-06";
}
revision 2016-08-03 {
    description "Initial Revision.";
    reference "draft-ietf-dmm-fpc-cpdp-05";
}

    //General Structures
    grouping extensibility {
        leaf extensible {
            type boolean;
            description "Indicates if the template is extensible";
        }
        description "Extensibility";
    }
    grouping templatedef {
        uses fpc:extensibility;
        leaf-list mandatory-static-attributes {
            type string;
            description "Attribute (Name) that cannot change.  If
                it has not been defined in the template it MUST not
                be present at all for the template to be valid.";
        }

    }
    typedef fpc-identity {
        type union {
            type uint32;
            type string;
            type instance-identifier;
        }
        description "FPC Identity";
    }

    // Policy Structures
    grouping descriptor-template-key {
        leaf descriptor-template-key {
            type fpc:fpc-identity;
            mandatory true;
            description "Descriptor Key";
        }
        description "Descriptor-Template Key";
    }
    grouping action-template-key {
        leaf action-template-key {
            type fpc:fpc-identity;
            mandatory true;
            description "Action Key";
        }
        description "Action-Template Key";
    }
    grouping rule-template-key {
        leaf rule-template-key {
            type fpc:fpc-identity;
            mandatory true;
            description "Rule Identifier";
        }
        description "Rule Key";
    }
    grouping policy-template-key {
        leaf polciy-template-key {
            type fpc:fpc-identity;
            mandatory true;
            description "Rule Identifier";
        }
        description "Rule Key";
    }

    // Policy Structures
    grouping policy-configuration {
        list policy-configuration {
            choice policy-value {
                case descriptor-value {
                    uses fpcbase:fpc-descriptor-value;
                    description "Descriptor Value";
                }
                case action-value {
                    uses fpcbase:fpc-action-value;
                    description "Action Value";
                }
                description "Configuration Value";
            }
            description "Policy Configuration";
        }
        description "Policy Configuration Value";
    }

    // FPC Policy
    grouping policy-information-model {
      list action-template {
        key action-id;
        uses fpc:action-template-key;
        uses fpcbase:fpc-action-value;
        description "Action Template";
      }
      list descriptor-template {
        key descriptor-key;
        uses fpc:descriptor-template-key;
        uses fpcbase:fpc-descriptor-value;
        description "Descriptor Template";
      }
      list rule-template {
        key rule-key;
        uses fpc:rule-template-key;
        leaf descriptor-match-type {
            default "and";
            type enumeration {
                enum or {
                    value 0;
                    description "OR logic";
                }
                enum and {
                    value 1;
                    description "AND logic";
                }
            }
            description "Type of Match (OR or AND) applied
                to the descriptor-configurations";
        }
        list descriptor-configuration {
            key "descriptor-template-key";
            uses fpc:descriptor-template-key;
            leaf direction {
                type rfc5777:direction-type;
                description "Direction";
            }
            list attribute-expression {
                uses fpcbase:fpc-descriptor-value;
            }
            description "A set of Descriptor references";
        }
        list action-configuration {
            key "action-order";
            leaf action-order {
                type uint32;
                mandatory true;
                description "Action Execution Order";
            }
            uses fpc:action-template-key;
            list attribute-expression {
                uses fpcbase:fpc-action-value;
            }
            description "A set of Action references";
        }
        description "Rule Template";
      }
      list policy-template {
        uses fpc:policy-template-key;
        list rule-template {
            key "precedence";
            unique "rule-template-key";
            leaf precedence {
                type uint32;
                mandatory true;
                description "Rule Precedence";
            }
            uses fpc:rule-template-key;
            description "Rule Entry";
        }
        description "Policy Template";
      }
      description "FPC Policy Structures";
    }

    // Topology Information Model
    identity role {
        description "Role";
    }
    grouping dpn-key {
        leaf dpn-key {
            type fpc:fpc-identity;
        }
        description "DPN Key";
    }
    grouping role-key {
        leaf role-key {
            type identityref {
                base "fpc:role";
            }
            mandatory true;
            description "Access Technology Role";
        }
        description "Access Technology Role key";
    }
    grouping interface-key {
        leaf interface-key{
            type fpc:fpc-identity;
            mandatory true;
            description "interface identifier";
        }
        description "Interface Identifier key";
    }
    identity interface-protocols {
        description "Protocol supported by the interface";
    }
    identity features {
        description "Protocol features";
    }

  // Settings
  grouping interface-settings {
    container interface-settings-set {
      description "Interface settings";
    }
    description "Generic interface settings container";
  }

  // Topology Grouping
  grouping fpc-topology {
    list service-group {
        key service-group-key;
        leaf service-group-key {
            mandatory true;
            type fpc:fpc-identity;
            description "Service Group Key";
        }
        leaf service-group-name {
            type string;
            description "Service Group Name";
        }
        list dpn {
            key "dpn-key role-key";
            uses fpc:dpn-key;
            uses fpc:role-key;
            list referenced-interface {
                key interface-key;
                uses fpc:interface-key;
                leaf-list peer-service-group-key {
                    type fpc:fpc-identity;
                    description "Peer Service Group";
                }
                description "Referenced Interface";
            }
        }
        description "Service Group";
    }
    list dpn-type {
      key role-key;
      uses fpc:role-key;
      leaf role-name {
        type string;
        description "Role Name";
      }
      leaf-list service-group-key {
        type fpc:fpc-identity;
        description "Service Group";
      }
      list interface {
        key "dpn-key interface-key";
        uses fpc:dpn-key;
        uses fpc:interface-key;
        leaf-list interface-protocol-set {
          type identityref {
            base "interface-protocols";
          }
          description "Supported protocols";
        }
        leaf-list feature-set {
          type identityref {
            base "interface-protocols";
          }
          description "Supported features";
        }
        uses fpc:interface-settings;
        description "A DPN interface types";
      }
      description "Set of DPN types";
    }
    list dpn {
      key dpn-key;
      uses fpc:dpn-key;
      leaf dpn-name {
        type string;
        description "DPN name";
      }
      leaf dpn-resource-mapping-reference {
        type string;
        description "Reference to underlying DPN resource(s)";
      }
      leaf-list domain-key {
        type fpc:fpc-identity;
        description "Domains";
      }
      leaf-list service-group-key {
        type fpc:fpc-identity;
        description "Service Group";
      }
      list interface-set {
        key "interface-key";
        uses fpc:interface-key;
        leaf interface-name {
            type string;
            description "DPN-Type Interface Name";
        }
        leaf-list roles {
            type identityref {
                base "fpc:role";
            }
            description "Roles supported";
        }
        uses fpc:interface-settings;
        description "DPN interfaces";
      }
      list dpn-policy-configuration {
        key policy-template-key;
        uses fpc:policy-template-key;
        uses fpc:policy-configuration;
        description "DPN Policy Configuration";
      }
      description "Set of DPNs";
    }
    list domain-set {
      key domain-key;
      leaf domain-key {
        type fpc:fpc-identity;
        mandatory true;
        description "Domain Key";
      }
      leaf domain-name {
        type string;
        description "Domain displayname";
      }
      list domain-policy-configuration {
        key policy-template-key;
        uses fpc:policy-template-key;
        uses fpc:policy-configuration;
        description "Domain Policy Cofiguration";
      }
      description "List of Domains";
    }
    description "FPC Topology grouping";
  }

  // Mobility Context
  grouping mobility-context {
    leaf mobility-context-key {
      type fpc:fpc-identity;
      mandatory true;
      description "Mobility Context Key";
    }
    leaf-list delegating-ip-prefix {
        type inet:ip-prefix;
        description "IP Prefix";
    }
    leaf parent-context {
      type fpc:fpc-identity;
      description "Parent Mobility Context";
    }
    leaf-list child-context {
        type fpc:fpc-identity;
        description "Child Mobility Context";
    }
    container mobile-node {
        leaf-list ip-address {
            mandatory true;
            type inet:ip-address;
            description "IP Address";
        }
        leaf imsi {
            type fpcbase:imsi-type;
            description "IMSI";
        }
        list mn-policy-configuration {
            key policy-template-key;
            uses fpc:policy-template-key;
            uses fpc:policy-configuration;
            description "MN Policy Cofiguration";
        }
        description "Mobile Node";
    }
    container domain {
        uses fpc:domain-template-key;
        list domain-policy-configuration {
            key policy-template-key;
            uses fpc:policy-template-key;
            uses fpc:policy-configuration;
            description "MN Policy Cofiguration";
        }
        description "Domain";
    }
    list dpn {
        key dpn-key;
        uses fpc:dpn-key;
        list dpn-policy-configuration {
            key policy-template-key;
            uses fpc:policy-template-key;
            uses fpc:policy-configuration;
            description "DPN Policy Cofiguration";
        }
        leaf role {
            type identityref {
                base "fpc:role";
            }
            description "Role";
        }
        list service-data-flow {
            key identifier;
            leaf identifier {
                type uint32;
                description "Generic Identifier";
            }
            leaf service-group-key {
                type fpc:fpc-identity;
                description "Service Group Key";
            }
            list interface {
                key interface-key;
                uses fpc:interface-key;
                description "interface assigned";
            }
            list flow-policy-configuration {
                key policy-template-key;
                uses fpc:policy-template-key;
                uses fpc:policy-configuration;
                description "Flow Policy Cofiguration";
            }
            description "Service Dataflow";
        }
        description "DPN";
    }
    description "Mobility Context";
  }

  // Events, Probes & Notifications
  identity event-type {
    description "Base Event Type";
  }
  typedef event-type-id {
    type uint32;
    description "Event ID Type";
  }
  grouping monitor-id {
    leaf monitor-id {
      type fpc:fpc-identity;
      mandatory true;
      description "Monitor Identifier";
    }
    description "Monitor Id";
  }
    grouping monitor-config {
        uses fpc:monitor-id;
    leaf deterrable {
      type boolean;
      description "Indicates reports related to this
        config can be delayed.";
    }
    container binding-information {
      description "Placeholder for information helpful
        to binding the monitor ot the correct target";
    }
    uses fpc:target-value;
    choice configuration {
      mandatory true;
      case periodic-config {
        leaf period {
          type uint32;
          description "Period";
        }
        description "Periodic Config Case";
      }
      case threshold-config {
        leaf lo-thresh {
          type uint32;
          description "lo threshold";
        }
        leaf hi-thresh {
          type uint32;
          description "hi threshold";
        }
        description "Threshold Config Case";
      }
      case scheduled-config {
        leaf report-time {
          type uint32;
          description "Reporting Time";
        }
        description "Scheduled Config Case";
      }
      case events-config-ident {
        leaf-list event-identities {
          type identityref {
            base "fpc:event-type";
          }
          description "Event Identities";
        }
        description "Events Config Identities Case";
      }
      case events-config {
        leaf-list event-ids {
          type uint32;
            description "Event IDs";
        }
        description "Events Config Case";
      }
      description "Event Config Value";
    }
    description "Monitor Configuration";
  }
    grouping report {
      uses fpc:monitor-config;
      choice report-value {
        leaf trigger {
          type fpc:event-type-id;
          description "Trigger Identifier";
        }
        case simple-empty {
          leaf nothing {
            type empty;
            description "Empty Value";
          }
          description "Empty Case";
        }
        case simple-val32 {
          leaf val32 {
            type uint32;
            description "Unsigned 32 bit value";
          }
          description "Simple Value Case";
        }
        case list-simple-val32 {
            leaf-list  val32-list {
              type uint32;
              description "Unsigned 32 bit value";
            }
            description "Simple Value Case";
          }
        description "Report Value";
      }
      description "Monitor Report";
    }
    typedef agent-identifier {
        type fpc:fpc-identity;
        description "Agent Identifier";
    }
    typedef client-identifier {
        type fpc:fpc-identity;
        description "Client Identifier";
    }
    grouping basename-info {
          leaf basename {
            type fpc:fpc-identity;
            description "Rules Basename";
          }
          leaf base-state {
            type string;
            description "Current State";
          }
          leaf base-checkpoint {
            type string;
            description "Checkpoint";
          }
          description "Basename Information";
    }
    // Top Level Structures
  container tenants {
    list tenant {
      key "tenant-id";
      leaf tenant-id {
          type fpc:fpc-identity;
          description "Tenant ID";
      }
          container mobility {
           container topology {
              uses fpc:fpc-topology;
             uses fpc:basename-info {
               if-feature fpc:fpc-basename-registry;
             }
              description "Topology";
            }
           container policy {
             uses fpc:fpc-policy;
             uses fpc:basename-info {
               if-feature fpc:fpc-basename-registry;
             }
             description "Policy";
           }
            uses fpc:configurable-policy-set;
            list mobility-context-set {
                key "mobility-context-id";
                config false;
                uses fpc:mobility-context;
                description "Mobility Context Set";
            }
            list monitor-set {
              key monitor-id;
              uses fpc:monitor-config;
              description "Monitor Configurations";
            }
            description "Mobility Elements";
          }
      description "Tenant";
    }
    description "Tenant List";
  }
    // RPC
    // RPC Specific Structures
    typedef op-identifier {
        type uint64;
        description "Operation Identifier";
    }
    typedef ref-scope {
      type enumeration {
        enum none {
          value 0;
          description "no references";
        }
        enum op {
          value 1;
          description "All references are intra-operation";
        }
        enum bundle {
          value 2;
          description "All references in exist in bundle";
        }
        enum storage {
          value 3;
          description "One or more references exist in storage.";
        }
        enum unknown {
          value 4;
          description "The location of the references are unknown.";
        }
      }
      description "Search scope for references in the operation.";
    }
    grouping context-operation {
      uses fpc:mobility-context;
      uses fpcbase:instructions;
      description "Context Operation";
    }
    grouping payload {
        uses fpc:configurable-policy-set;
    list mobility-context-set {
        key "mobility-context-id";
        uses fpc:mobility-context;
        description "Mobility Context Set";
    }
    uses fpc:fpc-policy;
    description "Payload";
  }
    grouping op-header {
    leaf client-id {
      type fpc:client-identifier;
      mandatory true;
      description "Client ID";
    }
    leaf delay {
      type uint32;
      description "Operation Delay (ms)";
    }
    leaf op-id {
      type op-identifier;
      mandatory true;
      description "Operation Identifier";
    }
    description "Common Operation header";
    }
  grouping fpc-op-type {
    leaf op-type {
      type enumeration {
        enum create {
          value 0;
          description "create";
        }
        enum update {
          value 1;
          description "update";
        }
        enum query {
          value 2;
          description "query";
        }
        enum delete {
          value 3;
          description "delete";
        }
      }
      mandatory true;
      description "Type";
    }
    description "FPC Operation Type";
  }
  grouping fpc-op-ref-scope {
    leaf op-ref-scope {
      type fpc:ref-scope;
      description "Reference Scope";
    }
    description "FPC OP-REF Scope";
  }
  grouping op-input {
    uses fpc:fpc-op-ref-scope;
    uses fpcbase:instructions;
    choice op_body {
      case create_or_update {
        uses fpc:payload;
        description "Create/Update input";
      }
      case delete_or_query {
        uses fpc:target-value;
        description "Delete/Query input";
      }
      description "Opeartion Input value";
    }
    description "Operation Input";
  }
  typedef result-status {
    type enumeration {
      enum ok {
        value 0;
        description "OK";
      }
      enum err {
        value 1;
        description "Error";
      }
    }
    description "Result Status";
  }
  grouping status-value {
    leaf op-id {
      type op-identifier;
      mandatory true;
      description "Operation Identifier";
    }
    leaf status {
      type result-status;
      mandatory true;
      description "Status";
    }
    description "Status value for all messages";
  }
  grouping result {
    uses fpc:status-value;
    uses fpc:result-body;
    description "General Result grouping";
  }
  grouping result-body {
    leaf notify-follows {
      type boolean;
      description "Indicates that a notification will
        follow regarding this result";
    }
    choice result-type {
      case err {
        uses restconf:errors;
        description "Error Information";
      }
      case create-or-update-success {
        uses fpc:payload;
        description "Create/Update Success";
      }
      case delete_or_query-success {
        uses fpc:target-value;
        description "Delete/Query Success";
      }
      case empty-case {
        description "Empty Case";
      }
      description "Result Value";
    }
    description "Common Result member body";
  }
  // Common RPCs
  rpc configure {
    description "CONF message";
    input {
      uses fpc:op-header;
      uses fpc:fpc-op-type;
      uses fpc:op-input;
    }
    output {
      uses fpc:result;
    }
  }
  rpc reg_monitor {
    description "Used to register monitoring of parameters/events";
    input {
      uses fpc:op-header;
      uses fpc:monitor-config;
    }
    output {
      uses fpc:status-value;
      uses restconf:errors;
    }
  }
  rpc dereg_monitor {
    description "Used to de-register monitoring of
      parameters/events";
    input {
      uses fpc:op-header;
      leaf-list monitor-set {
        type fpc:fpc-identity;
        min-elements 1;
        description "Monitor Identifier";
      }
      leaf send_data {
        type boolean;
        description "Indicates if NOTIFY with final data
          is desired upon deregistration";
      }
    }
    output {
      uses fpc:status-value;
      uses restconf:errors;
    }
  }
  rpc probe {
    description "Probe the status of a registered monitor";
    input {
      uses fpc:op-header;
      uses fpc:monitor-id;
    }
    output {
      uses fpc:status-value;
      uses restconf:errors;
    }
  }
  // Notification Messages & Structures
  grouping notification-header {
    leaf notification-id {
      type uint32;
      description "Notification Identifier";
    }
    leaf timestamp {
      type uint32;
      description "timestamp";
    }
    description "Notification Header";
  }
  notification config-result-notification {
    uses fpc:notification-header;
    uses fpc:status-value;
    choice value {
      case config-result {
        uses result-body;
        description "CONF Result";
      }
      case config-bundle-result {
        list bundles {
          key op-id;
          uses fpc:result;
          description "Operation Identifier";
        }
        description "CONF_BUNDLES Result";
      }
      description "Config Result value";
    }
    description "CONF/CONF_BUNDLES Async Result";
  }
  identity notification-cause {
    description "Notification Cause";
  }
  identity dpn-availabilty-change {
    base "notification-cause";
    description "DPN Candidate/Exisitng DPN Availablity Change";
  }
  identity monitoring-suspension {
    base "notification-cause";
    description "Indicates monitoring suspension";
  }
  identity monitoring-resumption {
    base "notification-cause";
    description "Indicates that monitoring has resumed";
  }
  identity monitor-notification {
    base "notification-cause";
    description "Indicates 1+ monitor reports";
  }
  notification notify {
    uses fpc:notification-header;
    leaf cause {
      type identityref {
        base "notification-cause";
      }
      description "Notification Cause";
    }
    choice value {
      case dpn-candidate-available {
        if-feature fpc:fpc-auto-binding;
        leaf node-id {
          type inet:uri;
          description "Topology URI";
        }
        list supported-interface-list {
          key "access-technology role";
          uses fpc:access-technology-key;
          uses fpc:role-key;
          description "Support Intefaces";
        }
        description "DPN Candidate Information";
      }
      case dpn-unavailable {
        leaf dpn-id {
          type fpc:fpc-identity;
          description "DPN Identifier";
        }
        description "DPN Unavailable";
      }
      case monitor-notification {
        list reports {
          uses fpc:report;
          description "Reports";
        }
        description "Monitor Notification";
      }
      description "Notify Value";
    }
    description "Notify Message";
  }
}
