module ietf-dmm-fpc {
	yang-version 1.1;
    namespace "urn:ietf:params:xml:ns:yang:ietf-dmm-fpc";
    prefix fpc;

    import ietf-inet-types { prefix inet; revision-date 2013-07-15; }
    import ietf-restconf { prefix restconf; revision-date 2017-01-26; }

    include ietf-dmm-fpc-base;
    include ietf-dmm-fpc-settingsext;

    organization "IETF Distributed Mobility Management (DMM)
      Working Group";

    contact
       "WG Web:   <http://tools.ietf.org/wg/netmod/>
        WG List:  <mailto:netmod@ietf.org>

        WG Chair: Dapeng Liu
                  <mailto:maxpassion@gmail.com>

        WG Chair: Jouni Korhonen
                  <mailto:jouni.nospam@gmail.com>

        Editor:   Satoru Matsushima
                  <mailto:satoru.matsushima@g.softbank.co.jp>

        Editor:   Lyle Bertz
                  <mailto:lylebe551144@gmail.com>";

    description
    "This module contains YANG definition for
     Forwarding Policy Configuration Protocol (FPCP).

     Copyright (c) 2016 IETF Trust and the persons identified as the
     document authors. All rights reserved.

     This document is subject to BCP 78 and the IETF Trust's Legal
     Provisions Relating to IETF Documents
     (http://trustee.ietf.org/license-info) in effect on the date of
     publication of this document. Please review these documents
     carefully, as they describe your rights and restrictions with
     respect to this document. Code Components extracted from this
     document must include Simplified BSD License text as described
     in Section 4.e of the Trust Legal Provisions and are provided
     without warranty as described in the Simplified BSD License.";

    revision 2017-09-27 {
		description "Version 10 updates.";
		reference "draft-ietf-dmm-fpc-cpdp-10";
	}
    revision 2017-03-08 {
        description "Version 06 updates.";
        reference "draft-ietf-dmm-fpc-cpdp-06";
    }
    revision 2016-08-03 {
        description "Initial Revision.";
        reference "draft-ietf-dmm-fpc-cpdp-05";
    }
    feature fpc-basename-registry {
      description "Ability to track Base Names already provisioned
        on the Agent";
    }
    feature fpc-bundles {
      description "Ability for Client to send multiple bundles of
        actions to an Agent";
    }
    feature fpc-auto-binding {
      description "Allows a FPC Agent to advertise Topology Objects
        that could be DPNs";
    }
    feature instruction-bitset {
      description "Allows the expression of instructions (bit sets)
        over FPC.";
    }
    feature operation-ref-scope {
      description "Provides the scope of refeneces in an operation.
        Used to optmize the Agent processing.";
    }
    feature policy-rpc-provisioning {
      description "Enables the ability to send policy elements
        (Policy Groups, Policies, Descriptors and Actions) to be sent
        in CONF or CONF_BUNDLE operations.";
    }

    typedef agent-identifier {
        type fpc:fpc-identity;
        description "Agent Identifier";
    }
    typedef client-identifier {
        type fpc:fpc-identity;
        description "Client Identifier";
    }
    grouping basename-info {
          leaf basename {
            type fpc:fpc-identity;
            description "Rules Basename";
          }
          leaf base-state {
            type string;
            description "Current State";
          }
          leaf base-checkpoint {
            type string;
            description "Checkpoint";
          }
          description "Basename Information";
    }
    // Top Level Structures
	container tenants {
		list tenant {
			key "tenant-id";
			leaf tenant-id {
			    type fpc:fpc-identity;
			    description "Tenant ID";
			}
		    	container mobility {
		     	container topology {
		    			uses fpc:fpc-topology;
	     			uses fpc:basename-info {
	     				if-feature fpc:fpc-basename-registry;
	     			}
		    			description "Topology";
		    		}
	     		container policy {
	     			uses fpc:fpc-policy;
	     			uses fpc:basename-info {
	     				if-feature fpc:fpc-basename-registry;
	     			}
	     			description "Policy";
	     		}
		    		uses fpc:configurable-policy-set;
		    		list mobility-context-set {
		    			  key "mobility-context-id";
		    			  config false;
		    			  uses fpc:mobility-context;
		    			  description "Mobility Context Set";
		    		}
		    		list monitor-set {
		    			key monitor-id;
		    			uses fpc:monitor-config;
		    			description "Monitor Configurations";
		    		}
		    		description "Mobility Elements";
		    	}
			description "Tenant";
		}
		description "Tenant List";
	}
    // RPC
    // RPC Specific Structures
    typedef op-identifier {
        type uint64;
        description "Operation Identifier";
    }
    typedef ref-scope {
      type enumeration {
        enum none {
          value 0;
          description "no references";
        }
        enum op {
          value 1;
          description "All references are intra-operation";
        }
        enum bundle {
          value 2;
          description "All references in exist in bundle";
        }
        enum storage {
          value 3;
          description "One or more references exist in storage.";
        }
        enum unknown {
          value 4;
          description "The location of the references are unknown.";
        }
      }
      description "Search scope for references in the operation.";
    }
    grouping instructions {
      container instructions {
        if-feature instruction-bitset;
        choice instr-type {
          description "Instruction Value Choice";
        }
        description "Instructions";
      }
      description "Instructions Value";
    }
    grouping context-operation {
      uses fpc:mobility-context;
      uses fpc:instructions;
      description "Context Operation";
    }
    grouping payload {
    		uses fpc:configurable-policy-set;
		list mobility-context-set {
			  key "mobility-context-id";
			  uses fpc:mobility-context;
			  description "Mobility Context Set";
		}
		uses fpc:fpc-policy {
			if-feature fpc:policy-rpc-provisioning;
		}
		description "Payload";
	}
    grouping op-header {
		leaf client-id {
			type fpc:client-identifier;
			mandatory true;
			description "Client ID";
		}
		leaf delay {
			type uint32;
			description "Operation Delay (ms)";
		}
		leaf op-id {
			type op-identifier;
			mandatory true;
			description "Operation Identifier";
		}
		description "Common Operation header";
    }
	grouping fpc-op-type {
		leaf op-type {
			type enumeration {
				enum create {
					value 0;
					description "create";
				}
				enum update {
					value 1;
					description "update";
				}
				enum query {
					value 2;
					description "query";
				}
				enum delete {
					value 3;
					description "delete";
				}
			}
			mandatory true;
			description "Type";
		}
		description "FPC Operation Type";
	}
	grouping fpc-op-ref-scope {
		leaf op-ref-scope {
			if-feature operation-ref-scope;
			type fpc:ref-scope;
			description "Reference Scope";
		}
		description "FPC OP-REF Scope";
	}
	grouping op-input {
		uses fpc:fpc-op-ref-scope;
		uses fpc:instructions;
		choice op_body {
			case create_or_update {
				uses fpc:payload;
				description "Create/Update input";
			}
			case delete_or_query {
				uses fpc:target-value;
				description "Delete/Query input";
			}
			description "Opeartion Input value";
		}
		description "Operation Input";
	}
	typedef result-status {
		type enumeration {
			enum ok {
				value 0;
				description "OK";
			}
			enum err {
				value 1;
				description "Error";
			}
		}
		description "Result Status";
	}
	grouping status-value {
		leaf op-id {
			type op-identifier;
			mandatory true;
			description "Operation Identifier";
		}
		leaf status {
			type result-status;
			mandatory true;
			description "Status";
		}		
		description "Status value for all messages";
	}
	grouping result {
		uses fpc:status-value;
		uses fpc:result-body;
		description "General Result grouping";
	}
	grouping result-body {
		leaf notify-follows {
			type boolean;
			description "Indicates that a notification will 
				follow regarding this result";
		}
		choice result-type {
			case err {
				uses restconf:errors;
				description "Error Information";
			}
			case create-or-update-success {
				uses fpc:payload;
				description "Create/Update Success";
			}
			case delete_or_query-success {
				uses fpc:target-value;
				description "Delete/Query Success";
			}
			case empty-case {
				description "Empty Case";
			}
			description "Result Value";
		}
		description "Common Result member body";
	}
	// Common RPCs
	rpc configure {
		description "CONF message";
		input {
			uses fpc:op-header;
			uses fpc:fpc-op-type;
			uses fpc:op-input;
		}
		output {
			uses fpc:result;
		}
	}
	rpc configure-bundles {
		if-feature fpc:fpc-bundles;
		description "CONF_BUNDLES message";
		input {
			uses fpc:op-header;
			uses fpc:fpc-op-type;
			uses fpc:fpc-op-ref-scope;
			list bundles {
				key op-id;
				leaf op-id {
					type op-identifier;
					mandatory true;
					description "Operation Identifier";
				}
				uses fpc:op-input;
				description "List of operations";
			}
		}
		output {
			uses fpc:status-value;
			list bundles {
				key op-id;
				uses fpc:result;
				description "Operation Identifier";
			}
		}
	}
	rpc event_register {
		description "Used to register monitoring of parameters/events";
		input {
			uses fpc:op-header;
			uses fpc:monitor-config;
		}
		output {
			uses fpc:status-value;
			uses restconf:errors;
		}
	}
	rpc event_deregister {
		description "Used to de-register monitoring of
		  parameters/events";
		input {
			uses fpc:op-header;
			leaf-list monitors {
				type fpc:fpc-identity;
				min-elements 1;
				description "Monitor Identifier";
			}
		}
		output {
			uses fpc:status-value;
			uses restconf:errors;
		}
	}
	rpc probe {
		description "Probe the status of a registered monitor";
		input {
			uses fpc:op-header;
			uses fpc:target-value;
		}
		output {
			uses fpc:status-value;
			uses restconf:errors;
		}
	}
	// Notification Messages & Structures
	grouping notification-header {
		leaf notification-id {
			type uint32;
			description "Notification Identifier";
		}
		leaf timestamp {
			type uint32;
			description "timestamp";
		}
		description "Notification Header";
	}
	notification config-result-notification {
		uses fpc:notification-header;
		uses fpc:status-value;
		choice value {
			case config-result {
				uses result-body;
				description "CONF Result";
			}
			case config-bundle-result {
				list bundles {
					key op-id;
					uses fpc:result;
					description "Operation Identifier";
				}
				description "CONF_BUNDLES Result";
			}
			description "Config Result value";
		}
		description "CONF/CONF_BUNDLES Async Result";
	}
	identity notification-cause {
		description "Notification Cause";
	}
	identity dpn-availabilty-change {
		base "notification-cause";
		description "DPN Candidate/Exisitng DPN Availablity Change";
	}
	identity monitoring-suspension {
		base "notification-cause";
		description "Indicates monitoring suspension";
	}
	identity monitoring-resumption {
		base "notification-cause";
		description "Indicates that monitoring has resumed";
	}
	identity monitor-notification {
		base "notification-cause";
		description "Indicates 1+ monitor reports";
	}
	notification notify {
		uses fpc:notification-header;
		leaf cause {
			type identityref {
				base "notification-cause";
			}
			description "Notification Cause";
		}
		choice value {
			case dpn-candidate-available {
				if-feature fpc:fpc-auto-binding;
				leaf node-id {
					type inet:uri;
					description "Topology URI";
				}
				list supported-interface-list {
					key "access-technology role";
					uses fpc:access-technology-key;
					uses fpc:role-key;
					description "Support Intefaces";
				}
				description "DPN Candidate Information";
			}
			case dpn-unavailable {
				leaf dpn-id {
					type fpc:fpc-identity;
					description "DPN Identifier";
				}
				description "DPN Unavailable";
			}
			case monitor-notification {
				list reports {
					uses fpc:report;
					description "Reports";
				}
				description "Monitor Notification";
			}
			description "Notify Value";
		}
		description "Notify Message";
	}
}
