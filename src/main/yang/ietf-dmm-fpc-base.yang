submodule ietf-dmm-fpc-base {
    belongs-to ietf-dmm-fpc {
       prefix fpc;
    }

    import ietf-inet-types { prefix inet; revision-date 2013-07-15; }
    import ietf-yang-types { prefix ytypes;
        revision-date 2013-07-15; }


    organization "IETF Distributed Mobility Management (DMM)
      Working Group";

    contact
       "WG Web:   <http://tools.ietf.org/wg/netmod/>
        WG List:  <mailto:netmod@ietf.org>

        WG Chair: Dapeng Liu
                  <mailto:maxpassion@gmail.com>

        WG Chair: Jouni Korhonen
                  <mailto:jouni.nospam@gmail.com>

        Editor:   Satoru Matsushima
                  <mailto:satoru.matsushima@g.softbank.co.jp>

        Editor:   Lyle Bertz
                  <mailto:lylebe551144@gmail.com>";

    description
    "This module contains YANG definition for
     Forwarding Policy Configuration Protocol(FPCP).

     Copyright (c) 2016 IETF Trust and the persons identified as the
     document authors. All rights reserved.

     This document is subject to BCP 78 and the IETF Trust's Legal
     Provisions Relating to IETF Documents
     (http://trustee.ietf.org/license-info) in effect on the date of
     publication of this document. Please review these documents
     carefully, as they describe your rights and restrictions with
     respect to this document. Code Components extracted from this
     document must include Simplified BSD License text as described
     in Section 4.e of the Trust Legal Provisions and are provided
     without warranty as described in the Simplified BSD License.";
    
    revision 2017-09-27 {
    		description "Version 10 updates.";
    		reference "draft-ietf-dmm-fpc-cpdp-10";
    }
    revision 2017-07-22 {
        description "Version 08 updates.";
        reference "draft-ietf-dmm-fpc-cpdp-08";
    }
    revision 2017-03-08 {
        description "Version 06 updates.";
        reference "draft-ietf-dmm-fpc-cpdp-06";
    }
    revision 2016-08-03 {
        description "Initial Revision.";
        reference "draft-ietf-dmm-fpc-cpdp-05";
    }

	//General Structures
    typedef fpc-identity {
        type union {
            type uint32;
            type string;
            type instance-identifier;
        }
        description "FPC Identity";
    }
    grouping target-value {
      leaf target {
          type fpc-identity;
          description "Target Identity";
      }
      description "FPC Target Value";
    }
	typedef display-name {
		type string;
		description "A human readable string";
	}
	// Topology Types
	//Topology - Typedefs
    typedef fpc-dpn-id {
      type fpc:fpc-identity;
      description "DPN Identifier Type";
    }
	typedef fpc-interface-id {
        type fpc:fpc-identity;
        description "DPN interface Identifier";
	}
    typedef fpc-domain-id {
        type fpc:fpc-identity;
        description "Domain Identifier Type";
    }
    typedef fpc-dpn-group-id {
      type fpc:fpc-identity;
      description "DPN Group Identifier Type";
    }
    typedef fpc-domain-reference {
        type fpc:fpc-identity;
        description "Domain reference Type";
    }
	typedef fpc-displayname {
		type string;
		description "Human readable name";
	}
    // Topology - Identities
    identity access-technology {
    		description "The technology used in the access network";
    }
    identity role {
    		description "The access-technology function of the DPN";
    }
    identity interface-protocols {
    		description "Protocol supported by the interface";
    }
    identity features {
    		description "Protocol features";
    }
	
	// Settings
	grouping settings {
		container settings-list {
			uses fpc:fpc-settings;
			description "Settings";
		}
		description "Settings container";
	}
	//Topology - Groupings
	grouping interface-settings {
		container interface-settings-list {
			description "Interface settings";
		}
		description "Generic interface settings container";
	}
	grouping access-technology-key {
		leaf access-technology {
			mandatory true;
			type identityref {
				base "access-technology";
			}
			description "Access Technology";
		}
		description "Access Technology key";
	}
	grouping access-role-key {
		leaf role {
			mandatory true;
			type identityref {
				base "role";
			}
			description "Access Technology Role";
		}
		description "Access Technology Role key";
	}
	grouping interface-id-key {
		leaf interface-id {
			type fpc:fpc-interface-id;
			mandatory true;
			description "interface identifier";
		}
		description "Interface Identifier key";
	}
	grouping dpn-identifier {
		leaf dpn-id {
			type fpc:fpc-dpn-id;
		}
	}
	grouping dpn-interface {
		uses fpc:interface-id-key;
		leaf-list interface-protocol-set {
			type identityref {
				base "interface-protocols";
			}
			description "Supported protocols";
		}
		leaf-list feature-set {
			type identityref {
				base "interface-protocols";
			}
			description "Supported features";
		}
		uses fpc:interface-settings;
		description "A DPN interface";
	}
	grouping dpn-interface-reference {
		uses fpc:access-technology-key;
		uses fpc:access-role-key;
		uses fpc:interface-id-key;
		description "A reference to a DPN interface";
	}
	grouping dpn-type {
		uses fpc:access-technology-key;
		leaf access-technology-displayname {
			type fpc:fpc-displayname;
			description "Access Technology displayname";
		}
		uses fpc:access-role-key;
		leaf access-role-displayname {
			type fpc:fpc-displayname;
			description "Access Technology Role displayname";
		}
		list interface-list {
			key interface-id;
			uses fpc:dpn-interface;
			description "A list of interfaces";
		}
		description "Describes a type of DPN";
	}
	grouping dpn-group-peer {
		leaf remote-dpn-group-id {
			mandatory true;
			type fpc:fpc-dpn-group-id;
			description "Remote DPN Group identifier";
		}
		uses fpc:interface-settings;
		description "Locally applied settings used for 
			the referenced DPN-Group (peer group).";
	}
	grouping referenced-dpn {
		uses fpc:dpn-interface-reference;
		leaf-list dpn-id-set {
			type fpc:fpc-interface-id;
			description "List of DPN interfaces";
		}
		list dpn-group-peer-set {
			key remote-dpn-group-id;
			uses fpc:dpn-group-peer;
		}
		description "A list of DPNs supporting a group";
	}
	grouping dpn-group {
		leaf dpn-group-id {
			mandatory true;
			type fpc:fpc-dpn-id;
			description "DPN Group Identifier";
		}
		list referenced-dpn-set {
			key "access-technology role interface-id";
			uses fpc:referenced-dpn;
		}
		leaf domain-id {
			type fpc:fpc-domain-id;
			description "Domain Identiifer";
		}
		description "DPN Group";
	}
	grouping domain {
		leaf domain-id {
			mandatory true;
			type fpc:fpc-domain-id;
			description "Domain Identifier";
		}
		leaf domain-displayname {
			type fpc:fpc-displayname;
			description "Domain displayname";
		}
		leaf domain-reference {
			type string;
			description "Reference to domain resources";
		}
		description "Domain";
	}
	grouping dpn {
		leaf dpn-id {
			mandatory true;
			type fpc:fpc-dpn-id;
		}
		list interfaces {
			key "access-technology role interface-id";
			uses fpc:dpn-interface-reference;
			container additional-settings-list {
				description "Additional settings";
			}
			description "DPN interfaces";
		}
		leaf dpn-displayname {
			type fpc:fpc-displayname;
			description "DPN displayname";
		}
		leaf dpn-reference {
			type string;
			description "Reference to underlying DPN resources";
		}
	}
	// Topology Grouping
	grouping fpc-topology {
		list dpn-type-set {
			key "access-technology role";	
			uses fpc:dpn-type;
			description "Set of DPN types";
		}
		list dpn-group-list {
			key "dpn-group-id";
			uses fpc:dpn-group;
			description "List of DPN groups";
		}
		list domain-list {
			key domain-id;
			uses fpc:domain;
			description "List of Domains";
		}
		list dpn-list {
			key dpn-id;
			uses fpc:dpn;
			description "List of DPNs";
		}
	}
	// Policy Structures
    // Descriptor Structure
    typedef fpc-descriptor-id {
        type fpc:fpc-identity;
        description "Descriptor-Id";
    }
    grouping descriptor-identifier {
      leaf descriptor-id {
        type fpc:fpc-descriptor-id;
        description "Descriptor Id";
      }
      description "FPC Descriptor ID value";
    }
    identity fpc-descriptor-type {
        description "A traffic descriptor";
    }
    grouping descriptor-type-value {
        leaf descriptor-type {
          type identityref {
            base "fpc-descriptor-type";
          }
          mandatory true;
          description "Descriptor Type Value";
        }
    }
    grouping fpc-descriptor-value {
      choice descriptor-value {
          mandatory true;
          //default no-traffic; - barred by YANG
          case all-traffic {
            leaf all-traffic {
              type empty;
              description "admit any";
            }
          }
          case no-traffic {
            leaf no-traffic {
              type empty;
              description "deny any";
            }
          }
          description "Descriptor Value";
      }
    }
    grouping descriptor {
        uses fpc:descriptor-identifier;
        uses fpc:descriptor-type-value;
        uses fpc:fpc-descriptor-value;
        description "FPC Descriptor";
    }
    // Action Structure
    typedef fpc-action-id {
        type fpc:fpc-identity;
        description "Action-Id";
    }
    grouping action-identifier {
      leaf action-id {
        type fpc:fpc-action-id;
        description "Action Identifier";
      }
      description "FPC Action ID value";
    }
    identity fpc-action-type {
        description "Action Type";
    }
    grouping action-type-value {
        leaf action-type {
          type identityref {
            base "fpc-action-type";
          }
          mandatory true;
          description "Action Type";
        }
    }
    grouping fpc-action-value {
      choice action-value {
        mandatory true;
        //default drop; - barred by YANG
        case drop {
          leaf drop {
            type empty;
            description "Drop Traffic";
          }
        }
      }
      description "Action Value";
    }
    grouping action {
        uses fpc:action-identifier;
        uses fpc:action-type-value;
        uses fpc:fpc-action-value;
        description "FPC Action";
    }
    // Rule Structure
    typedef fpc-rule-id {
        type fpc:fpc-identity;
        description "Rule-Id";
    }
    grouping rule-identifier {
      leaf rule-id {
        type fpc:fpc-rule-id;
        description "Rule Identifier";
      }
      description "FPC Rule ID value";
    }
    grouping order {
      leaf action-order {
        type uint32;
        description "Action Execution Order";
      }
    }
    typedef fpc-direction-type {
       type enumeration {
         enum lylebe551144 {
           description "lylebe551144";
         }
         enum downlink {
           description "Downlink";
         }
         enum both {
           description "Both";
        }
       }
       description "FPC Direction";
    }
    grouping fpc-direction {
      leaf direction {
        type fpc:fpc-direction-type;
        description "Direction";
      }
    }
    grouping rule {
        uses fpc:rule-identifier;
        list descriptor-entry-set {
          key "descriptor-id";
          uses fpc:descriptor-identifier;
          uses fpc:fpc-direction;
          description "A set of Descriptor references";
        }
        list action-entry-set {
          key "action-order";
          uses fpc:order;
          uses fpc:action-identifier;
          description "A set of Action references";
        }
        description
          "FPC Rule.  When no actions are present the action is DROP.
          When no Descriptors are present 'all traffic' (permit any) 
		  is permitted.";
    }
    // Policy Structures
    typedef fpc-policy-id {
        type fpc:fpc-identity;
        description "Policy Identifier";
    }
    grouping policy-identifier {
      leaf policy-id {
        type fpc:fpc-policy-id;
        description "Policy Identifier";
      }
      description "FPC Policy Id value";
    }
    grouping fpc-precedence {
      leaf precedence {
        type uint32;
        description "Rule Precedence";
      }
      description "FPC Rule Precedence";
    }
    grouping policy {
        uses fpc:policy-identifier;
        list rule-set {
            key "precedence";
            unique "rule-id";
            uses fpc:fpc-precedence;
            uses fpc:rule-identifier;
            description "Rule Entry";
        }
        description "FPC Policy";
    }
    // FPC Policy
	grouping fpc-policy {
		list action-list {
			key action-id;
			uses fpc:action;
			description "List of Actions";
		}
		list descriptor-list {
			key descriptor-id;
			uses fpc:descriptor;
			description "List of Descriptors";
		}
		list rule-list {
			key rule-id;
			uses fpc:rule;
			description "List of Rules";
		}
		list policy-list {
			key policy-id;
			uses fpc:policy;
			description "List of Policies";
		}
		description "FPC Policy Structures";
	}
    // Mobility Structures
	// Installed DPN Policy
	grouping installed-dpn-policy {
		leaf installed-dpn-policy-id {
			type fpc:fpc-policy-id;
			description "Installed Policy identifier";
		}
		leaf policy-template-id {
			type fpc:fpc-policy-id;
			description "Policy Template identifier";
		}
		uses fpc:settings;
		description "Policy installed upon a DPN";
	}
	grouping installed-dpn-policies {
		uses fpc:dpn-identifier;
		uses fpc:settings;
		list installed-policy-list {
			key installed-dpn-policy-id;
			uses fpc:installed-dpn-policy;
			description "List of DPN policies";
		}
		description "List of installed DPN policies and settings";
	}
    // Embedded Rule - basis for FPC dynamic policy
    grouping fpc-embeddedable-rule {
        uses fpc:fpc-precedence;
        uses fpc:rule-identifier;
        list descriptor-entry-set {
          key descriptor-id;
          uses fpc:descriptor-identifier;
          choice desc_val_or_ref {
            default reference;
            case value {
              uses fpc:descriptor-type-value;
              uses fpc:fpc-descriptor-value;
              description "A Descriptor value";
            }
            case reference {
              leaf novalue {
                  type empty;
                  description "No value provided";
              }
              description "A Descriptor reference";
            }
            case direction {
              uses fpc:fpc-direction;
              description "Direction applied to reference";
            }
            description "A set of Descriptor references";
          }
        }
        list action-entry-set {
          key action-order;
          uses fpc:order;
          choice action_val_or_ref {
            case value {
              uses fpc:action-type-value;
              uses fpc:fpc-action-value;
              description "action value";
            }
            case action-reference {
              uses fpc:action-identifier;
              description "action reference";
            }
          }
          description "A set of Action references";
        }
        description "FPC Embedded Rule.";
    }
    grouping fpc-embeddable-rule-list {
        list embeddedable-rule-list {
            key "precedence";
            unique "rule-id";
            uses fpc:fpc-embeddedable-rule;
            description "Embeddable Rule List";
        }
		description "List of Embeddable Rules";
    }
    grouping fpc-referenced-policy-list {
        leaf-list referenced-policy-list {
            type fpc:fpc-policy-id;
            description "List of Policy References.";
        }
		description "List of Policy references";
    }
    // Dynamic Policy
    grouping dpn-policy {
        uses fpc:dpn-identifier;
        uses fpc:fpc-direction;
        uses fpc:settings;
        uses fpc:interface-id-key;
        leaf-list parent-referenced-policy-list {
            type fpc:fpc-policy-id;
            description "Policies assigned to this DPN policy.";
        }
        leaf-list parent-embedded-rule-list {
            type fpc:fpc-rule-id;
            description "Rules assigned to this DPN Policy.";
        }
        uses fpc:fpc-referenced-policy-list;
        uses fpc:fpc-embeddable-rule-list;
        description "DPN Policy";
    }
    grouping fpc-dynamic-policy {
        leaf dynamic-policy-id {
            type fpc:fpc-identity;
            description "Dynamic Policy ID";
        }
		leaf dpn-group-id {
			type fpc:fpc-dpn-group-id;
			description "DPN Group used during DPN selection";
		}
        leaf-list delegated-ip-prefixes {
            type inet:ip-prefix;
            description "Delegated Prefix(es)";
        }
        leaf parent-policy-id {
            type fpc:fpc-identity;
            description "Parent Dynamic Policy";
        }
        list dpn-list {
            key "dpn-id direction";
            uses fpc:dpn-policy;
        }
        uses fpc:fpc-embeddable-rule-list;
        uses fpc:fpc-referenced-policy-list;
		uses fpc:settings;
        description "FCP Dynamic Policy";
    }
    // Events, Probes & Notifications
    identity event-type {
        description "Base Event Type";
    }
    typedef event-type-id {
        type uint32;
        description "Event ID Type";
    }
    grouping monitor-id {
      leaf monitor-id {
        type fpc:fpc-identity;
        description "Monitor Identifier";
      }
      description "Monitor ID";
    }
    identity report-type {
      description "Type of Report";
    }
    identity periodic-report {
      base "fpc:report-type";
      description "Periodic Report";
    }
    identity threshold-report {
      base "fpc:report-type";
      description "Threshold Report";
    }
    identity scheduled-report {
      base "fpc:report-type";
      description "Scheduled Report";
    }
    identity events-report {
      base "fpc:report-type";
      description "Events Report";
    }
    grouping report-config {
      choice event-config-value {
        case periodic-config {
            leaf period {
              type uint32;
              description "Period";
            }
            description "Periodic Config Case";
        }
        case threshold-config {
            leaf lo-thresh {
              type uint32;
              description "lo threshold";
            }
            leaf hi-thresh {
              type uint32;
              description "hi threshold";
            }
            description "Threshold Config Case";
        }
        case scheduled-config {
            leaf report-time {
              type uint32;
              description "Reporting Time";
            }
            description "Scheduled Config Case";
        }
        case events-config-ident {
            leaf-list event-identities {
              type identityref {
                base "fpc:event-type";
              }
              description "Event Identities";
            }
            description "Events Config Identities Case";
        }
        case events-config {
            leaf-list event-ids {
              type uint32;
              description "Event IDs";
            }
            description "Events Config Case";
        }
        description "Event Config Value";
      }
      description "Report Configuration";
    }
    grouping monitor-config {
      uses fpc:monitor-id;
      leaf deterrable {
          type boolean;
          description "Indicates reports related to this
            config can be delayed.";
      }
      uses fpc:target-value;
      uses fpc:report-config;
      description "Monitor Configuration";
    }
    grouping report {
      uses fpc:monitor-config;
      choice report-value {
        leaf trigger {
          type fpc:event-type-id;
          description "Trigger Identifier";
        }
        case simple-empty {
          leaf nothing {
            type empty;
            description "Empty Value";
          }
          description "Empty Case";
        }
        case simple-val32 {
          leaf val32 {
            type uint32;
            description "Unsigned 32 bit value";
          }
          description "Simple Value Case";
        }
        description "Report Value";
      }
      description "Monitor Report";
    }

    // Settings
    grouping fpc-settings {
        leaf tunnel-local-address {
            type inet:ip-address;
            description "local tunnel address";
        }
        leaf tunnel-remote-address {
            type inet:ip-address;
            description "remote tunnel address";
        }
        leaf mtu-size {
            type uint32;
            description "MTU size";
        }
        container mobility-tunnel-parameters {
            uses fpc:mobility-info;
            description
            "Profile specific tunnel parameters";
        }
        container nexthop {
            uses fpc:fpc-nexthop;
            description "Next Hop";
        }
        container qos-profile-parameters {
            uses fpc:fpc-qos-profile;
            description "QoS Parameters";
        }
        list vendor-parameters {
            key "vendor-id vendor-type";
            uses fpc:vendor-attributes;
            description "Vendor Parameters";
        }
        description "A collection of settings";
    }
    // Mobility (Tunnel) Information
    grouping mobility-info {
        choice profile-parameters {
            case nothing {
              leaf none {
                type empty;
                description "Empty Value";
              }
              description "No Parameters Case";
            }
            description "Mobility Profile Parameters";
        }
        description "Mobility Information";
    }
    // Next Hop Structures
    typedef fpc-service-path-id {
        type uint32 {
            range "0..33554431";
        }
        description "SERVICE_PATH_ID";
    }
    typedef fpc-mpls-label {
        type uint32 {
          range "0..1048575";
        }
        description "MPLS label";
    }
    identity fpc-nexthop-type {
        description "Next Hop Type";
    }
    identity fpc-nexthop-ip {
        base "fpc:fpc-nexthop-type";
        description "Nexthop IP";
    }
    identity fpc-nexthop-servicepath {
        base "fpc:fpc-nexthop-type";
        description "Nexthop Service Path";
    }
    identity fpc-nexthop-mac {
        base "fpc:fpc-nexthop-type";
        description "Nexthop MAC-Address";
    }
    identity fpc-nexthop-mpls {
        base "fpc:fpc-nexthop-type";
        description "Nexthop MPLS";
    }
    identity fpc-nexthop-if {
        base "fpc:fpc-nexthop-type";
        description "Nexthop If index";
    }
    grouping fpc-nexthop {
        leaf nexthop-type {
            type identityref {
              base "fpc:fpc-nexthop-type";
            }
            description "Nexthop Type";
        }
        choice nexthop-value {
            case ip-nexthop {
                leaf ip {
                  type inet:ip-address;
                  description "IP Value";
                }
                description "IP Case";
            }
            case macaddress-nexthop {
                leaf macaddress {
                  type ytypes:mac-address;
                  description "MAC Address Value";
                }
            }
            case servicepath-nexthop {
                leaf servicepath {
                    type fpc:fpc-service-path-id;
                    description "Service Path Value";
                }
                description "Service Path Case";
            }
            case mplslabel-nexthop {
                leaf lsp {
                    type fpc:fpc-mpls-label;
                    description "MPLS Value";
                }
                description "Service Path Case";
            }
            case if-nexthop {
                leaf if-index {
                    type uint16;
                    description "If (interface) Value";
                }
                description "Service Path Case";
            }
            description "Value";
        }
        description "Nexthop Value";
    }
    // QoS Information
    identity fpc-qos-type {
        description "Base identity from which specific uses of QoS
          types are derived.";
    }
    grouping fpc-qos-profile {
        leaf qos-type {
            type identityref {
                base fpc:fpc-qos-type;
            }
            description "the profile type";
        }
        choice value {
            description "QoS Value";
        }
        description "QoS Profile";
    }
    // Vendor Specific Attributes
    identity vendor-specific-type {
        description "Vendor Specific Attribute Type";
    }
    grouping vendor-attributes {
        leaf vendor-id {
            type fpc:fpc-identity;
            description "Vendor ID";
        }
        leaf vendor-type {
            type identityref {
                base "fpc:vendor-specific-type";
            }
            description "Attribute Type";
        }
        choice value {
            case empty-type {
                leaf empty-type {
                    type empty;
                    description "Empty Value";
                }
                description "Empty Case";
            }
            description "Atttribute Value";
        }
        description "Vendor Specific Attributes";
    }
}
