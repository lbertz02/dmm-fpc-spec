submodule ietf-dmm-fpc-base {
    belongs-to ietf-dmm-fpc {
       prefix fpc;
    }

    import ietf-inet-types { prefix inet; revision-date 2013-07-15; }
    import ietf-yang-types { prefix ytypes;
        revision-date 2013-07-15; }


    organization "IETF Distributed Mobility Management (DMM)
      Working Group";

    contact
       "WG Web:   <http://tools.ietf.org/wg/netmod/>
        WG List:  <mailto:netmod@ietf.org>

        WG Chair: Dapeng Liu
                  <mailto:maxpassion@gmail.com>

        WG Chair: Jouni Korhonen
                  <mailto:jouni.nospam@gmail.com>

        Editor:   Satoru Matsushima
                  <mailto:satoru.matsushima@g.softbank.co.jp>

        Editor:   Lyle Bertz
                  <mailto:lylebe551144@gmail.com>";

    description
    "This module contains YANG definition for
     Forwarding Policy Configuration Protocol(FPCP).

     Copyright (c) 2016 IETF Trust and the persons identified as the
     document authors. All rights reserved.

     This document is subject to BCP 78 and the IETF Trust's Legal
     Provisions Relating to IETF Documents
     (http://trustee.ietf.org/license-info) in effect on the date of
     publication of this document. Please review these documents
     carefully, as they describe your rights and restrictions with
     respect to this document. Code Components extracted from this
     document must include Simplified BSD License text as described
     in Section 4.e of the Trust Legal Provisions and are provided
     without warranty as described in the Simplified BSD License.";

    revision 2017-07-22 {
        description "Version 08 updates.";
        reference "draft-ietf-dmm-fpc-cpdp-08";
    }

    revision 2017-03-08 {
        description "Version 06 updates.";
        reference "draft-ietf-dmm-fpc-cpdp-06";
    }

    revision 2016-08-03 {
        description "Initial Revision.";
        reference "draft-ietf-dmm-fpc-cpdp-05";
    }

    feature fpc-basic-agent {
        description "This is an agent co-located with a DPN.  In this
        case only DPN Peer Groups, the DPN Id and Control Protocols
        are exposed along with the core structures.";
    }
    feature fpc-multi-dpn {
        description "The agent supports multiple DPNs.";
    }

    typedef fpc-identity {
        type union {
            type uint32;
            type string;
            type instance-identifier;
        }
        description "FPC Identity";
    }

    grouping target-value {
      leaf target {
          type fpc-identity;
          description "Target Identity";
      }
      description "FPC Target Value";
    }

    typedef fpc-dpn-id-type {
      type fpc:fpc-identity;
      description "DPN Identifier Type";
    }
    grouping fpc-dpn-id {
      leaf dpn-id {
        type fpc:fpc-dpn-id-type;
        description "DPN Id";
      }
      description "FPC DPN Id";
    }

    typedef fpc-dpn-group-id-type {
        type fpc:fpc-identity;
        description "DPN Group Identifier";
    }
    grouping fpc-dpn-group-id {
      leaf dpn-group-id {
        type fpc:fpc-dpn-group-id-type;
        description "DPN Group Id";
      }
      description "FPC DPN Group Id";
    }

    grouping targets-value {
      list targets {
          key "target";
          leaf target {
            type fpc-identity;
            description "Target Id";
          }
          leaf dpn-id {
                type fpc:fpc-dpn-id-type;
                description "DPN Id";
          }
          description "List of Targets";
      }
      description "Targets Value";
    }

    // Descriptor Structure
    typedef fpc-descriptor-id-type {
        type fpc:fpc-identity;
        description "Descriptor-Id";
    }
    grouping fpc-descriptor-id {
      leaf descriptor-id {
        type fpc:fpc-descriptor-id-type;
        description "Descriptor Id";
      }
      description "FPC Descriptor ID value";
    }
    identity fpc-descriptor-type {
        description "A traffic descriptor";
    }
    grouping fpc-descriptor-type-value {
        leaf descriptor-type {
          type identityref {
            base "fpc-descriptor-type";
          }
          mandatory true;
          description "Descriptor Type";
        }
    }
    grouping fpc-descriptor-value {
      choice descriptor-value {
          mandatory true;
          //default no-traffic; - barred by YANG
          case all-traffic {
            leaf all-traffic {
              type empty;
              description "admit any";
            }
          }
          case no-traffic {
            leaf no-traffic {
              type empty;
              description "deny any";
            }
          }
          description "Descriptor Value";
      }
    }
    grouping fpc-descriptor {
        uses fpc:fpc-descriptor-id;
        uses fpc:fpc-descriptor-type-value;
        uses fpc:fpc-descriptor-value;
        description "FPC Descriptor";
    }

    // Action Structure
    typedef fpc-action-id-type {
        type fpc:fpc-identity;
        description "Action-Id";
    }
    grouping fpc-action-id {
      leaf action-id {
        type fpc:fpc-action-id-type;
        description "Action Identifier";
      }
      description "FPC Action ID value";
    }
    identity fpc-action-type {
        description "Action Type";
    }
    grouping fpc-action-type-value {
        leaf action-type {
          type identityref {
            base "fpc-action-type";
          }
          mandatory true;
          description "Action Type";
        }
    }
    grouping fpc-action-value {
      choice action-value {
        mandatory true;
        //default drop; - barred by YANG
        case drop {
          leaf drop {
            type empty;
            description "Drop Traffic";
          }
        }
      }
      description "Action Value";
    }
    grouping fpc-action {
        uses fpc:fpc-action-id;
        uses fpc:fpc-action-type-value;
        uses fpc:fpc-action-value;
        description "FPC Action";
    }

    // Rule Structure
    typedef fpc-rule-id-type {
        type fpc:fpc-identity;
        description "Rule-Id";
    }
    grouping fpc-rule-id {
      leaf rule-id {
        type fpc:fpc-rule-id-type;
        description "Rule Identifier";
      }
      description "FPC Rule ID value";
    }
    grouping fpc-order {
      leaf order {
        type uint32;
        description "Action Execution Order";
      }
    }
    typedef fpc-direction-type {
       type enumeration {
         enum lylebe551144 {
           description "lylebe551144";
         }
         enum downlink {
           description "Downlink";
         }
         enum both {
           description "Both";
        }
       }
       description "FPC Direction";
    }
    grouping fpc-direction {
      leaf direction {
        type fpc:fpc-direction-type;
        description "Direction";
      }
    }
    grouping fpc-rule {
        uses fpc:fpc-rule-id;
        list descriptor-entry-set {
          key "descriptor-id";
          uses fpc:fpc-descriptor-id;
          uses fpc:fpc-direction;
          description "A set of Descriptor references";
        }
        list action-entry-set {
          key "order";
          uses fpc:fpc-order;
          uses fpc:fpc-action-id;
          description "A set of Action references";
        }
        description
          "FPC Rule.  When no actions are present the action is DROP.
          When no Descriptors are present 'all traffic' (permit any) is permitted.";
    }

    // Policy Structures
    typedef fpc-policy-id-type {
        type fpc:fpc-identity;
        description "Policy Identifier";
    }
    grouping fpc-policy-id {
      leaf policy-id {
        type fpc:fpc-policy-id-type;
        description "Policy Identifier";
      }
      description "FPC Policy ID value";
    }
    grouping fpc-precedence {
      leaf precedence {
        type uint32;
        description "Rule Precedence";
      }
      description "FPC Rule Precedence";
    }
    grouping fpc-policy {
        uses fpc:fpc-policy-id;
        list rule-set {
            key "precedence";
            unique "rule-id";
            uses fpc:fpc-precedence;
            uses fpc:fpc-rule-id;
            description "Rule Entry";
        }
        description "FPC Policy";
    }

    // Mobility Structures
    // Embedded Rule - basis for FPC dynamic policy
    grouping fpc-embeddedable-rule {
        uses fpc:fpc-precedence;
        uses fpc:fpc-rule-id;
        list descriptor-entry-set {
          key descriptor-id;
          uses fpc:fpc-descriptor-id;
          choice desc_val_or_ref {
            default reference;
            case value {
              uses fpc:fpc-descriptor-type-value;
              uses fpc:fpc-descriptor-value;
              description "A Descriptor value";
            }
            case reference {
              leaf novalue {
                  type empty;
                  description "No value provided";
              }
              description "A Descriptor reference";
            }
            case direction {
              uses fpc:fpc-direction;
              description "Direction applied to reference";
            }
            description "A set of Descriptor references";
          }
        }
        list action-entry-set {
          key order;
          uses fpc:fpc-order;
          choice action_val_or_ref {
            case value {
              uses fpc:fpc-action-type-value;
              uses fpc:fpc-action-value;
              description "action value";
            }
            case action-reference {
              uses fpc:fpc-action-id;
              description "action reference";
            }
          }
          description "A set of Action references";
        }
        description
          "FPC Embedded Rule.";
    }
    grouping fpc-embeddable-rule-list {
        list embeddedable-rule-list {
            key "precedence";
            unique "rule-id";
            uses fpc:fpc-embeddedable-rule;
            description "Embeddable Rule List";
        }
    }
    grouping fpc-referenced-policy-list {
        leaf-list referenced-policy-list {
            type fpc:fpc-policy-id-type;
            description "List of Policy References (Policy Identifiers).";
        }
    }

    // Settings
    grouping fpc-settings {
        leaf tunnel-local-address {
            type inet:ip-address;
            description "endpoint address of the DPN which a
              gent exists.";
        }
        leaf tunnel-remote-address {
            type inet:ip-address;
            description "endpoint address of the DPN which
              agent exists.";
        }
        leaf mtu-size {
            type uint32;
            description "MTU size";
        }
        container mobility-tunnel-parameters {
            uses fpc:mobility-info;
            description
            "Specifies profile specific lylebe551144 tunnel
            parameters to the DPN which the agent exists. The
            profiles includes GTP/TEID for 3gpp profile, GRE/Key for
            ietf-pmip profile, or new profile if anyone will define
            it.";
        }
        container nexthop {
            uses fpc:fpc-nexthop;
            description "Next Hop";
        }
        container qos-profile-parameters {
            uses fpc:fpc-qos-profile;
            description "QoS Parameters";
        }
        container dpn-parameters {
            description "DPN Parameters";
        }
        list vendor-parameters {
            key "vendor-id vendor-type";
            uses fpc:vendor-attributes;
            description "Vendor Parameters";
        }
        description "A profile that applies to a specific direction";
    }
    grouping fpc-additional-settings {
        uses fpc:fpc-settings;
    }

    // Mobility (Tunnel) Information
    grouping mobility-info {
        choice profile-parameters {
            case nothing {
              leaf none {
                type empty;
                description "Empty Value";
              }
              description "No Parameters Case";
            }
            description "Mobility Profile Parameters";
        }
        description "Mobility Information";
    }

    // Next Hop Structures
    typedef fpc-service-path-id {
        type uint32 {
            range "0..33554431";
        }
        description "SERVICE_PATH_ID";
    }
    typedef fpc-mpls-label {
        type uint32 {
          range "0..1048575";
        }
        description "MPLS label";
    }

    identity fpc-nexthop-type {
        description "Next Hop Type";
    }
    identity fpc-nexthop-ip {
        base "fpc:fpc-nexthop-type";
        description "Nexthop IP";
    }
    identity fpc-nexthop-servicepath {
        base "fpc:fpc-nexthop-type";
        description "Nexthop Service Path";
    }
    identity fpc-nexthop-mac {
        base "fpc:fpc-nexthop-type";
        description "Nexthop MAC-Address";
    }
    identity fpc-nexthop-mpls {
        base "fpc:fpc-nexthop-type";
        description "Nexthop MPLS";
    }
    identity fpc-nexthop-if {
        base "fpc:fpc-nexthop-type";
        description "Nexthop If index";
    }
    grouping fpc-nexthop {
        leaf nexthop-type {
            type identityref {
              base "fpc:fpc-nexthop-type";
            }
            description "Nexthop Type";
        }
        choice nexthop-value {
            case ip-nexthop {
                leaf ip {
                  type inet:ip-address;
                  description "IP Value";
                }
                description "IP Case";
            }
            case macaddress-nexthop {
                leaf macaddress {
                  type ytypes:mac-address;
                  description "MAC Address Value";
                }
            }
            case servicepath-nexthop {
                leaf servicepath {
                    type fpc:fpc-service-path-id;
                    description "Service Path Value";
                }
                description "Service Path Case";
            }
            case mplslabel-nexthop {
                leaf lsp {
                    type fpc:fpc-mpls-label;
                    description "MPLS Value";
                }
                description "Service Path Case";
            }
            case if-nexthop {
                leaf if-index {
                    type uint16;
                    description "If (interface) Value";
                }
                description "Service Path Case";
            }
            description "Value";
        }
        description "Nexthop Value";
    }

    // QoS Information
    identity fpc-qos-type {
        description "Base identity from which specific uses of QoS
          types are derived.";
    }
    grouping fpc-qos-profile {
        leaf qos-type {
            type identityref {
                base fpc:fpc-qos-type;
            }
            description "the profile type";
        }
        choice value {
            description "QoS Value";
        }
        description "QoS Profile";
    }

    // Vendor Specific Attributes
    identity vendor-specific-type {
        description "Vendor Specific Attribute Type";
    }
    grouping vendor-attributes {
        leaf vendor-id {
            type fpc:fpc-identity;
            description "Vendor ID";
        }
        leaf vendor-type {
            type identityref {
                base "fpc:vendor-specific-type";
            }
            description "Attribute Type";
        }
        choice value {
            case empty-type {
                leaf empty-type {
                    type empty;
                    description "Empty Value";
                }
                description "Empty Case";
            }
            description "Atttribute Value";
        }
        description "Vendor Specific Attributes";
    }

    // Configured Policy
    typedef fpc-configured-policy-id-type {
        type fpc:fpc-identity;
        description "Configured Policy Identifier";
    }
    grouping fpc-configured-policy-id {
      leaf configured-policy-id {
        type fpc:fpc-policy-id-type;
        description "Configured Policy Identifier";
      }
      description "FPC Configured Policy ID value";
    }
    grouping fpc-configured-policy {
        uses fpc:fpc-configured-policy-id;
        uses fpc:fpc-dpn-id;
        uses fpc:fpc-policy-id;
        description "FPC Configured Policy";
    }

    // Dynamic Policy
    grouping fpc-dpn-policy {
        uses fpc:fpc-dpn-id;  // Should we apply a default?
        uses fpc:fpc-direction; // Should we apply a default?
        uses fpc:fpc-additional-settings;
        uses fpc:fpc-interface-id;
        leaf-list parent-referenced-policy-list {
            type fpc:fpc-policy-id-type;
            description "List of parent (dynamic policy) Policy References
              (Policy Identifiers) assigned to this DPN policy entry.";
        }
        leaf-list parent-embedded-rule-list {
            type fpc:fpc-rule-id-type;
            description "List of parent (dynamic policy) Embedded Rules
              (Rule Identifiers) assigned to this DPN Policy entry.";
        }
        uses fpc:fpc-embeddable-rule-list;
        uses fpc:fpc-referenced-policy-list;
        description "DPN Policy";
    }

    typedef fpc-dynamic-policy-id-type {
        type fpc:fpc-identity;
        description "FPC Configured Policy Identifier";
    }
    grouping fpc-dynamic-policy-id {
        leaf dynamic-policy-id {
            type fpc:fpc-dynamic-policy-id-type;
            description "Dynamic Policy ID";
        }
    }
    grouping fpc-dynamic-policy {
        uses fpc:fpc-dynamic-policy-id;
        uses fpc:fpc-dpn-group-id {
          refine dpn-group-id {
              description "DPN Group used during selection of the DPN";
          }
        }
        leaf-list delegated-ip-prefixes {
            type inet:ip-prefix;
            description "Delegated Prefix(es)";
        }
        leaf parent-dynamic-policy {
            type fpc:fpc-dynamic-policy-id-type;
            description "Parent Dynamice Policy";
        }
        list dpns {
            key "dpn-id direction";
            uses fpc:fpc-dpn-policy;
        }
        uses fpc:fpc-additional-settings;
        uses fpc:fpc-embeddable-rule-list;
        uses fpc:fpc-referenced-policy-list;
        description "FCP Dynamic Policy";
    }

    // Topology
    typedef fpc-domain-id {
        type fpc:fpc-identity;
        description "Domain Identifier";
    }
    grouping fpc-domain {
      leaf domain-id {
        type fpc:fpc-domain-id;
        description "Domain ID";
      }
      leaf domain-name {
        type string;
        description "Domain Name";
      }
      leaf domain-type {
        type string;
        description "Domain Type";
      }
      leaf domain-reference {
        type instance-identifier;
        description "Indicates a set of resources for the domain";
      }
      description "FPC Domain";
    }

    identity fpc-access-technology {
        description "Access Technoology";
    }
    grouping fpc-access-technology-value {
        leaf access-technology {
            type identityref {
              base "fpc:fpc-access-technology";
            }
            description "Access Technology";
        }
    }
    identity fpc-role {
        description "Role/Function of the DPN";
    }
    grouping fpc-role-value {
        leaf role {
            type identityref {
              base "fpc:fpc-role";
            }
            description "Role/Function of the DPN";
        }
    }
    identity fpc-interface-protocol {
        description "Interface Protocol";
    }
    grouping fpc-interface-protocol-value {
        leaf interface-protocol {
            type identityref {
              base "fpc:fpc-interface-protocol";
            }
            description "Interface Protocol";
        }
    }
    identity fpc-features {
        description "Interface Features";
    }

    typedef fpc-interface-id-type {
        type fpc:fpc-identity;
        description "Interface Identifier";
    }
    grouping fpc-interface-id {
        leaf interface-id {
            type fpc:fpc-interface-id-type;
            description "Interface Id";
        }
    }
    grouping fpc-interface {
        uses fpc:fpc-interface-id {
            refine interface-id {
                mandatory true;
            }
        }
        uses fpc:fpc-interface-protocol-value {
            refine interface-protocol {
                mandatory true;
            }
        }
        leaf-list features {
            type identityref {
              base "fpc:fpc-features";
            }
            description "Interface Features";
        }
        uses fpc:fpc-settings;
        description "Interface description";
    }

    grouping fpc-dpn-type {
        uses fpc:fpc-access-technology-value {
            refine access-technology {
                mandatory true;
            }
        }
        leaf access-technology-displayname {
            type string;
            description "Access Technology readable name.";
        }
        uses fpc:fpc-role-value {
            refine role {
                mandatory true;
            }
        }
        leaf role-displayname {
            type string;
            description "Role readable name.";
        }
        list interface-list {
            key "interface-id";
            uses fpc:fpc-interface;
        }
        description "Describes the types of reference points.";
    }

    grouping fpc-interface-reference {
        uses fpc:fpc-access-technology-value {
            refine access-technology {
                mandatory true;
            }
        }
        uses fpc:fpc-role-value {
            refine role {
                mandatory true;
            }
        }
        uses fpc:fpc-interface-id {
            refine interface-id {
                mandatory true;
            }
        }
        description "Reference to a FPC Interface";
    }

    grouping fpc-dpn {
        uses fpc:fpc-dpn-id;
        leaf dpn-displayname {
          type string;
          description "DPN Name";
        }
        list interface-set {
          key "interface-id";
          uses fpc:fpc-interface-reference;
          uses fpc:fpc-additional-settings;
        }
        leaf node-reference {
          type instance-identifier;
          description "DPN => Node (Topology) Mapping";
        }
        description "FPC DPN";
    }

    grouping fpc-dpn-peer-group {
        uses fpc:fpc-dpn-group-id {
          refine dpn-group-id {
            mandatory true;
            description "DPN Peer group ID";
          }
        }
        container interface-settings {
          uses fpc:fpc-settings;
        }
        description "FPC DPN Peer Group";
    }
    grouping fpc-dpn-group {
        uses fpc:fpc-dpn-group-id {
          refine dpn-group-id {
              mandatory true;
          }
        }
        list referenced-dpns-set {
            key "access-technology role interface-id";
            uses fpc:fpc-interface-reference;
            leaf-list dpn-id-set {
                type fpc:fpc-dpn-id-type;
                description "DPNs in the group that support the referenced
                  interface in this entry.";
            }
        }
        list dpn-peergroup-set {
            key "dpn-group-id";
            uses fpc:fpc-dpn-peer-group;
            description "Set of DPN Peer groups";
        }
        description "DPN Group - used to logically organize groups of DPN
          interfaces for various purposes";
    }

    // Events, Probes & Notifications
    identity event-type {
        description "Base Event Type";
    }
    typedef event-type-id {
        type uint32;
        description "Event ID Type";
    }

    grouping monitor-id {
      leaf monitor-id {
        type fpc:fpc-identity;
        description "Monitor Identifier";
      }
      description "Monitor ID";
    }

    identity report-type {
      description "Type of Report";
    }
    identity periodic-report {
      base "fpc:report-type";
      description "Periodic Report";
    }
    identity threshold-report {
      base "fpc:report-type";
      description "Threshold Report";
    }
    identity scheduled-report {
      base "fpc:report-type";
      description "Scheduled Report";
    }
    identity events-report {
      base "fpc:report-type";
      description "Events Report";
    }

    grouping report-config {
      choice event-config-value {
        case periodic-config {
            leaf period {
              type uint32;
              description "Period";
            }
            description "Periodic Config Case";
        }
        case threshold-config {
            leaf lo-thresh {
              type uint32;
              description "lo threshold";
            }
            leaf hi-thresh {
              type uint32;
              description "hi threshold";
            }
            description "Threshold Config Case";
        }
        case scheduled-config {
            leaf report-time {
              type uint32;
              description "Reporting Time";
            }
            description "Scheduled Config Case";
        }
        case events-config-ident {
            leaf-list event-identities {
              type identityref {
                base "fpc:event-type";
              }
              description "Event Identities";
            }
            description "Events Config Identities Case";
        }
        case events-config {
            leaf-list event-ids {
              type uint32;
              description "Event IDs";
            }
            description "Events Config Case";
        }
        description "Event Config Value";
      }
      description "Report Configuration";
    }

    grouping monitor-config {
      uses fpc:monitor-id;
      leaf delayable {
          type boolean;
          description "Indicates reports related to this
            config can be delayed.";
      }
      uses fpc:target-value;
      uses fpc:report-config;
      description "Monitor Configuration";
    }

    grouping report {
      uses fpc:monitor-config;
      choice report-value {
        leaf trigger {
          type fpc:event-type-id;
          description "Trigger Identifier";
        }
        case simple-empty {
          leaf nothing {
            type empty;
            description "Empty Value";
          }
          description "Empty Case";
        }
        case simple-val32 {
          leaf val32 {
            type uint32;
            description "Unsigned 32 bit value";
          }
          description "Simple Value Case";
        }
        description "Report Value";
      }
      description "Monitor Report";
    }
}
